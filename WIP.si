unit cpu2memory(
    // CLOCKS
    input   uint1   clock_CPUdecoder,

    // MEMORY INTERFACE
    output  uint2   accesssize,
    output  uint27  address(0),
    output  uint1   cacheselect(0),
    output  uint16  writedata,
    output  uint1   writememory,
    input   uint16  readdata,
    output  uint1   readmemory,
    input!  uint1   memorybusy,

    // MINI DMA CONTROLLER
    input   uint27  DMASOURCE,
    input   uint27  DMADEST,
    input   uint27  DMACOUNT,
    input   uint3   DMAMODE,
    output  uint2   DMAACTIVE(0),

    // CPU CONTROLLER
    input   uint1   fetch,
    input   uint27  fetchAddress,
    output  uint32  instruction,
    output  uint1   compressed,
    input   uint2   size32168,
    input   uint1   load,
    input   uint1   signedload,
    input   uint27  loadAddress,
    output  uint32  memoryInput,
    input   uint1   store,
    input   uint27  storeAddress,
    input   uint32  storeValue,
    output  uint1   fetchBusy(0),
    output  uint1   loadBusy(0),
    output  uint1   storeBusy(0)
) {
    uint1   dofetch = 0;                            uint27  pc = uninitialised;
    uint1   doload = 0;                             uint27  la = uninitialised;                         uint3   size_l = uninitialised;
    uint1   dostore = 0;                            uint27  sa = uninitialised;                         uint3   size_s = uninitialised;

    // GENERATE PLUS 2 ADDRESSES FOR 32 BIT MEMORY OPERATIONS
    addrplus2 PC2 <@clock_CPUdecoder> ( address <: pc ); addrplus2 LA2 <@clock_CPUdecoder> ( address <: la ); addrplus2 SA2 <@clock_CPUdecoder> ( address <: sa );

    // COMPRESSED INSTRUCTION EXPANDER
    compressed00 COMPRESSED00 <@clock_CPUdecoder> ( i16 <: readdata ); compressed01 COMPRESSED01 <@clock_CPUdecoder> ( i16 <: readdata ); compressed10 COMPRESSED10 <@clock_CPUdecoder> ( i16 <: readdata );

    // STOREFAST IF TO BRAM AND OR I/O ( 8 or 16bit )
    uint1   STORE168FAST <:: ( ~sa[26,1] & sa[15,1] & ~size_s[1,1] );

    // SIGN EXTENDER FOR 8 AND 16 BIT LOADS
    signextend SIGNEXTEND <@clock_CPUdecoder> ( readdata <: readdata, is16or8 <: size_l[0,1], byteaccess <: la[0,1], dounsigned <: size_l[2,1] );

    // MINI DMA CONTROLLER
    uint16  dmaInput = uninitialised;
    dma DMA( DMASOURCE <: DMASOURCE, DMADEST <: DMADEST, DMACOUNT <: DMACOUNT, DMAMODE <: DMAMODE );

    DMA.start := 0; DMA.update := 0; readmemory := 0; writememory := 0;

    always_before {
        if( fetch ) {
            fetchBusy = 1; pc = fetchAddress;
            __display("FETCH FROM %x",pc);
        }
        if( load ) {
            loadBusy = 1; size_l = { signedload, size32168 }; la = loadAddress;
            __display("LOAD FROM %x TYPE %b",la,size_l);
        }
        if( store ) {
            storeBusy = 1; size_s = size32168; sa = storeAddress;
            __display("STORE %x TO %x TYPE %b",storeValue,sa,size_s);
        }
    }

    algorithm <autorun> {
        while(1) {
            if( fetchBusy ) {
                cacheselect = 0;

                address = pc;
                while( memorybusy ) {}                                                                                                                  // FETCH POTENTIAL COMPRESSED OR 1ST 16 BITS
                compressed = ( ~&readdata[0,2] );
                if( compressed ) {
                    switch( readdata[0,2] ) {                                                                                                           // EXPAND COMPRESSED INSTRUCTION
                        case 2b00: { instruction = { COMPRESSED00.i32, 2b11 }; }
                        case 2b01: { instruction = { COMPRESSED01.i32, 2b11 }; }
                        case 2b10: { instruction = { COMPRESSED10.i32, 2b11 }; }
                        default: {}
                    }
                } else {
                    instruction[0,16] = readdata; address = pc + 2; readmemory = 1; while( memorybusy ) {} instruction[16,16] = readdata;               // 32 BIT INSTRUCTION FETCH 2ND 16 BITS
                }

                fetchBusy = 0;
            }

            if( loadBusy ) {
                cacheselect = 1;

                address = la; accesssize = size_l; readmemory = 1; while( memorybusy ) {}                                                               // READ 1ST 8 or 16 BITS
                if( size_l[1,1] ) {
                    memoryInput[0,16] = readdata; address = la + 2; readmemory = 1; while( memorybusy ) {} memoryInput[16,16] = readdata;               // READ 2ND 16 BITS
                } else {
                    memoryInput = SIGNEXTEND.memory168;                                                                                                 // 8 or 16 BIT SIGN EXTENDED
                }

                loadBusy = 0;
            }

            if( storeBusy ) {
                cacheselect = 1;

                address = sa; accesssize = size_s; writedata = storeValue[0,16];                                                                        // STORE 8 OR 16 BIT
                if( STORE168FAST ) {
                    writememory = 1;                                                                                                                    // FAST STORE FOR 16 8 BIT TO LOW MEMORY
                } else {
                    writememory = 1; while( memorybusy ) {}
                    if( size_s[1,1] ) {
                        address = sa + 2; writedata = storeValue[16,16]; writememory = 1;  while( memorybusy ) {}                                       // 32 BIT WRITE 2ND 16 BITS
                    }
                }

                storeBusy = 0;
            }

            if( |DMAMODE ) {
                // PROCESS A DMA REQUEST - USES DATA CACHE AND BYTE ACCESS MODE IF NOT SPECIAL MODE
                cacheselect = 1; DMAACTIVE = &DMAMODE ? 2 : 1; DMA.start = 1;
                while( |DMA.dmacount ) {
                    address = DMA.dmasrc; readmemory = 1; while( memorybusy ) {}                                                                        // DMA FETCH
                    dmaInput[0,16] = readdata; address = DMA.dmadest;                                                                                   // DMA SET DESTINATION ADDRESS
                    if( DMAACTIVE[1,1] ) {
                        writedata = dmaInput[0,8]; writememory = 1;                                                                                     // STORE TWO PIXELS TO PIXELBLOCK IN SPECIAL MODE
$$if gpu_50_mhz then
                        ++:                                                                                                                             // 1 CYCLE FOR FASTER GPU, 2 FOR SLOWER
$$else
                        ++: ++:
$$end
                        writedata = dmaInput[8,8]; writememory = 1;
                    } else {
                        writedata = dmaInput[ { DMA.dmasrc[0,1], 3b000 }, 8 ];                                                                          // DMA STORE 8 BIT
                        if( DMA.dmadest[26,1] ) { writememory = 1; while( memorybusy ) {} } else { writememory = 1;  }                                  // CHECK IF FAST STORE IS POSSIBLE
                    }
                    DMA.update = 1;
                }
                DMAACTIVE = 0;
            }
        }
    }
}

// RISC-ICE-V
// inspired by https://github.com/sylefeb/Silice/blob/master/projects/ice-v/ice-v.ice
//
// A simple Risc-V RV32IMAFC processor

// RISC-V - MAIN CPU LOOP
//          ALU FUNCTIONALITY LISTED IN ALU-

unit PAWSCPU(
    input   uint1   clock_CPUdecoder,
    input   uint1   clock_CPUcache,
    output  uint2   accesssize,
    output  uint27  address(0),
    output  uint1   cacheselect(0),
    output  uint16  writedata,
    output  uint1   writememory,
    input   uint16  readdata,
    output  uint1   readmemory,
    input   uint1   memorybusy,

    // SMT
    input   uint1   SMTRUNNING,
    input   uint27  SMTSTARTPC,

    // MINI DMA CONTROLLER
    input   uint27  DMASOURCE,
    input   uint27  DMADEST,
    input   uint27  DMACOUNT,
    input   uint3   DMAMODE,
    output  uint2   DMAACTIVE(0)
) <reginputs> {
    // COMMIT TO REGISTERS FLAG AND HART (0/1) SELECT
    uint1   COMMIT = uninitialized;                 uint1   SMT = 0;

    // RISC-V 32 BIT INSTRUCTION DECODER + MEMORY ACCESS SIZE
    uint32  instruction = uninitialised;            uint1   compressed = uninitialised;
    decode RV32DECODER <@clock_CPUdecoder> ( instruction <: instruction );
    memoryaccess MEMACCESS <@clock_CPUdecoder> ( cacheselect <: cacheselect, DMAACTIVE <: DMAACTIVE[0,1], opCode <: RV32DECODER.opCode, function7 <: RV32DECODER.function7[2,5], function3 <: RV32DECODER.function3, AMO <: RV32DECODER.AMO );

    // RISC-V REGISTERS
    uint32  result <:: IFASTSLOW.FASTPATH ? EXECUTEFAST.result : EXECUTESLOW.result;
    riscvregisters REGISTERS <@clock_CPUdecoder> (
        SMT <:: SMT,
        rs1 <: RV32DECODER.rs1,
        rs2 <: RV32DECODER.rs2,
        rs3 <: RV32DECODER.rs3,
        rd <: RV32DECODER.rd,
        result <: result
    );

    // NEGATIVE OF REGISTERS FOR ABS AND ADD/SUB
    int32   negRS1 <:: -REGISTERS.sourceReg1;                 int32   negRS2 <:: -REGISTERS.sourceReg2;
    // EXTRACT ABSOLUTE VALUE FOR MULTIPLICATION AND DIVISION
    absolute ARS1 <@clock_CPUdecoder> ( number <: REGISTERS.sourceReg1, negative <: negRS1 ); absolute ARS2 <@clock_CPUdecoder> ( number <: REGISTERS.sourceReg2, negative <: negRS2 );

    // RISC-V PROGRAM COUNTERS AND STATUS - SMT -> RUNNING ON HART 1 WITH DUPLICATE PROGRAM COUNTER AND REGISTER FILE
    uint27  pc = 0;                     uint27  pc_next <:: SMT ? pc :  NEWPC.newPC;                                    // HART 0 pc + UPDATE
    uint27  pcSMT = uninitialized;      uint27  pcSMT_next <:: SMT ? NEWPC.newPC : SMTRUNNING ? pcSMT : SMTSTARTPC;     // HART 1 pc + update
    uint27  PC <:: SMT ? pcSMT : pc;                                                                                    // SELECT PC FOR THIS CYCLE

    // RISC-V ADDRESS GENERATOR
    addressgenerator AGU <@clock_CPUdecoder> (
        instruction <: instruction,
        immediateValue <: RV32DECODER.immediateValue,
        PC <: PC,
        sourceReg1 <: REGISTERS.sourceReg1,
        AMO <: RV32DECODER.AMO
    );

    // STORE SELECTION + BYPASS FLAG IF 16/8 BIT WRITE TO I/O MEMORY
    uint32  storeValue <:: IFASTSLOW.FASTPATH ? EXECUTEFAST.memoryoutput : EXECUTESLOW.memoryoutput;

    // CLASSIFY THE INSTRUCTION AND SPLIT INTO FAST/SLOW FAST/SLOW
    whatis IS <@clock_CPUdecoder> ( opCode <: RV32DECODER.opCode, function3 <: RV32DECODER.function3, function7 <: RV32DECODER.function7 );
    Iclass IFASTSLOW <@clock_CPUdecoder> ( opCode <: RV32DECODER.opCode, function3 <: RV32DECODER.function3, isALUM <: IS.ALUM, isALUCLM <: IS.ALUCLM );

    // EXECUTE MULTICYCLE INSTRUCTIONS, INTEGER DIVIDE, FPU, CSR AND ALU-A
    cpuexecuteSLOWPATH EXECUTESLOW(
        SMT <: SMT,
        instruction <: instruction,
        opCode <: RV32DECODER.opCode,
        function3 <: RV32DECODER.function3,
        function7 <: RV32DECODER.function7,
        rs1 <: RV32DECODER.rs1,
        rs2 <: RV32DECODER.rs2,
        sourceReg1 <: REGISTERS.sourceReg1,
        sourceReg2 <: REGISTERS.sourceReg2,
        abssourceReg1 <: ARS1.value,
        abssourceReg2 <: ARS2.value,
        sourceReg1F <: REGISTERS.sourceReg1F,
        sourceReg2F <: REGISTERS.sourceReg2F,
        sourceReg3F <: REGISTERS.sourceReg3F,
        memoryinput <: MC.memoryInput,
        incCSRinstret <: COMMIT,
        isALUM <: IS.ALUM,
        isALUCLM <: IS.ALUCLM,
        isCSR <: IS.CSR,
        isATOMIC <: IS.ATOMIC,
        isFPU <: IS.FPU
    );

    // EXECUTE SINGLE CYLE INSTRUCTIONS, MOST OF BASE PLUS INTEGER MULTIPLICATION
    uint1   takeBranch <:: IFASTSLOW.FASTPATH & EXECUTEFAST.takeBranch;
    cpuexecuteFASTPATH EXECUTEFAST(
        opCode <: RV32DECODER.opCode,
        function3 <: RV32DECODER.function3,
        function7 <: RV32DECODER.function7,
        rs1 <: RV32DECODER.rs1,
        rs2 <: RV32DECODER.rs2,
        sourceReg1 <: REGISTERS.sourceReg1,
        sourceReg2 <: REGISTERS.sourceReg2,
        negSourceReg2 <: negRS2,
        sourceReg2F <: REGISTERS.sourceReg2F,
        immediateValue <: RV32DECODER.immediateValue,
        memoryinput <: MC.memoryInput,
        AUIPCLUI <: AGU.AUIPCLUI,
        nextPC <: NEWPC.nextPC,
        isALUMM <: IS.ALUM,
        isLOAD <: MEMACCESS.memoryload,
        isBRANCH <: IS.BRANCH,
        isAUIPCLUI <: IS.AUIPCLUI,
        isJAL <: IS.JAL
    );

    // SELECT NEXT PC
    newpc NEWPC <@clock_CPUdecoder> (
        opCode <: RV32DECODER.opCode,
        PC <: PC,
        compressed <: compressed,
        incPC <: IFASTSLOW.incPC,
        takeBranch <: takeBranch,
        branchAddress <: AGU.branchAddress,
        jumpAddress <: AGU.jumpAddress,
        loadAddress <: AGU.loadAddress
    );

    // MEMORY CONTROLLER
    cpu2memory MC(
        accesssize :> accesssize,
        address :> address,
        cacheselect :> cacheselect,
        writedata :> writedata,
        writememory :> writememory,
        readdata <: readdata,
        readmemory :> readmemory,
        memorybusy <: memorybusy,

        DMASOURCE <: DMASOURCE,
        DMADEST <: DMADEST,
        DMACOUNT <: DMACOUNT,
        DMAMODE <: DMAMODE,
        DMAACTIVE :> DMAACTIVE,

        signedload <: RV32DECODER.function3[2,1],
        size32168 <: MEMACCESS.accesssize,
        fetchAddress <: PC,
        loadAddress <: AGU.loadAddress,
        storeAddress <: AGU.storeAddress,
        storeValue <: storeValue
    );

    // SMALL ON CPU L0 CACHE - 1 per HART - RESET when pc == 0 - START OF BIOS
    il0cache ICACHE_0 <@clock_CPUcache> ( address <: pc, newinstruction <: instruction[2,30], newcompressed <: compressed );
    il0cache ICACHE_1 <@clock_CPUcache> ( address <: pcSMT, newinstruction <: instruction[2,30], newcompressed <: compressed );
    ICACHE_0.update := 0; ICACHE_1.update := 0; ICACHE_0.invalidate := ~|pc; ICACHE_1.invalidate := ~|pc;

    REGISTERS.frd := IFASTSLOW.FASTPATH ? IFASTSLOW.frd : EXECUTESLOW.frd; REGISTERS.write := COMMIT & IFASTSLOW.writeRegister;
    EXECUTESLOW.start := 0; COMMIT := 0;

    MC.fetch := 0; MC.load :=0; MC.store := 0;

    algorithm <autorun> {
        while( MC.fetchBusy | MC.loadBusy | MC.storeBusy | | MC.DMAACTIVE | EXECUTESLOW.busy ) {}                                                   // WAIT FDR MEMORY AND CPU TO FINISH

        while(1) {
            if( ( ~SMT & ICACHE_0.tagmatch ) | ( SMT & ICACHE_1.tagmatch ) ) {                                                                      // CHECK ICACHE
                instruction =  { SMT ? ICACHE_1.instruction : ICACHE_0.instruction, 2b11 };
                compressed = SMT ? ICACHE_1.compressed : ICACHE_0.compressed;
            } else {
                MC.fetch = 1; while( MC.fetchBusy ) {}
                instruction = MC.instruction; compressed = MC.compressed;
            }
            ++: ++:// DECODE, REGISTER FETCH, ADDRESS GENERATION AUTOMATICALLY TAKES PLACE AS SOON AS THE INSTRUCTION IS LOADED
            ICACHE_0.update = ~SMT & ~ICACHE_0.tagmatch; ICACHE_1.update = SMT & ~ICACHE_1.tagmatch;                                                    // UPDATE ICACHE
            __display("INSTRUTION = %x, COMPRESSED = %b",instruction,compressed);

            if( MEMACCESS.memoryload ) {
                __display("LOAD REQUEST FROM %x",AGU.loadAddress);
                MC.load = 1; while( MC.loadBusy ) {}
            } else {
                MC.load = 0;
            }

            if( ~IFASTSLOW.FASTPATH ) {
                EXECUTESLOW.start = 1; while( EXECUTESLOW.busy ) {}                                                                                     // FPU, ALU-A, INTEGER DIVISION, CLMUL, CSR
            } else {
                COMMIT = 0;                                                                                                                             // INTEGER ALU, LOAD, STORE, BRANCH, JUMP, ETC
            }
            COMMIT = 1;                                                                                                                                 // COMMIT REGISTERS

            if( MEMACCESS.memorystore ) {
                __display("STORE REQUEST TO %x",AGU.storeAddress);
                if( MC.storeBusy ) {
                    while( MC.storeBusy ) {}
                    MC.store = 1;
                } else {
                    MC.store = 1;
                }
            }

            pc = pc_next; pcSMT = pcSMT_next; SMT = ~SMT & SMTRUNNING;                                                                                  // UPDATE PC AND SMT
            ++:
            MC.fetch = ( ~SMT & ~ICACHE_0.tagmatch ) | ( SMT & ~ICACHE_1.tagmatch );                                                                  // START FETCH OF NEXT INSTRUCTION IF NOT IN ICACHE
        } // RISC-V
    }
}

// ON CPU INSTRUCTION CACHE IS SMALL NUMBER OF INSTRUCTIONS + COMPRESSED FLAG
$$ addr_width = 27
$$ L0Isize = 64
$$ L0Icacheaddrwidth = clog2(L0Isize)
$$ L0Ipartaddresswidth = addr_width - 1 - L0Icacheaddrwidth
$$ L0Ipartaddressstart = 1 + L0Icacheaddrwidth
bitfield L0cacheI{ uint30 instruction, uint1 compressed }

unit il0cache(
    input   uint$addr_width$  address,
    input   uint30  newinstruction,
    input   uint1   newcompressed,
    input   uint1   update,
    input   uint1   invalidate,
    output  uint30  instruction,
    output  uint1   compressed,
    output  uint1   tagmatch
) <reginputs> {
    uint$L0Icacheaddrwidth$ L0addr <:: address[1,$L0Icacheaddrwidth$];

    // L0 INSTRUCTION CACHE { tag, instruction, compressed, valid } split into units
    simple_dualport_bram uint31 L0cache[$L0Isize$] = uninitialized;
    simple_dualport_bram uint$L0Ipartaddresswidth$ L0tags[$L0Isize$] = uninitialized;
    uint$L0Isize$ L0valid = 0;
    L0cache.addr0 := L0addr; L0cache.wenable1 := 1; L0tags.addr0 := L0addr; L0tags.wenable1 := 1;

    always_after {
        tagmatch = ~invalidate & L0valid[ L0addr, 1 ] & ( L0tags.rdata0 == address[$L0Ipartaddressstart$,$L0Ipartaddresswidth$] );
        instruction = L0cacheI( L0cache.rdata0 ).instruction; compressed = L0cacheI( L0cache.rdata0 ).compressed;

        if( update ) {
            L0cache.addr1 = L0addr; L0cache.wdata1 = { newinstruction, newcompressed };
            L0tags.addr1 = L0addr; L0tags.wdata1 = address[$L0Ipartaddressstart$,$L0Ipartaddresswidth$];
            L0valid[ L0addr, 1 ] = 1;
        } else {
            if( invalidate ) { L0valid = 0; }
        }
    }
}

unit cpuexecuteSLOWPATH(
    input   uint1   start,
    output  uint1   busy(0),
    input   uint1   SMT,
    input   uint32  instruction,
    input   uint5   opCode,
    input   uint3   function3,
    input   uint7   function7,
    input   uint5   rs1,
    input   uint5   rs2,
    input   int32   sourceReg1,
    input   int32   sourceReg2,
    input   int32   abssourceReg1,
    input   int32   abssourceReg2,
    input   uint32  sourceReg1F,
    input   uint32  sourceReg2F,
    input   uint32  sourceReg3F,
    input   int32   memoryinput,
    output  uint1   frd,
    output  int32   memoryoutput,
    output  int32   result,
    input   uint1   incCSRinstret,
    input   uint1   isCSR,
    input   uint1   isATOMIC,
    input   uint1   isFPU,
    input   uint1   isALUM,
    input   uint1   isALUCLM
) <reginputs> {
    // M EXTENSION - DIVISION
    aluMD ALUMD( function3 <: function3[0,2], sourceReg1 <: sourceReg1, sourceReg2 <: sourceReg2, abssourceReg1 <: abssourceReg1, abssourceReg2 <: abssourceReg2 );

    // ATOMIC MEMORY OPERATIONS
    aluA ALUA( function7 <: function7, memoryinput <: memoryinput, sourceReg2 <: sourceReg2 );

    // B EXTENSION - CLMUL
    aluCLMUL ALUBCLMUL( function3 <: function3[0,2], sourceReg1 <: sourceReg1, sourceReg2 <: sourceReg2 );

    // FLOATING POINT INSTRUCTION CLASSIFICATION
    Fclass FCLASS( opCode <: opCode, function7 <: function7 );

    // FLOATING POINT REGISTERS CLASSIFICATION
    classifyF class1F( a <: sourceReg1F ); classifyF class2F( a <: sourceReg2F ); classifyF class3F( a <: sourceReg3F );

    // FLOATING POINT SLOW OPERATIONS - CALCULATIONS AND CONVERSIONS
    floatconvert FPUCONVERT(
        FPUflags <: CSR.FPUflags,
        function7 <: function7[2,5], rs2 <: rs2[0,1],
        sourceReg1 <: sourceReg1, abssourceReg1 <: abssourceReg1, sourceReg1F <: sourceReg1F,
        classA <: class1F.class
    );

    floatcalc FPUCALC(
        FPUflags <: CSR.FPUflags,
        opCode <: opCode, function7 <: function7[2,5],
        sourceReg1F <: sourceReg1F, sourceReg2F <: sourceReg2F, sourceReg3F <: sourceReg3F,
        classA <: class1F.class, classB <: class2F.class, classC <: class3F.class
    );

    // FLOATING POINT FAST OPERATIONS
    fpufast FPUFAST(
        FPUflags <: CSR.FPUflags,
        function3 <: function3[0,2], function7 <: function7[2,5],
        sourceReg1 <: sourceReg1, sourceReg1F <: sourceReg1F, sourceReg2F <: sourceReg2F,
         classA <: class1F.class, classB <: class2F.class
    );

    // MANDATORY RISC-V CSR REGISTERS + HARTID == 0 MAIN THREAD == 1 SMT THREAD
    uint5   FPUnewflags <:: FCLASS.FASTPATHFPU ? FPUFAST.FPUnewflags : fpuconvert ? FPUCONVERT.FPUnewflags : FPUCALC.FPUnewflags;
    CSRblock CSR(
        SMT <: SMT,
        instruction <: instruction,
        function3 <: function3,
        rs1 <: rs1,
        sourceReg1 <: sourceReg1,
        FPUnewflags <: FPUnewflags,
        incCSRinstret <: incCSRinstret
    );

    // Classify the instruction
    uint1   fpuconvert <:: ( opCode == 5b10100 ) & ( function7[4,3] == 3b110 );
    uint1   fpufast <:: ( isFPU & FCLASS.FASTPATHFPU ) | fpuconvert;
    uint1   fpucalc <:: isFPU & ~fpufast;
    uint4   operation <:: { ~|{fpufast,isATOMIC,isCSR}, fpufast, isATOMIC, isCSR };

    // START AND BUSY FLAGS
    uint1   unitbusy <:: ( FPUCALC.busy | ALUMD.busy | ALUBCLMUL.busy );
    ALUMD.start := start & isALUM;                                                                          // INTEGER DIVISION
    ALUBCLMUL.start := start & isALUCLM;                                                                    // CARRYLESS MULTIPLY
    FPUCALC.start := start & fpucalc;                                                                       // FPU CALCULATIONS
    CSR.start := start & isCSR & |function3;                                                                // CSR

    // Deal with updating fpuflags and writing to fpu registers
    CSR.updateFPUflags := 0; frd := fpuconvert ? FPUCONVERT.frd : fpufast ? FPUFAST.frd : fpucalc ? 1 : 0;

    algorithm <autorun> {
        // PROVIDE WAIT STATE FOR APPROPRIATE OPERATION
        while(1) {
            if( start ) {
                busy = 1;
                onehot( operation ) {
                    case 0: { ++:  }                                                                                    // CSR
                    case 1: {}                                                                                          // ATOMIC OPERATIONS
                    case 2: {}                                                                                          // FPU FAST COMPARE, MIN/MAX, CLASS, MOVE, CONVERT
                    case 3: { while( unitbusy ) {} }                                                                    // FPU CALCULATIONS AND INTEGER DIVISION
                }
                busy = 0;
                CSR.updateFPUflags = fpuconvert | fpucalc;
            }
        }
    }

    // COLLECT THE APPROPRIATE RESULT
    always_after {
        if( busy ) {
            onehot( operation ) {
                case 0: { result = |function3 ? CSR.result : 0; }                                                   // CSR
                case 1: {
                    if( function7[3,1] ) {
                        result = memoryinput; memoryoutput = ALUA.result;                                           // ATOMIC LOAD - MODIFY - STORE
                    } else {
                        result = function7[2,1] ? 0 : memoryinput;                                                  // LR.W SC.W
                        memoryoutput = sourceReg2;
                    }
                }
                case 2: { result = fpuconvert ? FPUCONVERT.result : FPUFAST.result; }                               // FPU FAST COMPARE, MIN/MAX, CLASS, MOVE, CONVERT
                case 3: { result = fpucalc ? FPUCALC.result : function3[2,1] ? ALUMD.result : ALUBCLMUL.result; }   // FPU CALCULATIONS AND INTEGER DIVISION
            }
        }
    }
}

unit cpuexecuteFASTPATH(
    input   uint5   opCode,
    input   uint3   function3,
    input   uint7   function7,
    input   uint5   rs1,
    input   uint5   rs2,
    input   int32   sourceReg1,
    input   int32   sourceReg2,
    input   int32   negSourceReg2,
    input   uint32  sourceReg2F,
    input   int32   immediateValue,
    input   int32   memoryinput,
    input   uint32  AUIPCLUI,
    input   uint32  nextPC,
    input   uint1   isALUMM,
    input   uint1   isLOAD,
    input   uint1   isBRANCH,
    input   uint1   isAUIPCLUI,
    input   uint1   isJAL,
    output  uint1   takeBranch,
    output  int32   memoryoutput,
    output  int32   result
) <reginputs> {
    // COMPARISON UNIT
    compare COMPARE( sourceReg1 <: sourceReg1, sourceReg2 <: sourceReg2, immediateValue <: immediateValue, regimm <: opCode[3,1] );

    // BRANCH COMPARISON UNIT
    branchcomparison BRANCHUNIT( function3 <: function3, sourceReg1 <: sourceReg1, sourceReg2 <: sourceReg2, LT <: COMPARE.LT, LTU <: COMPARE.LTU, EQ <: COMPARE.EQ );

    // ALU
    alu ALU(
        opCode <: opCode, function3 <: function3, function7 <: function7,
        rs1 <: rs1, rs2 <: rs2,
        sourceReg1 <: sourceReg1, sourceReg2 <: sourceReg2, negSourceReg2 <: negSourceReg2,
        immediateValue <: immediateValue,
        LT <: COMPARE.LT, LTU <: COMPARE.LTU
    );

    // M EXTENSION - MULTIPLICATION
    aluMM ALUMM( function3 <: function3[0,2], sourceReg1 <: sourceReg1, sourceReg2 <: sourceReg2 );

    always_after {
        takeBranch = isBRANCH & BRANCHUNIT.takeBranch;                  // BRANCH
        memoryoutput = opCode[0,1] ? sourceReg2F : sourceReg2;          // FLOAT STORE OR STORE
        result = isAUIPCLUI ? AUIPCLUI :                                // LUI AUIPC
                            isJAL ? nextPC :                            // JAL[R]
                            isLOAD ? memoryinput :                      // [FLOAT]LOAD
                            isALUMM ? ALUMM.result : ALU.result;        // INTEGER ALU AND MULTIPLICATION
    }
}

// MINI DMA CONTROLLER ADDRESS GENERATOR
unit dma(
    input   uint27  DMASOURCE,
    input   uint27  DMADEST,
    input   uint27  DMACOUNT,
    input   uint3   DMAMODE,

    output  uint27  dmasrc,
    output  uint27  dmadest,
    output  uint27  dmacount,

    input   uint1   start,
    input   uint1   update
) <reginputs> {
    uint3   dmamode = uninitialized;
    uint27  dmasrc1 <:: dmasrc + 1;
    uint27  dmasrc2 <:: dmasrc + 2;
    uint27  dmadest1 <:: dmadest + 1;
    uint27  dmadest2 <:: dmadest + 2;
    uint1   dmablue <:: ( dmadest[0,4] == 4h6 );

    always_after {
        if( start ) { dmamode = DMAMODE; dmasrc = DMASOURCE; dmadest = DMADEST; dmacount = DMACOUNT; } else {
            if( update ) {
                switch( dmamode ) {
                    default: {}                                                                                                     // INACTIVE / UNDEFINED
                    case 1: { dmasrc = dmasrc1; }                                                                                   // DMA multi-src to single-dest PIXEL BLOCK 7/8 bit + SDCARD WRITE
                    case 2: { dmasrc = dmasrc1; if( dmablue ) { dmadest = 27hd672; } else { dmadest = dmadest2; } }                 // DMA SPECIAL PIXEL BLOCK RGB
                    case 3: { dmasrc = dmasrc1; dmadest = dmadest1; }                                                               // DMA multi-src to multi-dest MEMCPY
                    case 4: { dmadest = dmadest1; }                                                                                 // DMA single-src to multi-dest MEMSET + SDCARD WRITE
                    case 5: {}                                                                                                      // DMA single-src to single-dest SET TILE/CBLITTER to single value
                    case 7: { dmasrc = dmasrc2; }                                                                                   // DMA 16bit to 2 pixels for PIXEL BLOCK special mode
                }
                dmacount = dmacount - 1;
            }
        }
    }
}

// RISC-V CPU REGISTERS
unit riscvregisters(
    input   uint1   SMT,
    input   uint5   rs1,
    input   uint5   rs2,
    input   uint5   rs3,
    input   uint5   rd,
    input   uint1   frd,
    input   uint1   write,
    input   int32   result,
    output  int32   sourceReg1,
    output  int32   sourceReg2,
    output  int32   sourceReg1F,
    output  int32   sourceReg2F,
    output  int32   sourceReg3F
) <reginputs> {
    // RISC-V REGISTERS
    uint1   Iwrite <:: write & ~frd & |rd;          uint1   Fwrite <:: write & frd;

    registers RS1( SMT <: SMT, rs <: rs1, rd <: rd, write <: Iwrite, result <: result, contents :> sourceReg1 );
    registers RS2( SMT <: SMT, rs <: rs2, rd <: rd, write <: Iwrite, result <: result, contents :> sourceReg2 );
    registers RS1F( SMT <: SMT, rs <: rs1, rd <: rd, write <: Fwrite, result <: result, contents :> sourceReg1F );
    registers RS2F( SMT <: SMT, rs <: rs2, rd <: rd, write <: Fwrite, result <: result, contents :> sourceReg2F );
    registers RS3F( SMT <: SMT, rs <: rs3, rd <: rd, write <: Fwrite, result <: result, contents :> sourceReg3F );
}
