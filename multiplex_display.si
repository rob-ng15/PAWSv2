unit multiplex_display(
    output! uint8   pix_red,
    output! uint8   pix_green,
    output! uint8   pix_blue,

    // DISPLAY ORDER, COLOUR/BW MODE AND DIMMER LEVEL
    input   uint2   display_order,
    input   uint2   colour,
    input   uint4   dimmer,

    // BACKGROUND
    input uint8 background_p,

    // TILEMAPS
    input uint8 lower_tilemap_p,
    input uint1 lower_tilemap_display,
    input uint8 upper_tilemap_p,
    input uint1 upper_tilemap_display,

    // SPRITES
    input uint8 lower_sprites_p,
    input uint1 lower_sprites_display,
    input uint8 upper_sprites_p,
    input uint1 upper_sprites_display,

    // BITMAP
    input uint8 bitmap_p,
    input uint1 bitmap_display,

    // CHARACTER MAP
    input uint8 character_map_p,
    input uint1 character_map_display,

    // TERMINAL
    input uint1 terminal_p,
    input uint1 terminal_display
) <reginputs> {
    selectlayer LAYER(
        display_order <: display_order,
        terminal_display <: terminal_display,
        terminal <: terminal_p,
        character_map_display <: character_map_display,
        character_map <: character_map_p,
        upper_sprites_display <: upper_sprites_display,
        upper_sprites <: upper_sprites_p,
        bitmap_display <: bitmap_display,
        bitmap <: bitmap_p,
        lower_sprites_display <: lower_sprites_display,
        lower_sprites <: lower_sprites_p,
        lower_tilemap_display <: lower_tilemap_display,
        lower_tilemap <: lower_tilemap_p,
        upper_tilemap_display <: upper_tilemap_display,
        upper_tilemap <: upper_tilemap_p,
        background <: background_p
    );

    uint8   BIT3to8[] = { 0, 36, 73, 109, 146, 182, 219, 255 };                                         // xxx -> 255
    uint8   red = uninitialised;                    uint8   green = uninitialised;                      uint8   blue = uninitialised;

    always_after {
        switch( colour ) {
            case 2b00: {                                                                                // RGBM
                red = BIT3to8[ { LAYER.pixel[6,2], LAYER.pixel[0,1]} ];
                green = BIT3to8[ LAYER.pixel[3,3] ];
                blue = BIT3to8[ { LAYER.pixel[1,2], LAYER.pixel[0,1]} ];
            }
            case 2b01: {                                                                                // RRRGGGBB
                red = BIT3to8[ LAYER.pixel[5,3] ];
                green = BIT3to8[ LAYER.pixel[2,3] ];
                blue = {4{ LAYER.pixel[0,2] }};
            }
            case 2b10: {                                                                                // PAWSv1 @ 4 brightness levels
                red = { LAYER.pixel[6,2], {3{ LAYER.pixel[4,2] }} };
                green = { LAYER.pixel[6,2], {3{ LAYER.pixel[2,2] }} };
                blue = { LAYER.pixel[6,2], {3{ LAYER.pixel[0,2] }} };
            }
            case 2b11: { red = LAYER.pixel; green = LAYER.pixel; blue = LAYER.pixel; }                  // GREYSCALE
        }
        pix_red = red >> dimmer; pix_green = green >> dimmer; pix_blue = blue >> dimmer;
    }
}

// CHOOSE LAY TO DISPLAY
unit selectlayer(
    input   uint2   display_order,
    input   uint1   terminal_display,
    input   uint1   terminal,
    input   uint1   character_map_display,
    input   uint8   character_map,
    input   uint1   upper_sprites_display,
    input   uint8   upper_sprites,
    input   uint1   bitmap_display,
    input   uint8   bitmap,
    input   uint1   lower_sprites_display,
    input   uint8   lower_sprites,
    input   uint1   lower_tilemap_display,
    input   uint8   lower_tilemap,
    input   uint1   upper_tilemap_display,
    input   uint8   upper_tilemap,
    input   uint8   background,
    output! uint8   pixel
) <reginputs> {
    // CONVERT TERMINAL COLOUR TO BLUE OR WHITE
    uint8   terminalcolour <:: { {5{terminal}}, 2b11 };

    always_after {
        switch( display_order ) {
            case 0: { // BACKGROUND -> LOWER TILEMAP -> UPPER TILEMAP -> LOWER_SPRITES -> BITMAP -> UPPER_SPRITES -> CHARACTER_MAP -> TERMINAL
                pixel = ( terminal_display ) ? terminalcolour :
                            ( character_map_display ) ? character_map :
                            ( upper_sprites_display ) ? upper_sprites :
                            ( bitmap_display ) ? bitmap :
                            ( lower_sprites_display ) ? lower_sprites :
                            ( upper_tilemap_display ) ? upper_tilemap :
                            ( lower_tilemap_display ) ? lower_tilemap :
                            background;
            }
            case 1: { // BACKGROUND -> LOWER TILEMAP -> UPPER TILEMAP -> BITMAP -> LOWER_SPRITES -> UPPER_SPRITES -> CHARACTER_MAP -> TERMINAL
                pixel = ( terminal_display ) ? terminalcolour :
                        ( character_map_display ) ? character_map :
                        ( upper_sprites_display ) ? upper_sprites :
                        ( lower_sprites_display ) ? lower_sprites :
                        ( bitmap_display ) ? bitmap :
                        ( upper_tilemap_display ) ? upper_tilemap :
                        ( lower_tilemap_display ) ? lower_tilemap :
                        background;
            }
            case 2: { // BACKGROUND -> BITMAP -> LOWER TILEMAP -> UPPER TILEMAP -> LOWER_SPRITES -> UPPER_SPRITES -> CHARACTER_MAP -> TERMINAL
                pixel = ( terminal_display ) ? terminalcolour :
                        ( character_map_display ) ? character_map :
                        ( upper_sprites_display ) ? upper_sprites :
                        ( lower_sprites_display ) ? lower_sprites :
                        ( upper_tilemap_display ) ? upper_tilemap :
                        ( lower_tilemap_display ) ? lower_tilemap :
                        ( bitmap_display ) ? bitmap :
                        background;
            }
            case 3: { // BACKGROUND -> LOWER TILEMAP -> UPPER TILEMAP -> LOWER_SPRITES -> UPPER_SPRITES -> BITMAP -> CHARACTER_MAP -> TERMINAL
                pixel = ( terminal_display ) ? terminalcolour :
                        ( character_map_display ) ? character_map :
                        ( bitmap_display ) ? bitmap :
                        ( upper_sprites_display ) ? upper_sprites :
                        ( lower_sprites_display ) ? lower_sprites :
                        ( upper_tilemap_display ) ? upper_tilemap :
                        ( lower_tilemap_display ) ? lower_tilemap :
                        background;
            }
        }
    }
}
