unit multiplex_display(
    input   uint1   video_clock,
    input   uint1   video_reset,
    simple_dualport_bram_port0 palette,
    input   uint1   usepalette,

    output! uint8   pix_red,
    output! uint8   pix_green,
    output! uint8   pix_blue,

    // DISPLAY ORDER, COLOUR/BW MODE AND DIMMER LEVEL
    input   uint2   display_order,
    input   uint1   colour,

    // BACKGROUND
    input uint8 background_p,

    // TILEMAPS
    input uint8 lower_tilemap_p,
    input uint1 lower_tilemap_display,
    input uint8 upper_tilemap_p,
    input uint1 upper_tilemap_display,

    // SPRITES
    input uint8 lower_sprites_p,
    input uint1 lower_sprites_display,
    input uint8 upper_sprites_p,
    input uint1 upper_sprites_display,

    // BITMAP
    input uint8 bitmap_p,
    input uint1 bitmap_display,

    // CHARACTER MAP
    input uint8 character_map_p,
    input uint1 character_map_display,

    // TERMINAL
    input uint1 terminal_p,
    input uint1 terminal_display
) <reginputs> {
    selectlayer mpd <@video_clock,!video_reset> (
        background <: background_p,
        lower_tilemap <: lower_tilemap_p,
        lower_tilemap_display <: lower_tilemap_display,
        upper_tilemap <: upper_tilemap_p,
        upper_tilemap_display <: upper_tilemap_display,
        lower_sprites <: lower_sprites_p,
        lower_sprites_display <: lower_sprites_display,
        upper_sprites <: upper_sprites_p,
        upper_sprites_display <: upper_sprites_display,
        bitmap <: bitmap_p,
        bitmap_display <: bitmap_display,
        character_map <: character_map_p,
        character_map_display <: character_map_display,
        terminal <: terminal_p,
        terminal_display <: terminal_display,
        display_order <: display_order
    );
    uint8   BIT3to8[] = { 0, 36, 73, 109, 146, 182, 219, 255 };                                         // xxx -> xxxxxxxx

    palette.addr0 := mpd.pixel;
    pix_red := BIT3to8[ { mpd.pixel[6,2], mpd.pixel[0,1]} ];                                            // DEFAULT RGBM -> R8 G8 B8 via lookup
    pix_green := BIT3to8[ mpd.pixel[3,3] ];
    pix_blue := BIT3to8[ { mpd.pixel[1,2], mpd.pixel[0,1]} ];

    always_after {
        switch( colour ) {
            case 0: {                                                                                   // RGBM or PALETTE
                if( usepalette ) {
                    pix_red = palette.rdata0[16,8]; pix_green = palette.rdata0[8,8]; pix_blue = palette.rdata0[0,8];
                }
            }
            case 1: { pix_red = mpd.pixel; pix_green = mpd.pixel; pix_blue = mpd.pixel; }                     // GREYSCALE
        }
    }
}

// CHOOSE LAY TO DISPLAY
unit selectlayer(
    input   uint1   display_order,
    input   uint1   terminal_display,
    input   uint1   terminal,
    input   uint1   character_map_display,
    input   uint8   character_map,
    input   uint1   upper_sprites_display,
    input   uint8   upper_sprites,
    input   uint1   bitmap_display,
    input   uint8   bitmap,
    input   uint1   lower_sprites_display,
    input   uint8   lower_sprites,
    input   uint1   lower_tilemap_display,
    input   uint8   lower_tilemap,
    input   uint1   upper_tilemap_display,
    input   uint8   upper_tilemap,
    input   uint8   background,
    output! uint8   pixel
) <reginputs> {
    // CONVERT TERMINAL COLOUR TO BLUE OR WHITE
    uint8   terminalcolour <:: terminal ? 8hff : 8h06;

    always_after {
        switch( display_order ) {
            case 0: { // BACKGROUND -> LOWER TILEMAP -> UPPER TILEMAP -> LOWER_SPRITES -> BITMAPS -> UPPER_SPRITES -> CHARACTER_MAP -> TERMINAL
                pixel = ( terminal_display ) ? terminalcolour :
                            ( character_map_display ) ? character_map :
                            ( upper_sprites_display ) ? upper_sprites :
                            ( bitmap_display ) ? bitmap :
                            ( lower_sprites_display ) ? lower_sprites :
                            ( upper_tilemap_display ) ? upper_tilemap :
                            ( lower_tilemap_display ) ? lower_tilemap :
                            background;
            }
            case 1: { // BACKGROUND -> BITMAPS -> LOWER TILEMAP -> UPPER TILEMAP -> LOWER_SPRITES -> UPPER_SPRITES -> CHARACTER_MAP -> TERMINAL
                pixel = ( terminal_display ) ? terminalcolour :
                        ( character_map_display ) ? character_map :
                        ( upper_sprites_display ) ? upper_sprites :
                        ( lower_sprites_display ) ? lower_sprites :
                        ( upper_tilemap_display ) ? upper_tilemap :
                        ( lower_tilemap_display ) ? lower_tilemap :
                        ( bitmap_display ) ? bitmap :
                        background;
            }
        }
    }
}
