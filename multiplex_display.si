unit palette_lookup(
    simple_dualport_bram_port0 palette,
    input   uint8   index,
    output! uint24  rgb
) {
    palette.addr0 := index; rgb := palette.rdata0;
}

unit multiplex_display(
    input   uint1   palette_clock,
    simple_dualport_bram_port0 palette,
    input   uint1   usepalette,

    output! uint8   pix_red,
    output! uint8   pix_green,
    output! uint8   pix_blue,

    // DISPLAY ORDER, COLOUR/BW MODE AND DIMMER LEVEL
    input   uint2   display_order,
    input   uint1   colour,

    // BACKGROUND
    input uint8 background_p,

    // TILEMAPS
    input uint8 lower_tilemap_p,
    input uint1 lower_tilemap_display,
    input uint8 upper_tilemap_p,
    input uint1 upper_tilemap_display,

    // SPRITES
    input uint8 lower_sprites_p,
    input uint1 lower_sprites_display,
    input uint8 upper_sprites_p,
    input uint1 upper_sprites_display,

    // BITMAP
    input uint8 bitmap_p,
    input uint1 bitmap_display,

    // CHARACTER MAP
    input uint8 character_map_p,
    input uint1 character_map_display,

    // TERMINAL
    input uint1 terminal_p,
    input uint1 terminal_display
) <reginputs> {
    palette_lookup pl <@palette_clock> (
        palette <:> palette,
        index <: pixel
    );
    uint8   BIT3to8[] = { 0, 36, 73, 109, 146, 182, 219, 255 };                                         // xxx -> xxxxxxxx
    uint8   pixel = uninitialised;

    always_after {
        {
            // CONVERT TERMINAL COLOUR TO BLUE OR WHITE
            uint8   terminalcolour <:: terminal_p ? 8hff : 8h06;
            switch( display_order ) {
                case 0: { // BACKGROUND -> LOWER TILEMAP -> UPPER TILEMAP -> LOWER_SPRITES -> BITMAPS -> UPPER_SPRITES -> CHARACTER_MAP -> TERMINAL
                    pixel = ( terminal_display ) ? terminalcolour :
                                ( character_map_display ) ? character_map_p :
                                ( upper_sprites_display ) ? upper_sprites_p :
                                ( bitmap_display ) ? bitmap_p :
                                ( lower_sprites_display ) ? lower_sprites_p :
                                ( upper_tilemap_display ) ? upper_tilemap_p :
                                ( lower_tilemap_display ) ? lower_tilemap_p :
                                background_p;
                }
                case 1: { // BACKGROUND -> BITMAPS -> LOWER TILEMAP -> UPPER TILEMAP -> LOWER_SPRITES -> UPPER_SPRITES -> CHARACTER_MAP -> TERMINAL
                    pixel = ( terminal_display ) ? terminalcolour :
                            ( character_map_display ) ? character_map_p :
                            ( upper_sprites_display ) ? upper_sprites_p :
                            ( lower_sprites_display ) ? lower_sprites_p :
                            ( upper_tilemap_display ) ? upper_tilemap_p :
                            ( lower_tilemap_display ) ? lower_tilemap_p :
                            ( bitmap_display ) ? bitmap_p :
                            background_p;
                }
            }
        }

        {
            switch( colour ) {
                case 0: {                                                                                   // RGBM or PALETTE
                    if( usepalette ) {
                        pix_red = pl.rgb[16,8]; pix_green = pl.rgb[8,8]; pix_blue = pl.rgb[0,8];
                    } else {
                        pix_red = BIT3to8[ { pixel[6,2], pixel[0,1]} ];                             // DEFAULT RGBM -> R8 G8 B8 via lookup
                        pix_green = BIT3to8[ pixel[3,3] ];
                        pix_blue = BIT3to8[ { pixel[1,2], pixel[0,1]} ];
                    }
                }
                case 1: { pix_red = pixel; pix_green = pixel; pix_blue = pixel; }               // GREYSCALE
            }
        }
    }
}
