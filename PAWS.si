$$if ICARUS or VERILATOR then
// PLL for simulation
unit pll(
  output  uint1 video_clock,
  output! uint1 sdram_clock,
  output! uint1 clock_decode,
  output  uint1 compute_clock
) {
  uint3 counter = 0;
  uint8 trigger = 8b11111111;
  sdram_clock   := clock;
  clock_decode   := clock;
  compute_clock := ~counter[0,1]; // x2 slower
  video_clock   := counter[1,1]; // x4 slower
  always {
        counter = counter + 1;
        trigger = trigger >> 1;
  }
}
$$end

unit main(
    // LEDS (8 of)
    output  uint8   leds,
$$if not SIMULATION then
    input   uint$NUM_BTNS$ btns,

    // UART
    output  uint1   uart_tx,
    input   uint1   uart_rx,

    // GPIO
    input   uint28  gn,
    output  uint28  gp,

    // USB PS/2
    input   uint1   us2_bd_dp,
    input   uint1   us2_bd_dn,

    // AUDIO
    output  uint4   audio_l,
    output  uint4   audio_r,

    // SDCARD
    output  uint1   sd_clk,
    output  uint1   sd_mosi,
    output  uint1   sd_csn,
    input   uint1   sd_miso,
$$end

$$if HDMI then
    // HDMI OUTPUT
    output! uint4   gpdi_dp,
$$end
$$if VGA then
    // VGA OUTPUT
    output! uint$color_depth$ video_r,
    output! uint$color_depth$ video_g,
    output! uint$color_depth$ video_b,
    output  uint1 video_hs,
    output  uint1 video_vs,
$$end
$$if VERILATOR then
    output  uint1 video_clock,
$$end
    // SDRAM
    output! uint1  sdram_cle,
    output! uint2  sdram_dqm,
    output! uint1  sdram_cs,
    output! uint1  sdram_we,
    output! uint1  sdram_cas,
    output! uint1  sdram_ras,
    output! uint2  sdram_ba,
    output! uint13 sdram_a,
$$if VERILATOR then
    output! uint1  sdram_clock, // sdram controller clock
    input   uint16 sdram_dq_i,
    output! uint16 sdram_dq_o,
    output! uint1  sdram_dq_en,
$$else
    output uint1  sdram_clk,  // sdram chip clock != internal sdram_clock
    inout  uint16 sdram_dq,
$$end
) <@clock_system,reginputs> {
    uint1   clock_system = uninitialized;
    uint1   clock_io = uninitialized;
    uint1   clock_cpu = uninitialized;
    uint1   clock_decode = uninitialized;
    uint1   clock_cache = uninitialized;
    uint1   clock_bram = uninitialized;
$$if VERILATOR then
    $$clock_25mhz = 'video_clock'
    // --- PLL
    pll clockgen<@clock,!reset>(
      video_clock   :> video_clock,
      sdram_clock   :> sdram_clock,
      clock_decode   :> clock_decode,
      compute_clock :> clock_system,
      compute_clock :> clock_cpu,
      compute_clock :> clock_io,
      sdram_clock :> clock_cache,
      clock_decode :> clock_bram,
    );
$$else
    $$clock_25mhz = 'clock'
    // CLOCK/RESET GENERATION
    // CPU + MEMORY
    uint1   sdram_clock = uninitialized;
    uint1   pll_lock_SYSTEM = uninitialized;
    ulx3s_clk_PAWS_SYSTEM clk_gen_SYSTEM (
        clkin    <: $clock_25mhz$,
        clkSYSTEM  :> clock_system,
        clkIO :> clock_io,
        clkSDRAM :> sdram_clock,
        clkSDRAMcontrol :> sdram_clk,
        locked   :> pll_lock_SYSTEM
    );
    uint1   pll_lock_CPU = uninitialized;
    ulx3s_clk_PAWS_CPU clk_gen_CPU (
        clkin    <: $clock_25mhz$,
        clkCPU :> clock_cpu,
        clkDECODE :> clock_decode,
        clkBRAM :> clock_bram,
        clkCACHE :> clock_cache,
        locked   :> pll_lock_CPU
    );
$$end

    // SDRAM Reset
    uint1   sdram_reset = uninitialized; clean_reset sdram_rstcond <@sdram_clock,!reset> ( out :> sdram_reset );

    // SDRAM chip controller by @sylefeb
    sdram_r16w16_io sio_fullrate; sdram_r16w16_io sio_halfrate;
$$if VERILATOR then
    sdram_half_speed_access sdaccess <@sdram_clock,!sdram_reset> ( sd <:> sio_fullrate, sdh <:> sio_halfrate );
$$else
$$if sdram_150_mhz then
    sdram_third_speed_access sdaccess <@sdram_clock,!sdram_reset> ( sd <:> sio_fullrate, sdh <:> sio_halfrate );
$$else
    sdram_half_speed_access sdaccess <@sdram_clock,!sdram_reset> ( sd <:> sio_fullrate, sdh <:> sio_halfrate );
$$end
$$end
    sdram_controller_autoprecharge_r16_w16 sdram32MB <@sdram_clock,!sdram_reset> (
        sd        <:> sio_fullrate,
        sdram_cle :>  sdram_cle,
        sdram_dqm :>  sdram_dqm,
        sdram_cs  :>  sdram_cs,
        sdram_we  :>  sdram_we,
        sdram_cas :>  sdram_cas,
        sdram_ras :>  sdram_ras,
        sdram_ba  :>  sdram_ba,
        sdram_a   :>  sdram_a,
  $$if VERILATOR then
        dq_i       <: sdram_dq_i,
        dq_o       :> sdram_dq_o,
        dq_en      :> sdram_dq_en,
  $$else
        sdram_dq  <:> sdram_dq,
  $$end
    );

    // SDRAM ( via CACHE )
    // byteaccess controls byte read/writes
    uint1   byteaccess <:: ( ~|CPU.accesssize[0,2] );
    cachecontroller DRAM <@clock_system,!reset> (
        sio <:> sio_halfrate,
        clock_cache <: clock_cache,
        byteaccess <: byteaccess,
        cacheselect <: CPU.cacheselect,
        address <: CPU.address[0,26],
        writedata <: CPU.writedata
    );

   //  BRAM (for BIOS AND FAST BRAM ) SELECT BIOS FOR FPGA OR SIMULATION
    $$config['simple_dualport_bram_wmask_byte_wenable1_width'] = 'data'
    $$if not SIMULATION then
        // RISC-V FAST BRAM and BIOS
        simple_dualport_bram uint16 ram <"simple_dualport_bram_wmask_byte",@clock_system,@clock_system> [16384] = {file("ROM/BIOS.bin"), pad(uninitialized)};
    $$else
        // RISC-V FAST BRAM and BIOS FOR VERILATOR - TEST FOR SMT AND FPU
        simple_dualport_bram uint16 ram<"simple_dualport_bram_wmask_byte",@clock_system,@clock_system> [16384] = {file("ROM/VBIOS.bin"), pad(uninitialized)};
    $$end
    bramcontroller_read RAM_R <@clock_system,!reset> (
        ram <:> ram,
        address <: CPU.address[0,15]
    );
    bramcontroller_write RAM_W <@clock_system,!reset> (
        ram <:> ram,
        byteaccess <: byteaccess,
        address <: CPU.address[0,15],
        writedata <: CPU.writedata
    );

    // MEMORY MAPPED I/O + SMT CONTROLS
    io_memmap IO_Map <@clock_io,!reset> (
        leds :> leds,
$$if not SIMULATION then
        gn <: gn,
        gp :> gp,
        btns <: btns,
        uart_tx :> uart_tx,
        uart_rx <: uart_rx,
        us2_bd_dp <: us2_bd_dp,
        us2_bd_dn <: us2_bd_dn,
        sd_clk :> sd_clk,
        sd_mosi :> sd_mosi,
        sd_csn :> sd_csn,
        sd_miso <: sd_miso,
$$end
        clock_25mhz <: $clock_25mhz$,

        memoryAddress <: CPU.address[0,12],
        writeData <: CPU.writedata,
        DMAACTIVE <: CPU.DMAACTIVE
    );

$$if SIMULATION then
    uint4 audio_l(0);
    uint4 audio_r(0);
$$end
    timers_memmap TIMERS_Map <@clock_io,!reset> (
        clock_25mhz <: $clock_25mhz$,
        memoryAddress <: CPU.address[0,5],
        writeData <: CPU.writedata
    );

    audio_memmap AUDIO_Map <@clock_io,!reset> (
        clock_25mhz <: $clock_25mhz$,
        memoryAddress <: CPU.address[0,4],
        writeData <: CPU.writedata,
        audio_l :> audio_l,
        audio_r :> audio_r,
        static8bit <: TIMERS_Map.static16bit[0,8]
    );

    video_memmap VIDEO_Map <@clock_io,!reset> (
        memoryAddressDirect <: CPU.address,
        byteaccess <: byteaccess,
        video_clock <: $clock_25mhz$,
        memoryAddress <: CPU.address[0,12],
        writeData <: CPU.writedata,
$$if HDMI then
        gpdi_dp :> gpdi_dp,
$$end
$$if VGA then
        video_r  :> video_r,
        video_g  :> video_g,
        video_b  :> video_b,
        video_hs :> video_hs,
        video_vs :> video_vs,
$$end
        static6bit <: TIMERS_Map.static16bit[0,6],
        blink <: TIMERS_Map.cursor
    );

    PAWSCPU CPU <@clock_cpu> (
        clock_CPUdecoder <: clock_decode,
        clock_cache <: clock_cache,
        SMTRUNNING <: IO_Map.SMTRUNNING,
        SMTSTARTPC <: IO_Map.SMTSTARTPC[0,27],
        DMASOURCE <: IO_Map.DMASOURCE,
        DMASOURCEADD <: IO_Map.DMASOURCEADD,
        DMADEST <: IO_Map.DMADEST,
        DMADESTADD <: IO_Map.DMADESTADD,
        DMACOUNT <: IO_Map.DMACOUNT,
        DMACYCLES <: IO_Map.DMACYCLES,
        DMAMODE <: IO_Map.DMAMODE,
        readdata <: readdata
    );

    // IDENTIFY ADDRESS BLOCK
    uint1   SDRAM <:: CPU.address[26,1];                            uint1   VIDEODIRECT <:: ~SDRAM & CPU.address[25,1];
    uint1   BRAM <:: ~SDRAM & ~VIDEODIRECT & ~CPU.address[15,1];    uint1   IOmem <:: ~SDRAM & ~VIDEODIRECT & ~BRAM;
    uint1   TIMERS <:: IOmem & ( ~|CPU.address[12,2] );
    uint1   VIDEO <:: IOmem & ( CPU.address[12,2] == 2h1 );
    uint1   AUDIO <:: IOmem & ( CPU.address[12,2] == 2h2 );
    uint1   IO <:: IOmem & ( &CPU.address[12,2] );

    // READ FROM SDRAM / BRAM / IO REGISTERS
    uint16  readdata <:: SDRAM ? DRAM.readdata :
                VIDEODIRECT ? VIDEO_Map.readDataDirect :
                BRAM ? RAM_R.readdata :
                TIMERS ? TIMERS_Map.readData :
                VIDEO ? VIDEO_Map.readData :
                AUDIO ? AUDIO_Map.readData :
                IO? IO_Map.readData : 0;

    always_after {
        DRAM.readflag = SDRAM & CPU.readmemory;
        AUDIO_Map.memoryRead = AUDIO & CPU.readmemory;
        IO_Map.memoryRead = IO & CPU.readmemory;
        TIMERS_Map.memoryRead = TIMERS & CPU.readmemory;
        VIDEO_Map.memoryRead = VIDEO & CPU.readmemory;
        VIDEO_Map.memoryReadDirect = VIDEODIRECT & CPU.readmemory;

        DRAM.writeflag = SDRAM & CPU.writememory;
        RAM_W.writeflag = BRAM & CPU.writememory;
        AUDIO_Map.memoryWrite = AUDIO & CPU.writememory;
        IO_Map.memoryWrite = IO & CPU.writememory;
        TIMERS_Map.memoryWrite = TIMERS & CPU.writememory;
        VIDEO_Map.memoryWrite = VIDEO & CPU.writememory;
        VIDEO_Map.memoryWriteDirect = VIDEODIRECT & CPU.writememory;

        // SDRAM -> CPU BUSY STATE
//        CPU.memorybusy = DRAM.busy | ( ( CPU.readmemory | CPU.writememory ) & SDRAM ) | ( ( CPU.readmemory | CPU.writememory ) & VIDEODIRECT ) | VIDEO_Map.busyDirect;
        CPU.memorybusy = DRAM.busy | ( ( CPU.readmemory | CPU.writememory ) & SDRAM ) | ( CPU.readmemory & BRAM ) | ( ( CPU.readmemory | CPU.writememory ) & VIDEODIRECT ) | VIDEO_Map.busyDirect;
    }
}

// RAM - BRAM controller
// MEMORY IS 16 BIT, 8 bit WRITES ARE READ MODIFY WRITE
unit bramcontroller_read(
    simple_dualport_bram_port0 ram,
    input   uint15  address,
    input   uint1   byteaccess,

    input   uint1   writeflag,
    input   uint16  writedata,

    output  uint16  readdata
) <reginputs> {
    // FLAGS FOR BRAM ACCESS
    ram.addr0 := address[1,14]; readdata := ram.rdata0;
}
unit bramcontroller_write(
    simple_dualport_bram_port1 ram,
    input   uint15  address,
    input   uint1   byteaccess,

    input   uint1   writeflag,
    input   uint16  writedata
) <reginputs> {
    // FLAGS FOR BRAM ACCESS
    ram.wenable1 := 0; ram.addr1 := address[1,14];

    always_after {
        ram.wdata1 = byteaccess ? { {2{writedata[0,8]}} } : writedata;

        if( writeflag ) {
            ram.wenable1 = byteaccess ? address[0,1] ? 2b10 : 2b01 : 2b11;
        }
    }
}

// 32Mb of SDRAM using @sylefeb controller
// Controlled by a 16bit EVICTION CACHE FOR DATA AND INSTRUCTIONS
// Cache-coherency is maintained
// Controller is 16bit, the natural width of the SDRAM on the ULX3s
// An eviction cache was chosen as easy to implement as a directly mapped cache
// Writes to SDRAM only if required when evicting a cache entry

// ADDRESS WIDTH OF THE SDRAM ( 26 bits is 32Mb )
// CHIP SELECT is done by readflag/writeflag
$$ sdram_addr_width = 26

// CACHES SIZES - L1
$$ L1Dsize = 4096
$$ L1Dcacheaddrwidth = clog2(L1Dsize)
$$ L1Dpartaddresswidth = sdram_addr_width - 1 - L1Dcacheaddrwidth
$$ L1Dpartaddressstart = 1 + L1Dcacheaddrwidth
bitfield L1Dcachetag{ uint1 needswrite, uint1 valid, uint$L1Dpartaddresswidth$ partaddress }

$$ L1Isize = 4096
$$ L1Icacheaddrwidth = clog2(L1Isize)
$$ L1Ipartaddresswidth = sdram_addr_width - 1 - L1Icacheaddrwidth
$$ L1Ipartaddressstart = 1 + L1Icacheaddrwidth
bitfield Icachetag{ uint1 valid, uint$L1Ipartaddresswidth$ partaddress }

unit cachecontroller(
    sdram_user      sio,
    input   uint1   clock_cache,
    input   uint1   cacheselect,
    input   uint$sdram_addr_width$  address,
    input   uint1   byteaccess,
    input   uint1   writeflag,
    input   uint16  writedata,
    input   uint1   readflag,
    output  uint16  readdata,
    output  uint1   busy(0)
) <reginputs> {
    // DATA CACHE
    simple_dualport_bram uint16 Dcache <@clock_cache,@clock> [$L1Dsize$] = uninitialized;
    simple_dualport_bram uint$L1Dpartaddresswidth+2$ Dtags <@clock_cache,@clock> [$L1Dsize$] = uninitialized;
    dcache_read DCACHE <@clock_cache> ( cache <:> Dcache, tags <:> Dtags, address <: address );
    dcache_write DCACHEW( cache <:> Dcache, tags <:> Dtags, needwritetosdram <: dowrite, address <: address, writedata <: cachewritevalue );

    // INSTRUCTION CACHE
    simple_dualport_bram uint16 Icache <@clock_cache,@clock> [$L1Isize$] = uninitialized;
    simple_dualport_bram uint$L1Ipartaddresswidth+1$ Itags <@clock_cache,@clock> [$L1Isize$] = uninitialized;
    icache_read ICACHE <@clock_cache> ( cache <:> Icache, tags <:> Itags, address <: address );
    icache_write ICACHEW( cache <:> Icache, tags <:> Itags, address <: address, writedata <: cachewritevalue );

    // SDRAM CONTROLLER
    sdramcontroller SDRAM( sio <:> sio, writedata <: DCACHE.rdata );

    // CACHE TAG match flags
    uint1   Dcachematch <:: ( cacheselect & DCACHE.tagmatch );
    uint1   Icachematch <:: ( ~cacheselect & ICACHE.tagmatch );
    uint1   Icacheupdate <:: dowrite & ICACHE.tagmatch;

    // VALUE TO WRITE TO CACHE ( deals with correctly mapping 8 bit writes and 16 bit writes, using sdram or cache as base )
    uint16  writethrough <:: ( byteaccess ) ? ( address[0,1] ? { writedata[0,8], DCACHE.tagmatch ? DCACHE.rdata[0,8] : SDRAM.readdata[0,8] } :
                                                                { DCACHE.tagmatch ? DCACHE.rdata[8,8] : SDRAM.readdata[8,8], writedata[0,8] } ) : writedata;
    uint16  cachewritevalue <:: dowrite ? writethrough : SDRAM.readdata;

    // MEMORY ACCESS FLAGS
    uint1   doread = uninitialized;                 uint1   dowrite = uninitialized;
    uint1   doreadsdram <:: ( doread | ( dowrite & byteaccess ) );

    // SDRAM ACCESS
    SDRAM.readflag := 0; SDRAM.writeflag := 0;

    DCACHEW.update := 0; ICACHEW.update := 0;

    algorithm <autorun> {
        while(1) {
            doread = readflag; dowrite = writeflag;

            if( doread | dowrite ) {
                if( ( doread & Icachematch ) | Dcachematch ) {                                              // READ/WRITE IN CACHE
                    if( dowrite ) {
                        ++:
                        DCACHEW.update = 1;                                                                     // UPDATE CACHE IF WRITE
                        ICACHEW.update = Icacheupdate;                                                          // UPDATE ICACHE IF NEEDED
                    } else {
                        dowrite = 0;
                    }
                } else {
                    busy = 1;
                    if( DCACHE.needswrite ) {                                                                   // CHECK IF CACHE LINE IS OCCUPIED
                        if( SDRAM.busy ) { while( SDRAM.busy ) {} } else { SDRAM.writeflag = 0; }                   // WAIT FOR SDRAM
                        SDRAM.address = DCACHE.cacheaddress; SDRAM.writeflag = 1;                                   // EVICT FROM CACHE TO SDRAM
                    } else {
                        SDRAM.writeflag = 0;
                    }
                    if( doreadsdram ) {                                                                         // NEED TO READ SDRAM
                        if( SDRAM.busy ) { while( SDRAM.busy ) {} } else { SDRAM.readflag = 0; }                    // WAIT FOR SDRAM
                        SDRAM.address = address; SDRAM.readflag = 1; while( SDRAM.busy ) {}                         // READ FOR READ OR 8 BIT WRITE
                        DCACHEW.update = cacheselect;                                                               // UPDATE THE CACHE
                        ICACHEW.update = ~cacheselect;                                                              // UPDATE ICACHE IF NEEDED
                    } else {
                        DCACHEW.update = dowrite;                                                               // UPDATE CACHE FOR 16 BIT WRITE
                        ICACHEW.update = Icacheupdate;                                                          // UPDATE ICACHE IF NEEDED
                    }
                    busy = 0;
                }
            } else {
                busy = 0;
            }
        }
    }

    always_after {
        readdata = Icachematch ? ICACHE.rdata : Dcachematch ? DCACHE.rdata : SDRAM.readdata;                    // 16 bit READ
    }
}

// L1 DATA CACHE
unit dcache_read(
    simple_dualport_bram_port0 cache,
    simple_dualport_bram_port0 tags,
    input   uint$sdram_addr_width$  address,
    output! uint$sdram_addr_width$  cacheaddress,
    output! uint1   tagmatch,
    output! uint16  rdata,
    output! uint1   needswrite
) <reginputs> {
    // DATA CACHE for SDRAM - CACHE SIZE DETERMINED BY L1Dsize DEFINED ABOVE, MUST BE A POWER OF 2
    // DATA CACHE ADDRESS IS LOWER bits of the address, dropping the BYTE address bit
    // DATA CACHE TAG IS REMAINING bits of the address + 1 bit for valid flag + 1 bit for needwritetosdram flag
    always_before {
        cache.addr0 = address[1,$L1Dcacheaddrwidth$]; tags.addr0 = address[1,$L1Dcacheaddrwidth$]; rdata = cache.rdata0;
        tagmatch = ( { L1Dcachetag(tags.rdata0).valid, L1Dcachetag(tags.rdata0).partaddress } == { 1b1, address[$L1Dpartaddressstart$,$L1Dpartaddresswidth$] } );
        cacheaddress = { L1Dcachetag(tags.rdata0).partaddress, address[1,$L1Dcacheaddrwidth$], 1b0 };
        needswrite = L1Dcachetag(tags.rdata0).needswrite;
    }
}
unit dcache_write(
    simple_dualport_bram_port1 cache,
    simple_dualport_bram_port1 tags,
    input   uint$sdram_addr_width$  address,
    input   uint1   needwritetosdram,
    input   uint16  writedata,
    input   uint1   update,
) <reginputs> {
    // DATA CACHE for SDRAM - CACHE SIZE DETERMINED BY L1Dsize DEFINED ABOVE, MUST BE A POWER OF 2
    // DATA CACHE ADDRESS IS LOWER bits of the address, dropping the BYTE address bit
    // DATA CACHE TAG IS REMAINING bits of the address + 1 bit for valid flag + 1 bit for needwritetosdram flag
    always_after {
        cache.addr1 = address[1,$L1Dcacheaddrwidth$]; tags.addr1 = address[1,$L1Dcacheaddrwidth$];
        cache.wdata1 = writedata; tags.wdata1 = { needwritetosdram, 1b1, address[$L1Dpartaddressstart$,$L1Dpartaddresswidth$] };
        cache.wenable1 = update; tags.wenable1 = update;
    }
}

// L1 INSTRUCTION CACHE
unit icache_read(
    simple_dualport_bram_port0 cache,
    simple_dualport_bram_port0 tags,
    input   uint$sdram_addr_width$  address,
    output! uint1   tagmatch,
    output! uint16  rdata
) <reginputs> {
    // INSTRUCTION CACHE for SDRAM, DEFINED AS ABOVE EXCEPT NO NEED FOR needwritetosdram flag
    always_before {
        cache.addr0 = address[1,$L1Icacheaddrwidth$]; tags.addr0 = address[1,$L1Icacheaddrwidth$]; rdata = cache.rdata0;
        tagmatch = ( tags.rdata0 == { 1b1, address[$L1Ipartaddressstart$,$L1Ipartaddresswidth$] } );
    }
}
unit icache_write(
    simple_dualport_bram_port1 cache,
    simple_dualport_bram_port1 tags,
    input   uint$sdram_addr_width$  address,
    input   uint16  writedata,
    input   uint1   update
) <reginputs> {
    // INSTRUCTION CACHE for SDRAM, DEFINED AS ABOVE EXCEPT NO NEED FOR needwritetosdram flag
    always_after {
        cache.addr1 = address[1,$L1Icacheaddrwidth$]; tags.addr1 = address[1,$L1Icacheaddrwidth$];
        cache.wdata1 = writedata; tags.wdata1 = { 1b1, address[$L1Ipartaddressstart$,$L1Ipartaddresswidth$] };
        cache.wenable1 = update; tags.wenable1 = update;
    }
}

// START READ/WRITE FROM SDRAM, 16BIT
unit sdramcontroller(
    sdram_user      sio,
    input   uint$sdram_addr_width$  address,
    input   uint1   writeflag,
    input   uint16  writedata,
    input   uint1   readflag,
    output  uint16  readdata,
    output  uint1   busy(0)
) <reginputs> {
    always_after {
        sio.addr = { address[1,$sdram_addr_width-1$], 1b0 }; sio.data_in = writedata; readdata = sio.data_out; sio.rw = writeflag;
        sio.in_valid = ( readflag | writeflag );
        busy = ( sio.done ) ? 0 : ( readflag | writeflag ) ? 1 : busy;
    }
}
