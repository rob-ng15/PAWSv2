#pragma once
/*#
    # ui_audio.h

    Visualize the audio samples generated by emulators.

    Do this:
    ~~~C
    #define CHIPS_UI_IMPL
    ~~~
    before you include this file in *one* C++ file to create the 
    implementation.

    Optionally provide the following macros with your own implementation
    
    ~~~C
    CHIPS_ASSERT(c)
    ~~~
        your own assert macro (default: assert(c))

    Include the following headers before including the *implementation*:
        - imgui.h

    All string data provided to the ui_audio_init() must remain alive until
    until ui_audio_discard() is called!

    ## zlib/libpng license

    Copyright (c) 2018 Andre Weissflog
    This software is provided 'as-is', without any express or implied warranty.
    In no event will the authors be held liable for any damages arising from the
    use of this software.
    Permission is granted to anyone to use this software for any purpose,
    including commercial applications, and to alter it and redistribute it
    freely, subject to the following restrictions:
        1. The origin of this software must not be misrepresented; you must not
        claim that you wrote the original software. If you use this software in a
        product, an acknowledgment in the product documentation would be
        appreciated but is not required.
        2. Altered source versions must be plainly marked as such, and must not
        be misrepresented as being the original software.
        3. This notice may not be removed or altered from any source
        distribution. 
#*/
#include <stdint.h>
#include <stdbool.h>

#ifdef __cplusplus
extern "C" {
#endif

/* setup parameters for ui_ay38910_init()
    NOTE: all string data must remain alive until ui_audio_discard()!
*/
typedef struct {
    const char* title;          /* window title */
    const float* sample_buffer; /* pointer to audio sample buffer */
    int num_samples;            /* max number of samples in sample buffer */
    int x, y;                   /* initial window position */
    int w, h;                   /* initial window size or zero for default size */
    bool open;                  /* initial open state */
} ui_audio_desc_t;

typedef struct {
    const char* title;
    const float* sample_buffer;
    int num_samples;
    float init_x, init_y;
    float init_w, init_h;
    uint32_t cursor_color;
    bool open;
    bool valid;
} ui_audio_t;

void ui_audio_init(ui_audio_t* win, const ui_audio_desc_t* desc);
void ui_audio_discard(ui_audio_t* win);
void ui_audio_draw(ui_audio_t* win, int sample_pos);

#ifdef __cplusplus
} /* extern "C" */
#endif

/*-- IMPLEMENTATION (include in C++ source) ----------------------------------*/
#ifdef CHIPS_UI_IMPL
#ifndef __cplusplus
#error "implementation must be compiled as C++"
#endif
#include <string.h> /* memset */
#ifndef CHIPS_ASSERT
    #include <assert.h>
    #define CHIPS_ASSERT(c) assert(c)
#endif

void ui_audio_init(ui_audio_t* win, const ui_audio_desc_t* desc) {
    CHIPS_ASSERT(win && desc);
    CHIPS_ASSERT(desc->title);
    CHIPS_ASSERT(desc->sample_buffer);
    CHIPS_ASSERT(desc->num_samples > 0);
    memset(win, 0, sizeof(ui_audio_t));
    win->title = desc->title;
    win->sample_buffer = desc->sample_buffer;
    win->num_samples = desc->num_samples;
    win->init_x = (float)  desc->x;
    win->init_y = (float) desc->y;
    win->init_w = (float) ((desc->w == 0) ? 480 : desc->w);
    win->init_h = (float) ((desc->h == 0) ? 120 : desc->h);
    win->cursor_color = 0xFF0000FF;
    win->open = desc->open;
    win->valid = true;
}

void ui_audio_discard(ui_audio_t* win) {
    CHIPS_ASSERT(win && win->valid);
    win->valid = false;
}

void ui_audio_draw(ui_audio_t* win, int sample_pos) {
    CHIPS_ASSERT(win && win->valid && win->title && win->sample_buffer);
    if (!win->open) {
        return;
    }
    ImGui::SetNextWindowPos(ImVec2(win->init_x, win->init_y), ImGuiCond_Once);
    ImGui::SetNextWindowSize(ImVec2(win->init_w, win->init_h), ImGuiCond_Once);
    if (ImGui::Begin(win->title, &win->open)) {
        ImVec2 pos = ImGui::GetCursorScreenPos();
        ImVec2 area = ImGui::GetContentRegionAvail();
        ImGui::PlotLines("##samples", win->sample_buffer, win->num_samples, 0, 0, -1.0f, +1.0f, area);
        const ImGuiStyle& style = ImGui::GetStyle();
        float x0 = pos.x + style.FramePadding.x;
        float x1 = pos.x + area.x - style.FramePadding.x;
        float y0 = pos.y + style.FramePadding.y;
        float y1 = pos.y + area.y - style.FramePadding.y;
        float tx = (float)sample_pos / (float)win->num_samples;
        float x = x0 + (x1 - x0) * tx;
        ImGui::GetWindowDrawList()->AddLine(ImVec2(x, y0), ImVec2(x, y1), win->cursor_color, 3);
    }
    ImGui::End();
}
#endif /* CHIPS_UI_IMPL */
