unit palette_lookup(
    simple_dualport_bram_port0 palette,                                                                                         // USER DEFINED PALETTE, 256 X 24-BIT RGB
    input   uint8   index,                                                                                                      // PALETTE INDEX
    output! uint24  rgb                                                                                                         // RGB ENTRY FOR PALETTE
) {
    palette.addr0 := index; rgb := palette.rdata0;
}

unit multiplex_display(
    input   uint1   palette_clock,                                                                                              // DOUBLE CLOCK FOR PALETTE LOOKUP TO HAPPEN WITHIN 1 VIDEO CLOCK PULSE
    simple_dualport_bram_port0 palette,                                                                                         // 256 x 24-BIT RGB, READ ONLY

    output! uint8   pix_red,                                                                                                    // 0 - 255 RED
    output! uint8   pix_green,                                                                                                  // 0 - 255 GREEN
    output! uint8   pix_blue,                                                                                                   // 0 - 255 BLUE

    input   uint1   display_order,                                                                                              // LAYER ORDER, 2 DEFINED, SEE SELECT LAYER BELOW
    input   uint1   colour,                                                                                                     // COLOUR OR GREYSCALE FLAG
    input   uint1   usepalette,                                                                                                 // USE USER DEFINED PALETTE ( USED BY DOOM )

    input uint8 background_p,                                                                                                   // BACKGROUND PIXEL

    input uint8 lower_tilemap_p,                                                                                                // LOWER TILEMAP PIXEL
    input uint1 lower_tilemap_display,                                                                                          //               DISPLAY?
    input uint8 upper_tilemap_p,                                                                                                // UPPER TILEMAP PIXEL
    input uint1 upper_tilemap_display,                                                                                          //               DISPLAY?

    input uint8 lower_sprites_p,                                                                                                // LOWER SPRITE PIXEL
    input uint1 lower_sprites_display,                                                                                          //              DISPLAY?
    input uint8 upper_sprites_p,                                                                                                // UPPER SPRITE PIXEL
    input uint1 upper_sprites_display,                                                                                          //              DISPLAY?

    input uint8 bitmap_p,                                                                                                       // BITMAP PIXEL ( note layered bitmaps handled by bitmap.si )
    input uint1 bitmap_display,                                                                                                 //        DISPLAY?

    input uint8 character_map_p,                                                                                                // CHARACTER MAP PIXEL
    input uint1 character_map_display,                                                                                          //               DISPLAY?

    input   uint8   status_p,                                                                                                   // STATUS LIGHTS PIXEL
    input   uint1   status_display                                                                                              //               DISPLAY?
) <reginputs> {
    selectlayer mpd(
        background <: background_p,
        lower_tilemap <: lower_tilemap_p,
        lower_tilemap_display <: lower_tilemap_display,
        upper_tilemap <: upper_tilemap_p,
        upper_tilemap_display <: upper_tilemap_display,
        lower_sprites <: lower_sprites_p,
        lower_sprites_display <: lower_sprites_display,
        upper_sprites <: upper_sprites_p,
        upper_sprites_display <: upper_sprites_display,
        bitmap <: bitmap_p,
        bitmap_display <: bitmap_display,
        character_map <: character_map_p,
        character_map_display <: character_map_display,
        status <: status_p,
        status_display <: status_display,
        display_order <: display_order
    );
    palette_lookup pl <@palette_clock> (
        palette <:> palette,
        index <: mpd.pixel
    );

    uint8   BIT3to8[] = { 0, 36, 73, 109, 146, 182, 219, 255 };                                                                 // xxx -> xxxxxxxx

    algorithm <autorun> { while(1) {
        switch( colour ) {
            case 0: {                                                                                                           // RGBM or PALETTE
                if( usepalette & ~status_display ) {
                    pix_red = pl.rgb[16,8]; pix_green = pl.rgb[8,8]; pix_blue = pl.rgb[0,8];
                } else {
                    pix_red = BIT3to8[ { mpd.pixel[6,2], mpd.pixel[0,1]} ];                                                     // DEFAULT RGBM -> R8 G8 B8 via lookup
                    pix_green = BIT3to8[ mpd.pixel[3,3] ];
                    pix_blue = BIT3to8[ { mpd.pixel[1,2], mpd.pixel[0,1]} ];
                }
            }
            case 1: { pix_red = mpd.pixel; pix_green = mpd.pixel; pix_blue = mpd.pixel; }                                       // GREYSCALE
        }
    } }
}

// CHOOSE LAY TO DISPLAY
unit selectlayer(
    input   uint1   display_order,
    input   uint1   status_display,
    input   uint8   status,
    input   uint1   character_map_display,
    input   uint8   character_map,
    input   uint1   upper_sprites_display,
    input   uint8   upper_sprites,
    input   uint1   bitmap_display,
    input   uint8   bitmap,
    input   uint1   lower_sprites_display,
    input   uint8   lower_sprites,
    input   uint1   lower_tilemap_display,
    input   uint8   lower_tilemap,
    input   uint1   upper_tilemap_display,
    input   uint8   upper_tilemap,
    input   uint8   background,
    output! uint8   pixel
) <reginputs> {
    pixel := display_order ? ( status_display ) ? status :                                                                      // ALTERNATE ORDER  STATUS              TOP
                             ( character_map_display ) ? character_map :                                                        //                  CHARACTER MAP
                             ( upper_sprites_display ) ? upper_sprites :                                                        //                  UPPER SPRITES
                             ( lower_sprites_display ) ? lower_sprites :                                                        //                  LOWER SPRITES
                             ( upper_tilemap_display ) ? upper_tilemap :                                                        //                  UPPER TILEMAP
                             ( lower_tilemap_display ) ? lower_tilemap :                                                        //                  LOWER TILEMAP
                             ( bitmap_display ) ? bitmap :                                                                      //                  BITMAP
                             background :                                                                                       //                  BACKGROUND          BOTTOM

                             ( status_display ) ? status :                                                                      // DEFAULT ORDER    STATUS              TOP
                             ( character_map_display ) ? character_map :                                                        //                  CHARACTER MAP
                             ( upper_sprites_display ) ? upper_sprites :                                                        //                  UPPER SPRITES
                             ( bitmap_display ) ? bitmap :                                                                      //                  BITMAP
                             ( lower_sprites_display ) ? lower_sprites :                                                        //                  LOWER SPRITES
                             ( upper_tilemap_display ) ? upper_tilemap :                                                        //                  UPPER TILEMAP
                             ( lower_tilemap_display ) ? lower_tilemap :                                                        //                  LOWER TILEMAP
                             background;                                                                                        //                  BACKGROUND          BOTTOM
}
