unit palette_lookup(
    simple_dualport_bram_port0 palette,
    input   uint8   index,
    output! uint24  rgb
) {
    always_after {
        palette.addr0 = index; rgb = palette.rdata0;
    }
}

unit multiplex_display(
    input   uint1   palette_clock,
    simple_dualport_bram_port0 palette,
    input   uint1   usepalette,

    output! uint8   pix_red,
    output! uint8   pix_green,
    output! uint8   pix_blue,

    // DISPLAY ORDER, COLOUR/BW MODE AND DIMMER LEVEL
    input   uint2   display_order,
    input   uint1   colour,

    // BACKGROUND
    input uint8 background_p,

    // TILEMAPS
    input uint8 lower_tilemap_p,
    input uint1 lower_tilemap_display,
    input uint8 upper_tilemap_p,
    input uint1 upper_tilemap_display,

    // SPRITES
    input uint8 lower_sprites_p,
    input uint1 lower_sprites_display,
    input uint8 upper_sprites_p,
    input uint1 upper_sprites_display,

    // BITMAP
    input uint8 bitmap_p,
    input uint1 bitmap_display,

    // CHARACTER MAP
    input uint8 character_map_p,
    input uint1 character_map_display,

    // STATUS
    input   uint8   status_p,
    input   uint1   status_display
) <reginputs> {
    selectlayer mpd(
        background <: background_p,
        lower_tilemap <: lower_tilemap_p,
        lower_tilemap_display <: lower_tilemap_display,
        upper_tilemap <: upper_tilemap_p,
        upper_tilemap_display <: upper_tilemap_display,
        lower_sprites <: lower_sprites_p,
        lower_sprites_display <: lower_sprites_display,
        upper_sprites <: upper_sprites_p,
        upper_sprites_display <: upper_sprites_display,
        bitmap <: bitmap_p,
        bitmap_display <: bitmap_display,
        character_map <: character_map_p,
        character_map_display <: character_map_display,
        status <: status_p,
        status_display <: status_display,
        display_order <: display_order
    );
    palette_lookup pl <@palette_clock> (
        palette <:> palette,
        index <: mpd.pixel
    );

    always_after {
        uint8   BIT3to8[] = { 0, 36, 73, 109, 146, 182, 219, 255 };                                     // xxx -> xxxxxxxx

        switch( colour ) {
            case 0: {                                                                                   // RGBM or PALETTE
                if( usepalette & ~status_display ) {
                    pix_red = pl.rgb[16,8]; pix_green = pl.rgb[8,8]; pix_blue = pl.rgb[0,8];
                } else {
                    pix_red = BIT3to8[ { mpd.pixel[6,2], mpd.pixel[0,1]} ];                             // DEFAULT RGBM -> R8 G8 B8 via lookup
                    pix_green = BIT3to8[ mpd.pixel[3,3] ];
                    pix_blue = BIT3to8[ { mpd.pixel[1,2], mpd.pixel[0,1]} ];
                }
            }
            case 1: { pix_red = mpd.pixel; pix_green = mpd.pixel; pix_blue = mpd.pixel; }               // GREYSCALE
        }
    }
}

// CHOOSE LAY TO DISPLAY
unit selectlayer(
    input   uint1   display_order,
    input   uint1   status_display,
    input   uint8   status,
    input   uint1   character_map_display,
    input   uint8   character_map,
    input   uint1   upper_sprites_display,
    input   uint8   upper_sprites,
    input   uint1   bitmap_display,
    input   uint8   bitmap,
    input   uint1   lower_sprites_display,
    input   uint8   lower_sprites,
    input   uint1   lower_tilemap_display,
    input   uint8   lower_tilemap,
    input   uint1   upper_tilemap_display,
    input   uint8   upper_tilemap,
    input   uint8   background,
    output! uint8   pixel
) <reginputs> {
    always_after {
        if( display_order ) {
            pixel = ( status_display ) ? status :
                    ( character_map_display ) ? character_map :
                    ( upper_sprites_display ) ? upper_sprites :
                    ( lower_sprites_display ) ? lower_sprites :
                    ( upper_tilemap_display ) ? upper_tilemap :
                    ( lower_tilemap_display ) ? lower_tilemap :
                    ( bitmap_display ) ? bitmap :
                    background;
        } else {
            pixel = ( status_display ) ? status :
                    ( character_map_display ) ? character_map :
                    ( upper_sprites_display ) ? upper_sprites :
                    ( bitmap_display ) ? bitmap :
                    ( lower_sprites_display ) ? lower_sprites :
                    ( upper_tilemap_display ) ? upper_tilemap :
                    ( lower_tilemap_display ) ? lower_tilemap :
                    background;
        }
    }
}
