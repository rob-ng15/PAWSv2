unit tile1616(
    simple_dualport_bram_port0 tiles16x16,
    input  uint6   tile,
    input  uint4   x,
    input  uint4   y,
    output! uint8   pixel
) {
    // Setup the reading and writing of the tiles16x16 using rotation/reflection
    always_after {
        { tiles16x16.addr0 = { tile, y, x }; }
        { pixel = tiles16x16.rdata0; }
    }
}

unit tilemap(
    input   uint1   clockTG,
    simple_dualport_bram_port0 tiles16x16,
    dualport_bram_port0 tiles,

    input   uint10  pix_x,
    input   uint10  pix_x1,
    input   uint9   pix_y,
    input   uint1   pix_active,
    input   uint1   pix_vblank,
    output! uint8   pixel,
    output! uint1   tilemap_display,

    // For scrolling/wrapping
    input   uint6   base_x(0),
    input   uint6   base_y(0),
    input   int5    tm_offset_x,
    input   int5    tm_offset_y
) <reginputs> {
    // Character position on the screen x 0-41, y 0-31 * 42 ( used to fetch the tile number and action for that cell )
    // Adjust for the offsets, effective 0 point margin is ( 1,1 ) to ( 40,30 ) with a 1 tile border
    uint10  xtmpos <:: ( {{6{tm_offset_x[4,1]}}, tm_offset_x } + pix_x1 + 11d16 );
    uint9   ytmpos <:: ( {{6{tm_offset_y[4,1]}}, tm_offset_y } + ( 11d16 + pix_y ) );

    // Adjust for base, keep in range 0-41, 0-31
    uint7   tmxpb <:: ( xtmpos[4,6] + base_x );     uint7   actualxtmpos <:: tmxpb > 41 ? tmxpb - 42 : tmxpb;
    uint7   tmypb <:: ( ytmpos[4,5] + base_y );     uint7   actualytmpos <:: tmypb > 31 ? tmypb - 32 : tmypb;

    // Derive the x and y coordinate within the current 16x16 tilemap block x 0-15, y 0-15, adjusted for offsets
    uint4   xintm <:: { 1b0, pix_x[0,4] } + tm_offset_x;                                                uint4   revx <:: ~xintm;
    uint4   yintm <:: { 1b0, pix_y[0,4] } + tm_offset_y;                                                uint4   revy <:: ~yintm;

    // Apply rotation/reflection
    uint1   action00 <:: ( ~|tmentry( tiles.rdata0 ).action );                                          uint1   action01 <:: ( tmentry( tiles.rdata0 ).action == 2b01 );
    uint1   action10 <:: ( tmentry( tiles.rdata0 ).action == 2b10 );
    uint4   xpixel <:: tmentry( tiles.rdata0 ).rflag ? action00 ? xintm : action01 ? yintm : action10 ? revx : revy : tiles.rdata0[6,1] ? revx : xintm;
    uint4   ypixel <:: tmentry( tiles.rdata0 ).rflag ? action00 ? yintm : action01 ? revx : action10 ? revy : xintm : tiles.rdata0[7,1] ? revy : yintm;

    // DOUBLE CLOCKED TILE GENERATOR
    tile1616 TG <@clockTG> ( tiles16x16 <:> tiles16x16, tile <: tmentry( tiles.rdata0 ).tilenumber, x <: xpixel, y <: ypixel );

    // Set up reading of the tilemap
    tiles.wenable0 := 0; tiles.addr0 := actualxtmpos + actualytmpos * 42;

    always_after {
        { tilemap_display = pix_active & ( TG.pixel != 64 ); }
        { pixel = TG.pixel; }
    }
}

// CALCULATE NEW OFFSETS AND IF AT MIN/MAX
unit   calcoffset(
    input   int5    offset,
    input   uint4   adjust,
    output  uint1   MIN,
    output  int5    PREV,
    output  uint1   MAX,
    output  int5    NEXT
) <reginputs> {
    int6    offsetPLUS <:: { offset[4,1], offset } + adjust;
    int6    offsetMINUS <:: { offset[4,1], offset } - adjust;

    always_after {
        { MIN = ( offsetMINUS < -15 ); }               { PREV = offsetMINUS + ( MIN ? 16 : 0 ); }
        { MAX = ( offsetPLUS > 15 ); }                 { NEXT= offsetPLUS - ( MAX ? 16 : 0 ); }
    }
}
unit tile_map_writer(
    dualport_bram_port1 tiles,

    // Set TM at x, y, character with foreground, background and rotation
    input   uint6   tm_x,
    input   uint6   tm_y,
    input   uint6   tm_character,
    input   uint3   tm_actions,
    input   uint1   tm_write,
    output  uint9   tm_read,

    // For scrolling/wrapping
    output  uint6   base_x(0),
    output  uint6   base_y(0),
    output  int5    tm_offset_x(0),
    output  int5    tm_offset_y(0),

    input   uint4   tm_scrollwrap,
    input   uint4   tm_adjust,
    output  uint4   tm_lastaction,
    output  uint1   tm_active
) <reginputs> {
    // OFFSET CALCULATIONS
    calcoffset TMOX( offset <: tm_offset_x, adjust <: tm_adjust );       calcoffset TMOY( offset <: tm_offset_y, adjust <: tm_adjust );

    // READ/WRITE ADDRESS, ADJUSTED FOR OFFSET
    uint7   tmxpb <:: ( tm_x + base_x );            uint7   write_x <:: tmxpb > 41 ? tmxpb - 42 : tmxpb;
    uint7   tmypb <:: ( tm_y + base_y );            uint7   write_y <:: tmypb > 31 ? tmypb - 32: tmypb;

    // CLEARSCROLL address
    uint11  tmcsaddr = uninitialized;               uint11  tmcsNEXT <:: tmcsaddr + 1;

    // TILEMAP WRITE FLAGS
    tiles.wenable1 := 0; tiles.addr1 := write_x + write_y * 42; tm_read := tiles.rdata1;

    algorithm <autorun> {
        while(1) {
            if( tm_active ) {                                                                                               // CLEAR
                tiles.wdata1 = 0;
                while( tmcsaddr != 1344 ) { tiles.addr1 = tmcsaddr; tiles.wenable1 = 1; tmcsaddr = tmcsNEXT; }
                tm_active = 0;
            } else {
                tmcsaddr = 0;
            }
        }
    }

    always_after {
        { if( tm_write ) { tiles.wdata1 = { tm_actions, tm_character }; tiles.wenable1 = 1; } }                                 // WRITE
        {
            if( |tm_scrollwrap ) { tm_lastaction = 0; }
            switch( tm_scrollwrap ) {
                case 1: {                                                                                                       // LEFT
                    if( TMOX.MAX ) { base_x = ( base_x == 41 ) ? 0 : base_x + 1; tm_lastaction = 1; }
                    tm_offset_x = TMOX.NEXT;
                }
                case 2: {                                                                                                       // UP
                    if( TMOY.MAX ) { base_y = ( base_y == 31 ) ? 0 : base_y + 1; tm_lastaction = 2; }
                    tm_offset_y = TMOY.NEXT;
                }
                case 3: {                                                                                                       // RIGHT
                    if( TMOX.MIN ) { base_x = ( ~|base_x ) ? 41 : base_x - 1; tm_lastaction = 3; }
                    tm_offset_x = TMOX.PREV;
                }
                case 4: {                                                                                                       // DOWN
                    if( TMOY.MIN ) { base_y = ( ~|base_y ) ? 31 : base_y - 1; tm_lastaction = 4; }
                    tm_offset_y = TMOY.PREV;
                }
                case 5: { tm_active = 1; base_x = 0; base_y = 0; tm_offset_x = 0; tm_offset_y = 0; }                            // CLEAR
                default: {}
            }
        }
    }
}
