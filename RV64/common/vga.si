// SL 2019-10
//
// @sylefeb 2020
// https://github.com/sylefeb/Silice
// MIT license, see LICENSE_MIT in Silice repo root

unit vga(
  output uint1  vga_hs,
  output uint1  vga_vs,
  output uint1  active,
  output uint1  vblank,
  output uint12 vga_x,
  output uint11 vga_y
) {

// we use the pre-processor to compute some bounds
$$if VGA_1024_768 then
//_ 1024x768@60 (65MHz pixel clock)
$$  H_FRT_PORCH = 24
$$  H_SYNCH     = 136
$$  H_BCK_PORCH = 160
$$  H_RES       = 1024
//
$$  V_FRT_PORCH = 3
$$  V_SYNCH     = 6
$$  V_BCK_PORCH = 29
$$  V_RES       = 768
$$elseif VGA_800_600 then
//_ 800x600@56 (36MHz pixel clock)
$$  H_FRT_PORCH = 24
$$  H_SYNCH     = 72
$$  H_BCK_PORCH = 128
$$  H_RES       = 800
//
$$  V_FRT_PORCH = 1
$$  V_SYNCH     = 2
$$  V_BCK_PORCH = 22
$$  V_RES       = 600
$$elseif VGA_1920_1080 then
//_ 1920x1080@60 (173MHz pixel clock)
$$  H_FRT_PORCH = 128
$$  H_SYNCH     = 200
$$  H_BCK_PORCH = 328
$$  H_RES       = 1920
//
$$  V_FRT_PORCH = 3
$$  V_SYNCH     = 5
$$  V_BCK_PORCH = 32
$$  V_RES       = 1080
$$else
//_ default to 640x480@60 (25MHz pixel clock)
$$  H_FRT_PORCH = 16
$$  H_SYNCH     = 96
$$  H_BCK_PORCH = 48
$$  H_RES       = 640
//
$$  V_FRT_PORCH = 10
$$  V_SYNCH     = 2
$$  V_BCK_PORCH = 33
$$  V_RES       = 480
$$end

//
$$if not VGA_VA_END then
$$VGA_VA_END = V_RES
$$end
//
$$HS_START = H_FRT_PORCH
$$HS_END   = H_FRT_PORCH + H_SYNCH
$$HA_START = H_FRT_PORCH + H_SYNCH + H_BCK_PORCH
$$H_END    = H_FRT_PORCH + H_SYNCH + H_BCK_PORCH + H_RES
//
$$VS_START = V_FRT_PORCH
$$VS_END   = V_FRT_PORCH + V_SYNCH
$$VA_START = V_FRT_PORCH + V_SYNCH + V_BCK_PORCH
$$V_END    = V_FRT_PORCH + V_SYNCH + V_BCK_PORCH + V_RES

  uint12 xcount(0);
  uint11 ycount(0);

  uint12 pix_x     <:: (xcount - $HA_START$);
  uint11 pix_y     <:: (ycount - $VA_START$);

  uint1  active_h  <:: (xcount >= $HA_START$ && xcount < $H_END$);
  uint1  active_v  <:: (ycount >= $VA_START$ && ycount < $VA_START + VGA_VA_END$);

  active           :=  active_h && active_v;

  vga_hs           :=  ~((xcount >= $HS_START$ && xcount < $HS_END$));
  vga_vs           :=  ~((ycount >= $VS_START$ && ycount < $VS_END$));

  vblank           :=  (ycount < $VA_START$);

  always {

    vga_x = active_h ? pix_x : 0;
    vga_y = active_v ? pix_y : 0;

    if (xcount == $H_END-1$) {
      xcount = 0;
      if (ycount == $V_END-1$) {
        ycount = 0;
      } else {
        ycount = ycount + 1;
	    }
    } else {
      xcount = xcount + 1;
	  }

$$if SIMULATION then
$$if VGA_1024_768 then
    __verilog("$c32(\"set_vga_resolution(1024,768);\");");
$$elseif VGA_800_600 then
    __verilog("$c32(\"set_vga_resolution(800,600);\");");
$$elseif VGA_1920_1080 then
    __verilog("$c32(\"set_vga_resolution(1920,1080);\");");
$$else
    __verilog("$c32(\"set_vga_resolution(640,480);\");");
$$end
$$end
  }

}

// -------------------------
