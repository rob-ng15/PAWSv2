// -----------------------------------------------------------
// @sylefeb A SDRAM controller in Silice
//
// SDRAM arbitrer

// -------------------------
// N-way arbitrer for SDRAM
// sd0 has highest priority, then sd1, then ...

// MIT license, see LICENSE_MIT in Silice repo root
// https://github.com/sylefeb/Silice

$$if not Nway then
$$  Nway = 3
$$end

unit sdram_arbitrer_$Nway$way(
$$for i=0,Nway-1 do
  sdram_provider sd$i$,
$$end
  sdram_user     sd
) {

$$for i=0,Nway-1 do
  sameas(sd$i$) buffered_sd$i$;
$$end

  uint$Nway$ working   = 0;
  uint$Nway$ in_valids = uninitialized;

$$for i=0,Nway-1 do
  sd$i$.done      := 0; // pulses high when ready
$$end
  sd .in_valid    := 0; // pulses high when ready

  always {

    in_valids = {
$$for i=Nway-1,0,-1 do
        buffered_sd$i$.in_valid
$$for j=i-1,0,-1 do
        && !buffered_sd$j$.in_valid
$$end
$$if i > 0 then
       ,
$$end
$$end
    };

    // buffer requests
$$for i=0,Nway-1 do
    if (sd$i$.in_valid == 1) {
      buffered_sd$i$.addr       = sd$i$.addr;
      buffered_sd$i$.rw         = sd$i$.rw;
      buffered_sd$i$.data_in    = sd$i$.data_in;
      buffered_sd$i$.wmask      = sd$i$.wmask;
      buffered_sd$i$.in_valid   = 1;
    }
$$end
    // check if operations terminated
    switch (working) {
$$for i=0,Nway-1 do
      case $1<<i$ : {
        if (sd.done == 1) {
          // done
          sd$i$.data_out          = sd.rw ? sd$i$.data_out : sd.data_out; // update data on read
          sd$i$.done              = 1;
          working                 = 0;
          buffered_sd$i$.in_valid = 0;
        }
      }
$$end
      default: {
            switch (in_valids) {
$$for i=0,Nway-1 do
              case $1<<i$: {
                sd.addr     = buffered_sd$i$.addr;
                sd.rw       = buffered_sd$i$.rw;
                sd.data_in  = buffered_sd$i$.data_in;
                sd.wmask    = buffered_sd$i$.wmask;
                sd.in_valid = 1;
                working     = $1<<i$; // wait for done
              }
$$end
              default: { }
            }
        }
    } // switch
  } // always
}

// -----------------------------------------------------------
