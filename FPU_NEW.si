// FMIN.S FMAX.S FSGNJ.S FSGNJN.S FSGNJX.S FEQ.S FLT.S FLE.S FCLASS.S FMV.X.W
unit fpufast(
    input   uint2   function3,
    input   uint5   function7,
    input   uint32  sourceReg1,
    input   uint32  sourceReg1F,
    input   uint32  sourceReg2F,
    input   uint4   classA,
    input   uint4   classB,

    output  uint32  result,
    output  uint1   frd,
    input   uint5   FPUflags,
    output  uint5   FPUnewflags
) <reginputs> {
    floatcompare FPUlteq( a <: sourceReg1F, b <: sourceReg2F, classA <: classA, classB <: classB );
    floatminmax FPUminmax( sourceReg1F <: sourceReg1F, sourceReg2F <: sourceReg2F, classA <: classA, classB <: classB, less <: FPUlteq.less, function3 <: function3[0,1] );
    floatcomparison FPUcompare( sourceReg1F <: sourceReg1F, sourceReg2F <: sourceReg2F, classA <: classA, classB <: classB, less <: FPUlteq.less, equal <: FPUlteq.equal, function3 <: function3[0,2], );
    floatclassify FPUclass( sourceReg1F <: sourceReg1F, classA <: classA );
    floatsign FPUsign( function3 <: function3[0,2], sourceReg1F <: sourceReg1F, sourceReg2Fsign <: sourceReg2F[31,1] );

    always_after {
        // RESULT
        {
            switch( function7[3,2] ) {
                case 2b00: { result = function7[0,1] ? FPUminmax.result : FPUsign.result; }                                     // FMIN.S FMAX.S FSGNJ.S FSGNJN.S FSGNJX.S
                case 2b10: { result = FPUcompare.result; }                                                                      // FEQ.S FLT.S FLE.S
                default: { result = function7[1,1] ? sourceReg1 : function3[0,1] ? FPUclass.classification : sourceReg1F; }     // FCLASS.S FMV.X.W
            }
        }
        // FLAGS
        {
            switch( function7[3,2] ) {
                case 2b00: { FPUnewflags = FPUflags | ( function7[0,1] ? FPUminmax.flags : 0 ); }                               // FMIN.S FMAX.S FSGNJ.S FSGNJN.S FSGNJX.S
                case 2b10: { FPUnewflags = FPUflags | FPUcompare.flags; }                                                       // FEQ.S FLT.S FLE.S
                default: { FPUnewflags = FPUflags; }                                                                            // FCLASS.S FMV.X.W

            }
        }
        { frd = function7[3,1] ? function7[1,1] : ~|function7[3,2]; }                                                           // FRD = 1 for FMIN.S FMAX.S FSGNJ.S FSGNJN.S FSGNJX.S AND FMV.W.X
    }
}

// FCVT.W.S FCVT.WU.S FCVT.S.W FCVT.S.WU
unit floatconvert(
    input   uint5   function7,
    input   uint1   rs2,
    input   uint32  sourceReg1,
    input   uint32  abssourceReg1,
    input   uint32  sourceReg1F,
    input   uint4   classA,

    output  uint32  result,
    output  uint1   frd,
    input   uint5   FPUflags,
    output  uint5   FPUnewflags
) <reginputs> {
    inttofloat FPUfloat( a <: sourceReg1, absa <: abssourceReg1, dounsigned <: rs2 );                                           // INTEGER TO FLOAT
    floattoint FPUint( a <: sourceReg1F, classA <: classA, dounsigned <: rs2 );                                                 // FLOAT TO INTEGER

    always_after {
        { frd = function7[1,1]; }
        { result = function7[1,1] ? FPUfloat.result : FPUint.result; }
        { FPUnewflags = FPUflags | ( function7[1,1] ?  FPUfloat.flags : FPUint.flags ); }
    }
}

// FPU CALCULATION BLOCKS FUSED ADD SUB MUL DIV SQRT
unit floatcalc(
    input   uint1   start,
    output  uint1   busy(0),
    input   uint5   opCode,
    input   uint5   function7,
    input   uint32  sourceReg1F,
    input   uint32  sourceReg2F,
    input   uint32  sourceReg3F,
    input   uint4   classA,
    input   uint4   classB,
    input   uint4   classC,

    input   uint5   FPUflags,
    output  uint5   FPUnewflags,
    output  uint32  result
) <reginputs> {
    classifyF classM( a <: FPUmultiply.result );                                                                                // CLASSIFY THE RESULT OF MULTIPLICATION

    floataddsub FPUaddsub( cOF <: DONORMAL.flags[1,1], cUF <: DONORMAL.flags[0,1], f32 <: DONORMAL.f32 );
    floatmultiply FPUmultiply( a <: sourceReg1F, b <: sourceReg2F, classA <: classA, classB <: classB, cOF <: DONORMAL.flags[1,1], cUF <: DONORMAL.flags[0,1], f32 <: DONORMAL.f32 );
    floatdivide FPUdivide( a <: sourceReg1F, b <: sourceReg2F, classA <: classA, classB <: classB, cOF <: DONORMAL.flags[1,1], cUF <: DONORMAL.flags[0,1], f32 <: DONORMAL.f32 );
    floatsqrt FPUsqrt( a <: sourceReg1F, classA <: classA, cOF <: DONORMAL.flags[1,1], cUF <: DONORMAL.flags[0,1], f32 <: DONORMAL.f32 );

    normalise48to24 DONORMAL();                                                                                                 // NORMALISE, ROUND AND COMBINE TO FLOAT32

    // UNIT BUSY FLAG
    uint4   unitbusy <:: { FPUsqrt.busy, FPUdivide.busy, FPUmultiply.busy, FPUaddsub.busy };
    uint1   isbusy <:: |unitbusy;

    FPUaddsub.start := 0; FPUmultiply.start := 0; FPUdivide.start := 0; FPUsqrt.start := 0;

    algorithm <autorun> {
        while(1) {
            if( start ) {
                if( opCode[2,1] ) {
                    switch( function7[0,2] ) {                                                                                  // START 2 REGISTER FPU OPERATIONS
                        default: { FPUaddsub.start = 1; }                                                                           // FADD.S FSUB.S
                        case 2b10: { FPUmultiply.start = 1; }                                                                       // FMUL.S
                        case 2b11: { FPUsqrt.start = function7[3,1]; FPUdivide.start = ~function7[3,1]; }                           // FSQRT.S // FDIV.S
                    }
                    while( isbusy ) {}
                } else {
                    FPUmultiply.start = 1; while( isbusy ) {}                                                                   // START 3 REGISTER FUSED FPU OPERATION - MULTIPLY
                    FPUaddsub.start = 1; while( isbusy ) {}                                                                     //                                        ADD / SUBTRACT
                }
                busy = 0;
            }
        }
    }

    always_after {
        uint5   flags = uninitialised;                                                                                          // FLAGS RETURNED BY UNITS

        { if( start ) { busy = 1; } }

        // CONTROL INPUTS FOR FADD.S FSUB.S SINGLE/FUSED OPERATION
        { FPUaddsub.a = opCode[2,1] ? sourceReg1F : { opCode[1,1] ^ FPUmultiply.result[31,1], FPUmultiply.result[0,31] }; }
        { FPUaddsub.b = opCode[2,1] ? { function7[0,1] ^ sourceReg2F[31,1], sourceReg2F[0,31] } : { opCode[0,1] ^ sourceReg3F[31,1], sourceReg3F[0,31] }; }
        { FPUaddsub.classA = opCode[2,1] ? classA : classM.class; }
        { FPUaddsub.classB = opCode[2,1] ? classB : classC; }

        // CONTROL INPUTS TO NORMALISING, ROUNDING AND COMBINING
        {
            if( isbusy ) {
                onehot( unitbusy ) {
                    case 0: { DONORMAL.bitstream = FPUaddsub.bitstream; }
                    case 1: { DONORMAL.bitstream = FPUmultiply.bitstream; }
                    case 2: { DONORMAL.bitstream = FPUdivide.tonormalisebitstream; }
                    case 3: { DONORMAL.bitstream = FPUsqrt.tonormalisebitstream; }
                }
            }
        }
        {
            if( isbusy ) {
                onehot( unitbusy ) {
                    case 0: { DONORMAL.exp = FPUaddsub.exp; }
                    case 1: { DONORMAL.exp = FPUmultiply.exp; }
                    case 2: { DONORMAL.exp = FPUdivide.quotientexp; }
                    case 3: { DONORMAL.exp = FPUsqrt.squarerootexp; }
                }
            }
        }
        { if( isbusy ) { DONORMAL.adjustexp = unitbusy[0,1]; } }
        { if( isbusy ) { DONORMAL.sign = |( { 1b0, FPUdivide.quotientsign, FPUmultiply.sign, FPUaddsub.sign } & unitbusy ); } }

        // RESULT
        {
            if( opCode[2,1] ) {                                                                                                 // SINGLE OPERATION
                switch( function7[0,2] ) {                                                                                      // EXTRACT RESULT AND FLAGS
                    default: { result = FPUaddsub.result; }                                                                     // FADD.S FSUB.S
                    case 2b10: { result = FPUmultiply.result; }                                                                 // FMUL.S
                    case 2b11: { result = function7[3,1] ? FPUsqrt.result : FPUdivide.result; }                                 // FSQRT.S FDIV.S
                }
            } else {                                                                                                            // FUSED OPERATIONS
                result = FPUaddsub.result;
            }
        }
        // NEW FPU FLAGS
        {
            if( opCode[2,1] ) {                                                                                                 // SINGLE OPERATION
                switch( function7[0,2] ) {                                                                                      // EXTRACT RESULT AND FLAGS
                    default: { flags = FPUaddsub.flags & 5b00110; }                                                             // FADD.S FSUB.S
                    case 2b10: { flags = FPUmultiply.flags & 5b00110; }                                                         // FMUL.S
                    case 2b11: { flags = ( function7[3,1] ? FPUsqrt.flags : FPUdivide.flags ) & 5b01110; }                      // FSQRT.S FDIV.S
                }
            } else {                                                                                                            // FUSED OPERATIONS
                flags = ( FPUmultiply.flags & 5b10110 ) | ( FPUaddsub.flags & 5b00110 );
            }
        }
        { FPUnewflags = FPUflags | flags; }
    }
}

// CLASSIFICATION 10 bits { qNAN, sNAN, +INF, +ve normal, +ve subnormal, +0, -0, -ve subnormal, -ve normal, -INF }
unit floatclassify(
    input   uint32  sourceReg1F,
    input   uint4   classA,
    output  uint10  classification
) <reginputs> {
    uint1   TRUEZERO <:: ~|fp32( sourceReg1F ).fraction;

    always_after{
        classification = {  classA[1,1],                                            // 512  qNAN
                            classA[2,1],                                            // 256  sNAN
                            classA[3,1] & ~fp32( sourceReg1F ).sign,                // 128  +INF
                            ~|classA & ~fp32( sourceReg1F ).sign,                   // 64   +NORMAL
                            classA[0,1] & ~fp32( sourceReg1F ).sign & ~TRUEZERO,    // 32   +SUBNORMAL
                            classA[0,1] & ~fp32( sourceReg1F ).sign & TRUEZERO,     // 16   +0
                            classA[0,1] & fp32( sourceReg1F ).sign & TRUEZERO,      // 8    -0
                            classA[0,1] & fp32( sourceReg1F ).sign & ~TRUEZERO,     // 4    -SUBNORMAL
                            ~|classA & fp32( sourceReg1F ).sign,                    // 2    -NORMAL
                            classA[3,1] & fp32( sourceReg1F ).sign                  // 1    -INF
        };
    }
}

// MIN / MAX
unit floatminmax(
    input   uint1   less,
    input   uint1   function3,
    input   uint32  sourceReg1F,
    input   uint32  sourceReg2F,
    input   uint4   classA,
    input   uint4   classB,
    output  uint5   flags,
    output  uint32  result
) <reginputs> {
    uint1   NAN <:: |( classA[1,2] | classB[1,2] );

    always_after {
        { flags = { NAN, 4b0000 }; }
        { result = NAN ? 32h7fc00000 : classA[1,1] ? ( classB[1,1] ? 32h7fc00000 : sourceReg2F ) : classB[1,1] | ( function3 ^ less ) ? sourceReg1F : sourceReg2F; }
    }
}

// COMPARISONS
unit floatcomparison(
    input   uint1   less,
    input   uint1   equal,
    input   uint2   function3,
    input   uint32  sourceReg1F,
    input   uint32  sourceReg2F,
    input   uint4   classA,
    input   uint4   classB,
    output  uint5   flags,
    output  uint1   result
) <reginputs> {
    uint1   NAN <:: |( classA[1,2] | classB[1,2] );
    uint4   comparison <:: { 1b0, equal, less, less | equal };

    always_after {
        { flags = { function3[1,1] ? ( classA[2,1] | classB[2,1] ) : NAN, 4b0000 }; }
        { result = ~NAN & comparison[ function3, 1 ]; }
    }
}

unit floatsign(
    input   uint2   function3,
    input   uint32  sourceReg1F,
    input   uint1   sourceReg2Fsign,
    output  uint32  result,
) <reginputs> {
    always_after {
        result = { function3[1,1] ? sourceReg1F[31,1] ^ sourceReg2Fsign : function3[0,1] ^ sourceReg2Fsign, sourceReg1F[0,31] };
    }
}


// Rob Shelton ( @robng15 Twitter, @rob-ng15 GitHub )
// Simple 32bit FPU calculation/conversion routines
// Designed for as small as FPGA usage as possible,
// not for speed.
//
// Copyright (c) 2021 Rob Shelton
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
// Donated to Silice by @sylefeb
// MIT license, see LICENSE_MIT in Silice repo root
//
// Parameters for calculations: ( 32 bit float { sign, exponent, mantissa } format )
// addsub, multiply and divide a and b ( as floating point numbers ), addsub flag == 0 for add, == 1 for sub
//
// Parameters for conversion:
// intotofloat a as 32 bit integer, dounsigned == 1 dounsigned, == 0 signed conversion
// floattouint and floattoint a as 32 bit float
//
// Control:
// start == 1 to start operation
// busy gives status, == 0 not running or complete, == 1 running
//
// Output:
// result gives result of conversion or calculation
//
// NB: Error states are those required by Risc-V floating point

// BITFIELD FOR FLOATING POINT NUMBER - IEEE-754 32 bit format
bitfield fp32{
    uint1   sign,
    uint8   exponent,
    uint23  fraction
}
// REFERENCE, NOT USED IN THIS MODULE
bitfield floatingpointflags{
    uint1   IF,     // infinity as an argument
    uint1   NN,     // NaN as an argument
    uint1   NV,     // Result is not valid,
    uint1   DZ,     // Divide by zero
    uint1   OF,     // Result overflowed
    uint1   UF,     // Result underflowed
    uint1   NX      // Not exact ( integer to float conversion caused bits to be dropped )
}

// IDENTIFY infinity, signalling NAN, quiet NAN, ZERO
unit classifyF(
    input   uint32  a,
    output  uint4   class
) <reginputs> {
    uint1   expFF <:: &fp32(a).exponent;                                                                                        // CHECK FOR 8hff ( signals INF/NAN )
    uint1   zeroFRACTION <:: ~|a[0,23];                                                                                         // FRACTION == 0, INF, == 100... qNAN, == 0xxx... ( xxx... != 0 ) sNAN

    always_after {
        class = {   expFF & zeroFRACTION,                                                                                       // INF
                    expFF & ~a[22,1] & ~zeroFRACTION,                                                                           // sNAN
                    expFF & a[22,1],                                                                                            // qNAN
                    ~|( fp32(a).exponent )                                                                                      // ZERO / SUBNORMAL
        };
    }
}

// NORMALISE RESULT
// ROUND 23 BIT FRACTION FROM NORMALISED FRACTION USING NEXT TRAILING BIT
// ADD BIAS TO EXPONENT AND ADJUST EXPONENT IF ROUNDING FORCES
// COMBINE COMPONENTS INTO FLOATING POINT NUMBER - USED BY CALCULATIONS
// UNDERFLOW return 0, OVERFLOW return infinity
unit clz48(
    input   uint48  bitstream,
    output! uint6   count
) <reginputs> {
    uint6   clz_l = uninitialised;                  uint6   clz_h = uninitialised;

    always_after {
        { ( clz_l ) = clz_silice_32( bitstream[0,32] ); }
        { ( clz_h ) = clz_silice_16( bitstream[32,16] ); }
        { if( |bitstream[32,16] ) { count = clz_h; } else { count = 16 + clz_l; } }
    }
}
unit normalise48to24(
    input   uint1   sign,
    input   int10   exp,
    input   uint48  bitstream,
    input   uint1   adjustexp,
    output! uint2   flags,
    output! uint32  f32
) <reginputs> {
    clz48 CLZ48( bitstream <: bitstream );                                                                                      // COUNT LEADING ZEROS

    uint48  temporary <:: ( bitstream << CLZ48.count );                                                                         // ALIGN TO 1.xxx...
    uint23  roundfraction <:: temporary[24,23] + temporary[23,1];                                                               // PERFORM ROUNDING
    int10   newexponent <:: ( ( ~|roundfraction & temporary[23,1] ) ? 128 : 127 ) + ( adjustexp ? exp - CLZ48.count : exp );    // ADJUST EXPONENT FOR ROUNDING AND FOR ADD/SUB
    uint1   OF <:: ( newexponent > 254 );                                                                                       // DETERMINE IF OVERFLOW

     always_after {
        { f32 = newexponent[9,1] ? 0 : { sign, OF ? 31h7f800000 : { newexponent[0,8], roundfraction } }; }                      // RETURN +/- INF IF [OVER][UNDER]FLOW OR RESULT
        { flags = { OF, newexponent[9,1] }; }                                                                                   // RETURN OVER/UNDERFLOW
     }
}

// CONVERT SIGNED/UNSIGNED INTEGERS TO FLOAT
// dounsigned == 1 for signed conversion (31 bit plus sign), == 0 for dounsigned conversion (32 bit)
unit clz32(
    input   uint32  number,
    output! uint5   zeros
) <reginputs> {
    always_after {
        ( zeros ) = clz_silice_32( number );
    }
}
unit inttofloat(
    input   uint32  a,
    input   uint32  absa,
    input   uint1   dounsigned,
    output  uint7   flags,
    output  uint32  result
) <reginputs> {
    clz32 CLZ( number <: number );                                                                                              // COUNT LEADING ZEROS -

    uint1   sign <:: ~dounsigned & a[31,1];                                                                                     // RESULT SIGN
    uint1   NX <:: ( ~|CLZ.zeros[3,2] );                                                                                        // RETURNS NX IF NUMBER IS TOO LARGE, LESS THAN 8 LEADING ZEROS
    uint32  number <:: sign ? absa : a;                                                                                         // ABSOLUTE VALUE OF INTEGER
    int10   exponent <:: 158 - CLZ.zeros;                                                                                       // EXPONENT
    int23  fraction <:: NX ? number >> ( 8 - CLZ.zeros ) : number << ( CLZ.zeros - 8 );                                         // NORMALISED FRACTION

    always_after {
        { flags = { 6b0, NX }; }
        { result = ( |a ) ? { sign, exponent[0,8], fraction } : 0; }                                                            // RESULT OR ZERO
    }
}

// CONVERT FLOAT TO SIGNED/UNSIGNED INTEGERS
unit floattoint(
    input   uint32  a,
    input   uint1   dounsigned,
    input   uint4   classA,
    output  uint7   flags,
    output  uint32  result
) <reginputs> {
    int10   exp <:: fp32( a ).exponent - 127;
    uint33  sig <:: ( exp < 24 ) ? { 9b1, fp32( a ).fraction, 1b0 } >> ( 23 - exp ) : { 9b1, fp32( a ).fraction, 1b0 } << ( exp - 24);
    uint1   NN <:: classA[2,1] | classA[1,1];       uint1   NV <:: ( exp > ( dounsigned ? 31 : 30 ) ) | ( dounsigned & fp32( a ).sign ) | classA[3,1] | NN;
    uint32  unsignedfraction <:: ( sig[1,32] + sig[0,1] );

    always_after {
        {
            if( classA[0,1] ) {
                result = 0;
            } else {
                if( dounsigned ) {
                    if( classA[3,1] | NN ) {
                        result = NN ? 32hffffffff : { {32{~fp32( a ).sign}} };
                    } else {
                        result = ( fp32( a ).sign ) ? 0 : NV ? 32hffffffff : unsignedfraction;
                    }
                } else {
                    if( classA[3,1] | NN ) {
                        result = { ~NN & fp32( a ).sign, {31{~fp32( a ).sign}} };
                    } else {
                        result = { fp32( a ).sign, NV ? {31{~fp32( a ).sign}} : fp32( a ).sign ? -unsignedfraction : unsignedfraction };
                    }
                }
            }
        }
        {
            flags = { classA[3,1], NN, NV, 4b0000 };
        }
    }
}

// ADDSUB ADD/SUBTRACT TWO FLOATING POINT NUMBERS ( SUBTRACT ACHIEVED BY ALTERING SIGN OF SECOND INPUT )
unit floataddsub(
    input   uint1   start,
    output  uint1   busy(0),
    input   uint32  a,
    input   uint32  b,
    input   uint4   classA,
    input   uint4   classB,
    output  int10   exp,
    output  uint48  bitstream,
    output  uint1   sign,
    input   uint1   cOF,
    input   uint1   cUF,
    input   uint32  f32,
    output  uint7   flags,
    output  uint32  result
) <reginputs> {
    // CLASSIFY THE INPUTS AND FLAG INFINITY, NAN, ZERO AND INVALID ( INF - INF )
    uint1   IF <:: ( classA[3,1] | classB[3,1] );
    uint1   NN <:: |( classA[1,2] | classB[1,2] );
    uint1   NV <:: ( classA[3,1] & classB[3,1]) & ( fp32( a ).sign ^ fp32( b).sign );
    uint1   OF = uninitialised;
    uint1   UF = uninitialised;

    // BREAK DOWN INITIAL float32 INPUTS - SWITCH SIGN OF B IF SUBTRACTION
    uint48  sigA <:: { 2b01, fp32(a).fraction, 23b0 };
    uint48  sigB <:: { 2b01, fp32(b).fraction, 23b0 };
    uint1   inAvB <:: ( fp32( a ).exponent < fp32( b ).exponent );
    uint48  aligned <:: ( inAvB ? sigA : sigB ) >> ( ( inAvB ? fp32( b ).exponent : fp32( a ).exponent ) - ( inAvB ? fp32( a ).exponent : fp32( b ).exponent ) );

    // STORAGE FOR ALIGNED SIGNIFICANDS
    uint48  newsigA = uninitialised;
    uint48  newsigB = uninitialised;
    uint1   newAvB <:: ( newsigA > newsigB );

    always_after {
        { if( start ) { busy = 1; OF = 0; UF = 0; } else { busy = 0; } }

        // ALIGN THE SIGNIFICANDS
        // GENERATE RESULT EXPONENT, 1 IS ADDED TO THE EXPONENT IN CASE OF OVERFLOW - NORMALISING WILL ADJUST WHEN SHIFTING
        { newsigA = inAvB ? aligned : sigA; }
        { newsigB = inAvB ? sigB : aligned; }
        { exp = ( inAvB ? fp32( b ).exponent : fp32( a ).exponent ) - 126; }

        {
            // HANDLE THE RESULT SIGN
            sign = ( fp32( a ).sign ^ fp32( b ).sign ) ? fp32( a ).sign ? newAvB : ~newAvB : fp32( a ).sign;
        }
        {
            // PERFORM ADDITION HANDLING SIGNS
                bitstream = ( fp32( a ).sign ^ fp32( b ).sign ) ? ( fp32( a ).sign ^ sign ? newsigB : newsigA ) - ( fp32( a ).sign ^ sign ? newsigA : newsigB ) :
                                                                  newsigA + newsigB;
        }

        // COLLECT THE RESULT FROM NORMALISATION AND COMBINING, OR FROM EXCEPTION
        {
            switch( { IF | NN, classA[0,1] | classB[0,1] } ) {
                case 2b00: {
                    if( |bitstream ) { result = f32; } else { result = 0; }
                }
                case 2b01: { result = (classA[0,1] & classB[0,1] ) ? 0 : ( classB[0,1] ) ? a : b; }
                default: {
                    switch( { IF, NN } ) {
                        case 2b10: { result = NV ? 32h7fc0000 : classA[3,1] ? a : b; }
                        default: { result = 32h7fc0000; }
                    }
                }
            }
        }
        { if( ~( IF | NN | classA[0,1] | classB[0,1] ) ) { OF = cOF; UF = cUF; } }
        { flags = { IF, NN, NV, 1b0, OF, UF, 1b0 }; }
    }
}

// MULTIPLY TWO FLOATING POINT NUMBERS
unit floatmultiply(
    input   uint1   start,
    output  uint1   busy(0),
    input   uint32  a,
    input   uint32  b,
    input   uint4   classA,
    input   uint4   classB,
    output  uint1   sign,
    output  int10   exp,
    output  uint48  bitstream,
    input   uint1   cOF,
    input   uint1   cUF,
    input   uint32  f32,

    output  uint7   flags,
    output  uint32  result
) <reginputs> {
    // CLASSIFY THE INPUTS AND FLAG INFINITY, NAN, ZERO AND INVALID ( INF x ZERO )
    uint1   ZERO <:: (classA[0,1] | classB[0,1] );
    uint1   IF <:: ( classA[3,1] | classB[3,1] );
    uint1   NN <:: |( classA[1,2] | classB[1,2] );
    uint1   NV <:: IF & ZERO;
    uint1   OF = uninitialised;
    uint1   UF = uninitialised;

    always_after {
        { if( start ) { busy = 1; OF = 0; UF = 0; } else { busy = 0; } }

        // FIND SIGN OF RESULT AND EXPONENT OF PRODUCT ( + 1 IF PRODUCT OVERFLOWS, MSB == 1 )
        // PERFORM THE MULTIPLICATION
        { bitstream = { 1b1, fp32( a ).fraction } * { 1b1, fp32( b ).fraction }; }
        { sign = fp32( a ).sign ^ fp32( b ).sign; }
        { exp = fp32( a ).exponent + fp32( b ).exponent - ( bitstream[47,1] ? 253 : 254 ); }

        {
            switch( { IF | NN, ZERO } ) {
                case 2b00: { result = f32; }
                case 2b01: { result = { sign, 31b0 }; }
                default: {
                    switch( { IF, ZERO } ) {
                        case 2b11: { result = 32h7fc0000; }
                        case 2b10: { result = NN ? 32h7fc0000 : { sign, 31h7f800000 }; }
                        default: { result = 32h7fc0000; }
                    }
                }
            }
        }
        { if( ~( IF | NN | ZERO ) ) { OF = cOF; UF = cUF; } }
        {  flags = { IF, NN, NV, 1b0, OF, UF, 1b0 };  }
    }
}

// DIVIDE TWO FLOATING POINT NUMBERS
unit dofloatdivide(
    input   uint1   start,
    output  uint1   busy(0),
    input   uint50  sigA,
    input   uint50  sigB,
    output  uint50  quotient(0)
) <reginputs> {
    // FIND QUOTIENT AND ENSURE 48 BIT FRACTION ( ie BITS 48 and 49 clear )
    uint50  remainder = uninitialised;
    uint50  temporary <:: { remainder[0,49], sigA[bit,1] };
    uint1   bitresult <:: __unsigned(temporary) >= __unsigned(sigB);
    uint2   normalshift <:: quotient[49,1] ? 2 : quotient[48,1];

    uint6   bit(63);
    busy := start | ( ~&bit ) | ( |quotient[48,2] );

    always_after {
        if( &bit ) {
            if( start ) { bit = 49; quotient = 0; remainder = 0; } else { quotient = quotient[ normalshift, 48 ]; }
        } else {
            remainder = __unsigned(temporary) - ( bitresult ? __unsigned(sigB) : 0 );
            quotient[bit,1] = bitresult;
            bit = bit - 1;
        }
    }
}

unit floatdivide(
    input   uint1   start,
    output  uint1   busy(0),
    input   uint32  a,
    input   uint32  b,
    input   uint4   classA,
    input   uint4   classB,
    output  uint1   quotientsign,
    output  int10   quotientexp,
    output  uint48  tonormalisebitstream,
    input   uint1   cOF,
    input   uint1   cUF,
    input   uint32  f32,
    output  uint7   flags,
    output  uint32  result
) <reginputs> {
    // CLASSIFY THE INPUTS AND FLAG INFINITY, NAN, ZERO AND DIVIDE ZERO
    uint1   IF <:: ( classA[3,1] | classB[3,1] );
    uint1   NN <:: |( classA[1,2] | classB[1,2] );
    uint1   OF = uninitialised;
    uint1   UF = uninitialised;
    uint2   ACTION <:: { IF | NN, classA[0,1] | classB[0,1] };

    // PREPARE THE DIVISION, DO THE DIVISION, NORMALISE THE RESULT
    dofloatdivide DODIVIDE( quotient :> tonormalisebitstream );

    DODIVIDE.start := start & ~|ACTION; busy := start | DODIVIDE.busy;

    always_after {
        // BREAK DOWN INITIAL float32 INPUTS AND FIND SIGN OF RESULT AND EXPONENT OF QUOTIENT ( -1 IF DIVISOR > DIVIDEND )
        // ALIGN DIVIDEND TO THE LEFT, DIVISOR TO THE RIGHT
        { quotientsign = fp32( a ).sign ^ fp32( b ).sign; }
        { quotientexp = fp32( a ).exponent - fp32( b ).exponent - ( fp32(b).fraction > fp32(a).fraction ); }
        { DODIVIDE.sigA = { 1b1, fp32(a).fraction, 26b0 }; }
        { DODIVIDE.sigB = { 27b1, fp32(b).fraction }; }

        {
            if( start ) {
                OF = 0; UF = 0;
            } else {
                switch( ACTION ) {
                    case 2b00: { result = f32; }
                    case 2b01: { result = (classA[0,1] & classB[0,1] ) ? 32h7fc0000 : { quotientsign, classB[0,1] ? 31h7f800000 : 31h0 }; }
                    default: { result = ( classA[3,1] & classB[3,1] ) | NN | classB[0,1] ? 32h7fc0000 : { quotientsign, (classA[0,1] | classB[3,1] ) ? 31b0 : 31h7f800000 }; }
                }
            }
        }
        { if( ~|ACTION ) { OF = cOF; UF = cUF; } }
        { flags = { IF, NN, 1b0, classB[0,1], OF, UF, 1b0}; }
    }
}

// ADAPTED FROM https://projectf.io/posts/square-root-in-verilog/
//
// MIT License
//
// Copyright (c) 2021 Will Green, Project F
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
unit dofloatsqrt(
    input   uint1   start,
    output  uint1   busy(0),
    input   uint50  start_ac,
    input   uint48  start_x,
    output  uint48  squareroot
) <reginputs> {
    uint50  test_res <:: ac - { squareroot, 2b01 }; uint50  ac = uninitialised;
    uint48  x = uninitialised;
    uint6   i(47);
    busy := start | ( i != 47 );

    always_after {
        if( i == 47) {
            if( start ) { i = 0; squareroot = 0; ac = start_ac; x = start_x; }
        } else {
            ac = { test_res[49,1] ? ac[0,47] : test_res[0,47], x[46,2] };
            squareroot = { squareroot[0,47], ~test_res[49,1] };
            x = { x[0,46], 2b00 };
            i = i + 1;
        }
    }
}
unit floatsqrt(
    input   uint1   start,
    output  uint1   busy(0),
    input   uint32  a,
    input   uint4   classA,
    output  int10   squarerootexp,
    output  uint48  tonormalisebitstream,
    input   uint1   cOF,
    input   uint1   cUF,
    input   uint32  f32,
    output  uint7   flags,
    output  uint32  result
) <reginputs> {
    // CLASSIFY THE INPUTS AND FLAG INFINITY, NAN, ZERO AND NOT VALID
    uint1   NN <:: classA[2,1] | classA[1,1];
    uint1   NV <:: classA[3,1] | NN | fp32( a ).sign;
    uint1   OF = uninitialised;
    uint1   UF = uninitialised;
    uint1   ACTION <:: ~|{ classA[3,1] | NN, classA[0,1] | fp32( a ).sign };

    // EXPONENT OF INPUT ( used to determine if 1x.xxxxx or 01.xxxxx for fixed point fraction to sqrt )
    // SQUARE ROOT EXPONENT IS HALF OF INPUT EXPONENT
    int10   expA  <:: fp32( a ).exponent - 127;

    // PREPARE AND PERFORM THE SQUAREROOT, FAST NORMALISE THE RESULT
    dofloatsqrt DOSQRT( squareroot :> tonormalisebitstream );

    DOSQRT.start := start & ACTION; busy := start | DOSQRT.busy;

    always_after {
        { DOSQRT.start_ac = expA[0,1] ? { 48b0, 1b1, a[22,1] } : 1; }
        { DOSQRT.start_x = expA[0,1] ? { a[0,22], 26b0 } : { fp32( a ).fraction, 25b0 }; }
        { squarerootexp = ( expA >>> 1 ); }
        { if( start ) { OF = 0; UF = 0; } else { result = ACTION ? f32 : fp32( a ).sign ? 32h7fc0000 : a; } }
        { if( ACTION ) { OF = cOF; UF = cUF; } }
        { flags = { classA[3,1], NN, NV, 1b0, OF, UF, 1b0 };  }
    }
}

// FLOATING POINT COMPARISONS - ADAPTED FROM SOFT-FLOAT

/*============================================================================

License for Berkeley SoftFloat Release 3e

John R. Hauser
2018 January 20

The following applies to the whole of SoftFloat Release 3e as well as to
each source file individually.

Copyright 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018 The Regents of the
University of California.  All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice,
    this list of conditions, and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions, and the following disclaimer in the
    documentation and/or other materials provided with the distribution.

 3. Neither the name of the University nor the names of its contributors
    may be used to endorse or promote products derived from this software
    without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS "AS IS", AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, ARE
DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

=============================================================================*/

unit floatcompare(
    input   uint32  a,
    input   uint32  b,
    input   uint4   classA,
    input   uint4   classB,
    output  uint7   flags,
    output  uint1   less,
    output  uint1   equal
) <reginputs> {
    // IDENTIFY NaN, RETURN 0 IF NAN, OTHERWISE RESULT OF COMPARISONS
    uint1   NAN <:: classA[2,1] | classB[2,1] | classA[1,1] | classB[1,1];
    uint1   aequalb <:: ( a == b );                 uint1   aorbleft1equal0 <:: ~|( ( a | b ) << 1 );

    always_after {
        { flags = { classA[3,1] | classB[3,1], {2{NAN}}, 4b0000 }; }
        { less = ~NAN & ( ( fp32( a ).sign ^ fp32( b ).sign ) ? fp32( a ).sign & ~aorbleft1equal0 : ~aequalb & ( fp32( a ).sign ^ ( a < b ) ) ); }
        { equal = ~NAN & ( aequalb | aorbleft1equal0 ); }
    }
}
