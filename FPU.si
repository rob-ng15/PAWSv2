// FMIN.S FMAX.S FSGNJ.S FSGNJN.S FSGNJX.S FEQ.S FLT.S FLE.S FCLASS.S FMV.X.W
unit fpuSINGLECYCLE(
    input   uint2   function3,
    input   uint5   function7,
    input   uint32  sourceReg1,
    input   uint32  sourceReg1F,
    input   uint32  sourceReg2F,
    input   uint4   classA,
    input   uint4   classB,

    output  uint32  result,
    output  uint1   frd,
    input   uint5   FPUflags,
    output  uint5   FPUnewflags
) <reginputs> {
    floatcompare FPUlteq( a <: sourceReg1F, b <: sourceReg2F, classA <: classA, classB <: classB );

    uint1   NAN <:: |( classA[1,2] | classB[1,2] );
    uint1   TRUEZERO <:: ~|fp32( sourceReg1F ).fraction;
    uint4   LTEQ <:: { 1b0, FPUlteq.equal, FPUlteq.less, FPUlteq.less | FPUlteq.equal };

    uint10  FCLASS = uninitialised;
    uint32  MINMAX = uninitialised;                 uint5   flagsMINMAX = uninitialised;
    uint32  COMPARE = uninitialised;                uint5   flagsCOMPARE = uninitialised;
    uint32  SIGN = uninitialised;

    always_after {
        {
            FCLASS = {  classA[1,1],                                            // 512  qNAN            { qNAN, sNAN, +INF, +ve normal, +ve subnormal, +0, -0, -ve subnormal, -ve normal, -INF }
                        classA[2,1],                                            // 256  sNAN
                        classA[3,1] & ~fp32( sourceReg1F ).sign,                // 128  +INF
                        ~|classA & ~fp32( sourceReg1F ).sign,                   // 64   +NORMAL
                        classA[0,1] & ~fp32( sourceReg1F ).sign & ~TRUEZERO,    // 32   +SUBNORMAL
                        classA[0,1] & ~fp32( sourceReg1F ).sign & TRUEZERO,     // 16   +0
                        classA[0,1] & fp32( sourceReg1F ).sign & TRUEZERO,      // 8    -0
                        classA[0,1] & fp32( sourceReg1F ).sign & ~TRUEZERO,     // 4    -SUBNORMAL
                        ~|classA & fp32( sourceReg1F ).sign,                    // 2    -NORMAL
                        classA[3,1] & fp32( sourceReg1F ).sign                  // 1    -INF
            };
        }
        { MINMAX = NAN ? 32h7fc00000 : classA[1,1] ? ( classB[1,1] ? 32h7fc00000 : sourceReg2F ) : classB[1,1] | ( function3[0,1] ^ FPUlteq.less ) ? sourceReg1F : sourceReg2F; }
        { flagsMINMAX = { NAN, 4b0000 };  }
        { COMPARE = ~NAN & LTEQ[ function3, 1 ]; }
        { flagsCOMPARE = { function3[1,1] ? ( classA[2,1] | classB[2,1] ) : NAN, 4b0000 }; }
        { SIGN = { function3[1,1] ? sourceReg1F[31,1] ^ fp32( sourceReg2F ).sign : function3[0,1] ^ fp32( sourceReg2F ).sign, sourceReg1F[0,31] }; }

        {
            switch( function7[3,2] ) {                                                                                          // RESULT
                case 2b00: { result = function7[0,1] ? MINMAX : SIGN; }                                                         // FMIN.S FMAX.S FSGNJ.S FSGNJN.S FSGNJX.S
                case 2b10: { result = COMPARE; }                                                                                // FEQ.S FLT.S FLE.S
                default: { result = function7[1,1] ? sourceReg1 : function3[0,1] ? FCLASS : sourceReg1F; }                      // FCLASS.S FMV.X.W
            }
        }
        {
            switch( function7[3,2] ) {                                                                                          // FLAGS
                case 2b00: { FPUnewflags = FPUflags | ( function7[0,1] ? flagsMINMAX : 0 ); }                                   // FMIN.S FMAX.S FSGNJ.S FSGNJN.S FSGNJX.S
                case 2b10: { FPUnewflags = FPUflags | flagsCOMPARE; }                                                           // FEQ.S FLT.S FLE.S
                default: { FPUnewflags = FPUflags; }                                                                            // FCLASS.S FMV.X.W
            }
        }
        { frd = function7[3,1] ? function7[1,1] : ~|function7[3,2]; }                                                           // FRD for FMIN.S FMAX.S FSGNJ.S FSGNJN.S FSGNJX.S AND FMV.W.X
    }
}

// FCVT.W.S FCVT.WU.S FCVT.S.W FCVT.S.WU
unit clz32(
    input   uint32  number,
    output! uint5   zeros
) <reginputs> {
    always_after {
        ( zeros ) = clz_silice_32( number );
    }
}
unit floatconvert(
    input   uint5   function7,
    input   uint1   rs2,
    input   uint32  sourceReg1,
    input   uint32  abssourceReg1,
    input   uint32  sourceReg1F,
    input   uint4   classA,

    output  uint32  result,
    output  uint1   frd,
    input   uint5   FPUflags,
    output  uint5   FPUnewflags
) <reginputs> {
    clz32 CLZ( number <: number );

    // COUNT LEADING ZEROS - RETURNS NX IF NUMBER IS TOO LARGE, LESS THAN 8 LEADING ZEROS
    uint1   sign <:: ~rs2 & sourceReg1[31,1];         uint32  number <:: sign ? abssourceReg1 : sourceReg1;
    uint1   NX <:: ( ~|CLZ.zeros[3,2] );
    int10   exponent <:: 158 - CLZ.zeros;
    int23   fraction <:: NX ? number >> ( 8 - CLZ.zeros ) : number << ( CLZ.zeros - 8 );

    int10   exp <:: fp32( sourceReg1F ).exponent - 127;
    uint1   NN <:: classA[2,1] | classA[1,1];
    uint1   NV <:: ( exp > ( rs2 ? 31 : 30 ) ) | ( rs2 & fp32( sourceReg1F ).sign ) | classA[3,1] | NN;
    uint33  sig <:: ( exp < 24 ) ? { 9b1, fp32( sourceReg1F ).fraction, 1b0 } >> ( 23 - exp ) : { 9b1, fp32( sourceReg1F ).fraction, 1b0 } << ( exp - 24);
    uint32  unsignedfraction <:: ( sig[1,32] + sig[0,1] );

    uint32  FLOAT = uninitialised;                  uint5   flagsFLOAT = uninitialised;
    uint32  INT = uninitialised;                    uint5   flagsINT = uninitialised;

    always_after {
        { FLOAT = ( |sourceReg1 ) ? { sign, exponent[0,8], fraction } : 0; }
        { flagsFLOAT = { 4b0, NX };  }

        {
            if( classA[0,1] ) {
                INT = 0;
            } else {
                if( rs2 ) {
                    if( classA[3,1] | NN ) {
                        INT = NN ? 32hffffffff : { {32{~fp32( sourceReg1F ).sign}} };
                    } else {
                        INT = ( fp32( sourceReg1F ).sign ) ? 0 : NV ? 32hffffffff : unsignedfraction;
                    }
                } else {
                    if( classA[3,1] | NN ) {
                        INT = { ~NN & fp32( sourceReg1F ).sign, {31{~fp32( sourceReg1F ).sign}} };
                    } else {
                        INT = NV ? { {32{~fp32( sourceReg1F ).sign}} } : fp32( sourceReg1F ).sign ? -unsignedfraction : unsignedfraction;
                    }
                }
            }
        }
        { flagsINT = { classA[3,1], NN, NV, 4b0000 }; }

        { frd = function7[1,1]; }                                                                                           // TO FLOAT REGISTER FLAG
        { result = function7[1,1] ? FLOAT : INT; }                                                                          // RESULT
        { FPUnewflags = FPUflags | ( function7[1,1] ?  flagsFLOAT : flagsINT ); }                                           // FLAGS
    }
}

// FPU CALCULATION BLOCKS FUSED ADD SUB MUL DIV SQRT
unit floatcalc(
    input   uint1   start,
    output  uint1   busy(0),
    input   uint5   opCode,
    input   uint5   function7,
    input   uint32  sourceReg1F,
    input   uint32  sourceReg2F,
    input   uint32  sourceReg3F,
    input   uint4   classA,
    input   uint4   classB,
    input   uint4   classC,

    input   uint5   FPUflags,
    output  uint5   FPUnewflags,
    output  uint32  result
) <reginputs> {
    // CLASSIFY THE RESULT OF MULTIPLICATION
    classifyF classM( a <: FPUmultiply.result );

    // ADD/SUB/MULT have changeable inputs due to 2 input and 3 input fused operations
    floataddsub FPUaddsub( OF <: MAKERESULT.OF, UF <: MAKERESULT.UF, f32 <: MAKERESULT.f32 );
    floatmultiply FPUmultiply( a <: sourceReg1F, b <: sourceReg2F, classA <: classA, classB <: classB, OF <: MAKERESULT.OF, UF <: MAKERESULT.UF, f32 <: MAKERESULT.f32 );
    floatdivide FPUdivide( a <: sourceReg1F, b <: sourceReg2F, classA <: classA, classB <: classB, OF <: MAKERESULT.OF, UF <: MAKERESULT.UF, f32 <: MAKERESULT.f32 );
    floatsqrt FPUsqrt( a <: sourceReg1F, classA <: classA, OF <: MAKERESULT.OF, UF <: MAKERESULT.UF, f32 <: MAKERESULT.f32 );

    // NORMALISE RESULT OF ADD SUB DIV
    normalise24 DONORMAL( exp <: FPUaddsub.tonormaliseexp );

    // ROUNDING AND COMBINING OF FINAL RESULTS
    doroundcombine MAKERESULT();

    // UNIT BUSY FLAG
    uint4   unitbusy <:: { FPUsqrt.busy, FPUdivide.busy, FPUmultiply.busy, FPUaddsub.busy };
    uint1   isbusy <:: |unitbusy;

    FPUaddsub.start := 0; FPUmultiply.start := 0; FPUdivide.start := 0; FPUsqrt.start := 0;

    algorithm <autorun> {
        while(1) {
            if( start ) {
                busy = 1;
                if( opCode[2,1] ) {
                    switch( function7[0,2] ) {                                                                          // START 2 REGISTER FPU OPERATIONS
                        default: { FPUaddsub.start = 1; }                                                               // FADD.S FSUB.S
                        case 2b10: { FPUmultiply.start = 1; }                                                           // FMUL.S
                        case 2b11: { FPUsqrt.start = function7[3,1]; FPUdivide.start = ~function7[3,1]; }               // FSQRT.S // FDIV.S
                    }
                    while( isbusy ) {}                                                                                  // WAIT FOR FINISH
                } else {
                    FPUmultiply.start = 1; while( isbusy ) {}                                                           // START 3 REGISTER FUSED FPU OPERATION - MULTIPLY
                    FPUaddsub.start = 1; while( isbusy ) {}                                                             //                                        ADD / SUBTRACT
                }
                busy = 0;
            }
        }
    }

    always_after {
        // UNIT RESULT FLAGS
        uint5   flags = uninitialised;

        // PASS ADDSUB OR DIVIDE BITSTREAM TO NORMALISATION UNIT
        { DONORMAL.bitstream = opCode[2,1] & ( &function7[0,2] ) ? FPUdivide.tonormalisebitstream : FPUaddsub.tonormalisebitstream; }

        // CONTROL INPUTS TO ROUNDING AND COMBINING
        {
            if( isbusy ) {
                onehot( unitbusy ) {
                    case 0: { MAKERESULT.exponent = DONORMAL.newexponent; }
                    case 1: { MAKERESULT.exponent = FPUmultiply.productexp; }
                    case 2: { MAKERESULT.exponent = FPUdivide.quotientexp; }
                    case 3: { MAKERESULT.exponent = FPUsqrt.squarerootexp; }
                }
            }
        }
        {
            if( isbusy ) {
                onehot( unitbusy ) {
                    case 0: { MAKERESULT.bitstream = DONORMAL.normalfraction; }
                    case 1: { MAKERESULT.bitstream = FPUmultiply.normalfraction; }
                    case 2: { MAKERESULT.bitstream = DONORMAL.normalfraction; }
                    case 3: { MAKERESULT.bitstream = FPUsqrt.normalfraction; }
                }
            }
        }
        { if( isbusy ) { MAKERESULT.sign = |( { 1b0, FPUdivide.quotientsign, FPUmultiply.productsign, FPUaddsub.resultsign } & unitbusy ); } }

        // SET INPUTS TO ADDSUB FOR SINGLE AND FUSED OPERATIONS
        { FPUaddsub.a = opCode[2,1] ? sourceReg1F : { opCode[1,1] ^ FPUmultiply.result[31,1], FPUmultiply.result[0,31] }; }
        { FPUaddsub.b = opCode[2,1] ? { function7[0,1] ^ sourceReg2F[31,1], sourceReg2F[0,31] } : { opCode[0,1] ^ sourceReg3F[31,1], sourceReg3F[0,31] }; }
        { FPUaddsub.classA = opCode[2,1] ? classA : classM.class; }
        { FPUaddsub.classB = opCode[2,1] ? classB : classC; }

        // SELECT RESULT
        {
            if( opCode[2,1] ) {                                                                                         // SINGLE OPERATION
                switch( function7[0,2] ) {
                    default: { result = FPUaddsub.result; }                                                             // FADD.S FSUB.S
                    case 2b10: { result = FPUmultiply.result; }                                                         // FMUL.S
                    case 2b11: { result = function7[3,1] ? FPUsqrt.result : FPUdivide.result; }                         // FSQRT.S FDIV.S
                }
            } else {                                                                                                    // FUSED OPERATIONS
                result = FPUaddsub.result;
            }
        }
        // SELECT FLAGS
        {
            if( opCode[2,1] ) {                                                                                         // SINGLE OPERATION
                switch( function7[0,2] ) {
                    default: { flags = FPUaddsub.flags & 5b00110; }                                                     // FADD.S FSUB.S
                    case 2b10: { flags = FPUmultiply.flags & 5b00110; }                                                 // FMUL.S
                    case 2b11: { flags = function7[3,1] ? FPUsqrt.flags & 5b00110 : FPUdivide.flags & 5b01110; }        // FSQRT.S FDIV.S
                }
            } else {                                                                                                    // FUSED OPERATIONS
                flags = ( FPUmultiply.flags & 5b10110 ) | ( FPUaddsub.flags & 5b00110 );
            }
        }
        { FPUnewflags = FPUflags | flags; }                                                                             // RETURN NEW FLAGS
    }
}

// Rob Shelton ( @robng15 Twitter, @rob-ng15 GitHub )
// Simple 32bit FPU calculation/conversion routines
// Designed for as small as FPGA usage as possible,
// not for speed.
//
// Copyright (c) 2021 Rob Shelton
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
// Donated to Silice by @sylefeb
// MIT license, see LICENSE_MIT in Silice repo root
//
// Parameters for calculations: ( 32 bit float { sign, exponent, mantissa } format )
// addsub, multiply and divide a and b ( as floating point numbers ), addsub flag == 0 for add, == 1 for sub
//
// Parameters for conversion:
// intotofloat a as 32 bit integer, dounsigned == 1 dounsigned, == 0 signed conversion
// floattouint and floattoint a as 32 bit float
//
// Control:
// start == 1 to start operation
// busy gives status, == 0 not running or complete, == 1 running
//
// Output:
// result gives result of conversion or calculation
//
// NB: Error states are those required by Risc-V floating point

// BITFIELD FOR FLOATING POINT NUMBER - IEEE-754 32 bit format
bitfield fp32{
    uint1   sign,
    uint8   exponent,
    uint23  fraction
}
// REFERENCE, NOT USED IN THIS MODULE
bitfield floatingpointflags{
    uint1   IF,     // infinity as an argument
    uint1   NN,     // NaN as an argument
    uint1   NV,     // Result is not valid,
    uint1   DZ,     // Divide by zero
    uint1   OF,     // Result overflowed
    uint1   UF,     // Result underflowed
    uint1   NX      // Not exact ( integer to float conversion caused bits to be dropped )
}

// IDENTIFY infinity, signalling NAN, quiet NAN, ZERO
unit classifyF(
    input   uint32  a,
    output  uint4   class
) <reginputs> {
    uint1   expFF <:: &fp32(a).exponent;                                                                                        // CHECK FOR 8hff ( signals INF/NAN )
    uint1   zeroFRACTION <:: ~|a[0,23];                                                                                         // FRACTION == 0, INF, == 100... qNAN, == 0xxx... ( xxx... != 0 ) sNAN

    always_after {
        class = {   expFF & zeroFRACTION,                                                                                       // INF
                    expFF & ~a[22,1] & ~zeroFRACTION,                                                                           // sNAN
                    expFF & a[22,1],                                                                                            // qNAN
                    ~|( fp32(a).exponent )                                                                                      // ZERO / SUBNORMAL
        };
    }
}

// NORMALISE A 48 BIT MANTISSA SO THAT THE MSB IS ONE, FOR ADDSUB ALSO DECREMENT THE EXPONENT FOR EACH SHIFT LEFT
// EXTRACT THE 24 BITS FOLLOWING THE MSB (1.xxxx) FOR ROUNDING
unit clz48(
    input   uint48  bitstream,
    output! uint6   count
) <reginputs> {
    uint16  bitstreamh <:: bitstream[32,16];        uint32  bitstreaml <:: bitstream[0,32];
    uint6   clz_l = uninitialised;                  uint6   clz_h = uninitialised;

    always_after {
        { ( clz_l ) = clz_silice_32( bitstreaml ); }
        { ( clz_h ) = clz_silice_16( bitstreamh ); }
        { count = |bitstreamh ? clz_h : 16 + clz_l; }                                                                           // COUNT LEADING ZEROS FOR NORMALISATION SHIFT
    }
}
// NORMALISE RESULT FOR ADD SUB DIVIDE
unit normalise24(
    input   int10   exp,
    input   uint48  bitstream,
    output  int10   newexponent,
    output  uint24  normalfraction
) <reginputs> {
    // COUNT LEADING ZEROS
    uint48 temporary <:: ( bitstream << CLZ48.count );
    clz48 CLZ48( bitstream <: bitstream );

    always_after {
        { normalfraction = temporary[23,24]; }                                                                                  // EXTRACT 24 BITS ( 1 extra for rounding )
        { newexponent = exp - CLZ48.count; }                                                                                    // ADDSUB EXPONENT ADJUSTMENT
    }
}

// ROUND 23 BIT FRACTION FROM NORMALISED FRACTION USING NEXT TRAILING BIT
// ADD BIAS TO EXPONENT AND ADJUST EXPONENT IF ROUNDING FORCES
// COMBINE COMPONENTS INTO FLOATING POINT NUMBER - USED BY CALCULATIONS
// UNDERFLOW return 0, OVERFLOW return infinity
unit doroundcombine(
    input   uint1   sign,
    input   uint24  bitstream,
    input   int10   exponent,
    output! uint1   OF,
    output! uint1   UF,
    output! uint32  f32
) <reginputs> {
    uint23  roundfraction <:: bitstream[1,23] + bitstream[0,1];
    int10   newexponent <:: ( ( ~|roundfraction & bitstream[0,1] ) ? 128 : 127 ) + exponent;

   always_after {
        { OF = ( newexponent > 254 );  }
        { UF = newexponent[9,1];  }
        { f32 = UF ? 0 : { sign, OF ? 31h7f800000 : { newexponent[0,8], roundfraction } }; }
    }
}

// ADDSUB ADD/SUBTRACT TWO FLOATING POINT NUMBERS ( SUBTRACT ACHIEVED BY ALTERING SIGN OF SECOND INPUT )
unit equaliseexpaddsub(
    input   uint32  a,
    input   uint32  b,
    output  uint48  newsigA,
    output  uint48  newsigB,
    output  int10   resultexp,
) <reginputs> {
    // BREAK DOWN INITIAL float32 INPUTS - SWITCH SIGN OF B IF SUBTRACTION
    uint48  sigA <:: { 2b01, fp32(a).fraction, 23b0 };
    uint48  sigB <:: { 2b01, fp32(b).fraction, 23b0 };
    uint1   AvB <:: ( fp32(a).exponent < fp32(b).exponent );
    uint48  aligned <:: ( AvB ? sigA : sigB ) >> ( ( AvB ? fp32(b).exponent : fp32(a).exponent ) - ( AvB ? fp32(a).exponent : fp32(b).exponent ) );

    always_after {
        { newsigA = AvB ? aligned : sigA; }
        { newsigB = AvB ? sigB : aligned;  }
        { resultexp = ( AvB ? fp32(b).exponent : fp32(a).exponent ) - 126; }
    }
}
unit dofloataddsub(
    input   uint1   signA,
    input   uint48  sigA,
    input   uint1   signB,
    input   uint48  sigB,
    output  uint1   resultsign,
    output  uint48  resultfraction
) <reginputs> {
    uint1   AvB <:: ( sigA > sigB );

    always_after {
        // PERFORM ADDITION/SUBTRACTION ACCOUTING FOR INPUT AND RESULT SIGNS
        { if( signA ^ signB ) { resultsign = signA ? AvB : ~AvB; } else { resultsign = signA; } }
        { if( signA ^ signB ) { resultfraction = ( signA ^ resultsign ? sigB : sigA ) - ( signA ^ resultsign ? sigA : sigB ); } else { resultfraction = sigA + sigB; } }
    }
}
unit floataddsub(
    input   uint1   start,
    output  uint1   busy(0),
    input   uint32  a,
    input   uint32  b,
    input   uint4   classA,
    input   uint4   classB,
    output  int10   tonormaliseexp,
    output  uint48  tonormalisebitstream,
    output  uint1   resultsign,
    input   uint1   OF,
    input   uint1   UF,
    input   uint32  f32,
    output  uint7   flags,
    output  uint32  result
) <reginputs> {
    // CLASSIFY THE INPUTS AND FLAG INFINITY, NAN, ZERO AND INVALID ( INF - INF )
    uint1   IF <:: ( classA[3,1] | classB[3,1] );
    uint1   NN <:: ( classA[2,1] | classA[1,1] | classB[2,1] | classB[1,1] );
    uint1   NV <:: ( classA[3,1] & classB[3,1]) & ( fp32( a ).sign ^ fp32( b).sign );
    uint2   ACTION <:: { IF | NN, classA[0,1] | classB[0,1] };

    // EQUALISE THE EXPONENTS
    equaliseexpaddsub EQUALISEEXP( a <: a, b <: b, resultexp :> tonormaliseexp );

    // PERFORM THE ADDITION/SUBTRACION USING THE EQUALISED FRACTIONS, 1 IS ADDED TO THE EXPONENT IN CASE OF OVERFLOW - NORMALISING WILL ADJUST WHEN SHIFTING
    dofloataddsub ADDSUB( signA <: fp32( a ).sign, sigA <: EQUALISEEXP.newsigA, signB <: fp32( b).sign, sigB <: EQUALISEEXP.newsigB, resultsign :> resultsign, resultfraction :> tonormalisebitstream );

    algorithm <autorun> {
        while(1) {
            if( start ) {
                busy = 1;
                if( ~|ACTION & |ADDSUB.resultfraction ) {
                    // VALID RESULT, ALLOW FOR NORMALISATION AND COMBINING OF FINAL RESULT
                    ++: ++: busy = 0;
                } else { busy = 0; }
            }
        }
    }

    always_after {
        {
            switch( ACTION ) {
                case 2b00: { result = |ADDSUB.resultfraction ? f32 : 0; }
                case 2b01: { result = (classA[0,1] & classB[0,1] ) ? 0 : ( classB[0,1] ) ? a : b; }
                default: {
                    switch( { IF, NN } ) {
                        case 2b10: { result = NV ? 32h7fc00000 : classA[3,1] ? a : b; }
                        default: { result = 32h7fc00000; }
                    }
                }
            }
        }
        { flags = { IF, NN, NV, 1b0, ~|ACTION & OF, ~|ACTION & UF, 1b0 }; }
    }
}

// MULTIPLY TWO FLOATING POINT NUMBERS
unit floatmultiply(
    input   uint1   start,
    output  uint1   busy(0),
    input   uint32  a,
    input   uint32  b,
    input   uint4   classA,
    input   uint4   classB,
    output  uint1   productsign,
    output  int10   productexp,
    output  uint24  normalfraction,
    input   uint1   OF,
    input   uint1   UF,
    input   uint32  f32,

    output  uint7   flags,
    output  uint32  result
) <reginputs> {
    // CLASSIFY THE INPUTS AND FLAG INFINITY, NAN, ZERO AND INVALID ( INF x ZERO )
    uint1   ZERO <:: (classA[0,1] | classB[0,1] );
    uint1   IF <:: ( classA[3,1] | classB[3,1] );
    uint1   NN <:: ( classA[2,1] | classA[1,1] | classB[2,1] | classB[1,1] );
    uint1   NV <:: IF & ZERO;
    uint2   ACTION <:: { IF | NN, ZERO };
    uint48  product <:: { 1b1, fp32( a ).fraction } * { 1b1, fp32( b ).fraction };

    algorithm <autorun> {
        while(1) {
            if( start ) {
                busy = 1;
                if( ~|ACTION ) {
                    // STEPS: SETUP -> DOMUL -> NORMALISE -> ROUND -> ADJUSTEXP -> COMBINE
                    // ALLOW 2 CYCLES TO PERFORM THE MULTIPLICATION, NORMALISATION AND ROUNDING
                    ++: ++: busy = 0;
                } else { busy = 0; }
            }
        }
    }

    always_after {
        // BREAK DOWN INITIAL float32 INPUTS, PERFORM THE MULTIPLICATION, AND FIND SIGN OF RESULT AND EXPONENT OF PRODUCT ( + 1 IF PRODUCT OVERFLOWS, MSB == 1 )
        { normalfraction = product[ product[47,1] ? 23 : 22, 24 ]; }
        { productsign = fp32( a ).sign ^ fp32( b ).sign; }
        { productexp = fp32( a ).exponent + fp32( b ).exponent - ( product[47,1] ? 253 : 254 ); }

        {
            switch( ACTION ) {
                case 2b00: { result = f32; }
                case 2b01: { result = { productsign, 31b0 }; }
                default: {
                    switch( { IF, ZERO } ) {
                        case 2b11: { result = 32h7fc00000; }
                        case 2b10: { result = NN ? 32h7fc00000 : { productsign, 31h7f800000 }; }
                        default: { result = 32h7fc00000; }
                    }
                }
            }
        }
        {  flags = { IF, NN, NV, 1b0, ~|ACTION & OF, ~|ACTION & UF, 1b0 }; }
    }
}

// DIVIDE TWO FLOATING POINT NUMBERS
unit floatdivide(
    input   uint1   start,
    output  uint1   busy(0),
    input   uint32  a,
    input   uint32  b,
    input   uint4   classA,
    input   uint4   classB,
    output  uint1   quotientsign,
    output  int10   quotientexp,
    output  uint48  tonormalisebitstream,
    input   uint1   OF,
    input   uint1   UF,
    input   uint32  f32,
    output  uint7   flags,
    output  uint32  result
) <reginputs> {
    // CLASSIFY THE INPUTS AND FLAG INFINITY, NAN, ZERO AND DIVIDE ZERO
    uint1   IF <:: ( classA[3,1] | classB[3,1] );
    uint1   NN <:: ( classA[2,1] | classA[1,1] | classB[2,1] | classB[1,1] );
    uint2   ACTION <:: { IF | NN, classA[0,1] | classB[0,1] };

    // BREAK DOWN INITIAL float32 INPUTS AND FIND SIGN OF RESULT AND EXPONENT OF QUOTIENT ( -1 IF DIVISOR > DIVIDEND )
    // ALIGN DIVIDEND TO THE LEFT, DIVISOR TO THE RIGHT
    uint50  dividend <:: { 1b1, fp32(a).fraction, 26b0 };
    uint50  divisor <:: { 27b1, fp32(b).fraction };
    uint50  quotient = uninitialised;
    uint50  remainder = uninitialised;
    uint50  temporary <:: { remainder[0,49], dividend[bit,1] };
    uint1   bitresult <:: __unsigned(temporary) >= __unsigned(divisor);
    uint6   bit = uninitialised;
    uint1   update = uninitialised;

    update := 0;

    algorithm <autorun> {
        while(1) {
            if( start & ~|ACTION ) { busy = 1; while( ~&bit ) { update = 1; } busy = 0; }
        }
    }

    always_after {
        { if( start ) { quotient = 0; } else { if( update ) { quotient[bit,1] = bitresult; } } }
        { if( start ) { remainder = 0; } else { if( update ) { remainder = __unsigned(temporary) - ( bitresult ? __unsigned(divisor) : 0 ); } } }
        { bit = start ? 49 : bit - update; }

        // GENERATE QUOTIENT SIGN AND EXPONENT, NORMALISE THE RESULTANT BITSTREAM FOR OVERFLOW
        { quotientsign = fp32( a ).sign ^ fp32( b ).sign; }
        { quotientexp = fp32( a ).exponent - fp32( b ).exponent - ( fp32(b).fraction > fp32(a).fraction ); }
        { tonormalisebitstream = quotient[ quotient[49,1] ? 2 : quotient[48,1], 48 ]; }
        {
            switch( ACTION ) {
                case 2b00: { result = f32; }
                case 2b01: { result = (classA[0,1] & classB[0,1] ) ? 32h7fc00000 : { quotientsign, classB[0,1] ? 31h7f800000 : 31h0 }; }
                default: { result = ( classA[3,1] & classB[3,1] ) | NN | classB[0,1] ? 32h7fc00000 : { quotientsign, (classA[0,1] | classB[3,1] ) ? 31b0 : 31h7f800000 }; }
            }
        }
        { flags = { IF, NN, 1b0, classB[0,1], ~|ACTION & OF, ~|ACTION & UF, 1b0}; }
    }
}

// ADAPTED FROM https://projectf.io/posts/square-root-in-verilog/
//
// MIT License
//
// Copyright (c) 2021 Will Green, Project F
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
unit floatsqrt(
    input   uint1   start,
    output  uint1   busy(0),
    input   uint32  a,
    input   uint4   classA,
    output  int10   squarerootexp,
    output  uint24  normalfraction,
    input   uint1   OF,
    input   uint1   UF,
    input   uint32  f32,
    output  uint7   flags,
    output  uint32  result
) <reginputs> {
    // CLASSIFY THE INPUTS AND FLAG INFINITY, NAN, ZERO AND NOT VALID
    uint1   NN <:: classA[2,1] | classA[1,1];
    uint1   NV <:: classA[3,1] | NN | fp32( a ).sign;
    uint1   ACTION <:: ~|{ classA[3,1] | NN, classA[0,1] | fp32( a ).sign };

    // EXPONENT OF INPUT ( used to determine if 1x.xxxxx or 01.xxxxx for fixed point fraction to sqrt )
    // SQUARE ROOT EXPONENT IS HALF OF INPUT EXPONENT
    uint50  ac = uninitialised;
    uint48  x = uninitialised;
    uint48  squareroot = uninitialised;
    int10   expA  <:: fp32( a ).exponent - 127;
    uint50  test_res <:: ac - { squareroot, 2b01 };
    uint6   i = uninitialised;
    uint1   update = uninitialised;

    update := 0;

    algorithm <autorun> {
        while(1) {
            if( start & ACTION ) { busy = 1; while( i != 47 ) { update = 1; } busy = 0; }
        }
    }

    always_after {
        {
            if( start ) { ac = expA[0,1] ? { 48b0, 1b1, a[22,1] } : 1; }
                else { if( update ) { ac = { test_res[49,1] ? ac[0,47] : test_res[0,47], x[46,2] }; } }
        }
        {
            if( start ) { x = expA[0,1] ? { a[0,22], 26b0 } : { fp32( a ).fraction, 25b0 }; }
                else { if( update ) { x = { x[0,46], 2b00 }; } }
        }
        {
            if( start ) { squareroot = 0; }
                else { if( update ) { squareroot = { squareroot[0,47], ~test_res[49,1] }; } }
        }
        { i = start ? 0 : i + update; }

        { normalfraction = squareroot[ squareroot[47,1] ? 23 : 22, 24 ]; }
        { squarerootexp = ( expA >>> 1 ); }
        {
            if( ACTION ) {
                // STEPS: SETUP -> DOSQRT -> NORMALISE -> ROUND -> ADJUSTEXP -> COMBINE
                result = f32;
            } else {
                // DETECT sNAN, qNAN, -INF, -x -> qNAN AND  INF -> INF, 0 -> 0
                result = fp32( a ).sign ? 32h7fc00000 : a;
            }
        }
        { flags = { classA[3,1], NN, NV, 1b0, ACTION & OF, ACTION & UF, 1b0 }; }
    }
}

// FLOATING POINT COMPARISONS - ADAPTED FROM SOFT-FLOAT

/*============================================================================

License for Berkeley SoftFloat Release 3e

John R. Hauser
2018 January 20

The following applies to the whole of SoftFloat Release 3e as well as to
each source file individually.

Copyright 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018 The Regents of the
University of California.  All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice,
    this list of conditions, and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions, and the following disclaimer in the
    documentation and/or other materials provided with the distribution.

 3. Neither the name of the University nor the names of its contributors
    may be used to endorse or promote products derived from this software
    without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS "AS IS", AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, ARE
DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

=============================================================================*/

unit floatcompare(
    input   uint32  a,
    input   uint32  b,
    input   uint4   classA,
    input   uint4   classB,
    output  uint6   flags,
    output  uint1   less,
    output  uint1   equal
) <reginputs> {
    uint1   NAN <:: classA[2,1] | classB[2,1] | classA[1,1] | classB[1,1];
    uint1   aequalb <:: ( a == b );                 uint1   aorbleft1equal0 <:: ~|( ( a | b ) << 1 );

    // IDENTIFY NaN, RETURN 0 IF NAN, OTHERWISE RESULT OF COMPARISONS
    always_after {
        { flags = { classA[3,1] | classB[3,1], {2{NAN}}, 4b0000 }; }
        { less = ~NAN & ( ( fp32( a ).sign ^ fp32( b ).sign ) ? fp32( a ).sign & ~aorbleft1equal0 : ~aequalb & ( fp32( a ).sign ^ ( a < b ) ) ); }
        { equal = ~NAN & ( aequalb | aorbleft1equal0 ); }
    }
}
