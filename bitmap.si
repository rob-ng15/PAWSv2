unit framebuffer_read(
    input!  uint18  memoryAddressDirect,
    output! uint32  readDataDirect,

    simple_dualport_bram_port0 bitmap_000,
    simple_dualport_bram_port0 bitmap_001,
    simple_dualport_bram_port0 bitmap_010,
    simple_dualport_bram_port0 bitmap_011,
    simple_dualport_bram_port0 bitmap_100,
    simple_dualport_bram_port0 bitmap_101,
    simple_dualport_bram_port0 bitmap_110,
    simple_dualport_bram_port0 bitmap_111,

    input   uint2   framebuffer,
    input   uint10  pix_x,
    input   uint9   pix_y,
    input   uint1   pix_active,
    input   uint1   pix_vblank,
    output! uint8   pixel,
    output! uint1   bitmap_display,
    input   uint1   display256
) <reginputs> {
    uint8   pixel0 = uninitialised;                 uint8   pixel1 = uninitialised;

    // Pixel x and y fetching ( 1 in advance due to bram latency for first pixel in the block }
    uint17  baseaddress <: ( pix_vblank ? 0 : pix_y[1,8] ) * 320 + ( pix_active ? pix_x[1,9] : 0 );
    uint17  address00 <: framebuffer[0,1] ? baseaddress + ( pix_active & pix_x[0,1] ): memoryAddressDirect + { memoryAddressDirect[1,1], 1b0 };
    uint17  address0 <: framebuffer[0,1] ? baseaddress : memoryAddressDirect + { memoryAddressDirect[1,1], 1b0 };
    uint17  address10 <: framebuffer[1,1] ? baseaddress + ( pix_active & pix_x[0,1] ) : memoryAddressDirect;
    uint17  address1 <: framebuffer[1,1] ? baseaddress : memoryAddressDirect;

    // Setup the address in the bitmap for the pixel being rendered
    // Use pre-fetching of the next pixel ready for the next cycle
    // y_line * 320 + x_pixel
    bitmap_000.addr0 := address00[2,15]; bitmap_001.addr0 := address0[2,15]; bitmap_010.addr0 := address0[2,15]; bitmap_011.addr0 := address0[2,15];
    bitmap_100.addr0 := address10[2,15]; bitmap_101.addr0 := address1[2,15]; bitmap_110.addr0 := address1[2,15]; bitmap_111.addr0 := address1[2,15];

    // RENDER - Default to transparent
    always_after {
        {
            if( framebuffer[0,1] ) {
                switch( address0[0,2] ) {
                    case 2b00: { pixel0 = bitmap_000.rdata0; }
                    case 2b01: { pixel0 = bitmap_001.rdata0; }
                    case 2b10: { pixel0 = bitmap_010.rdata0; }
                    case 2b11: { pixel0 = bitmap_011.rdata0; }
                }
                readDataDirect = memoryAddressDirect[1,1] ? { bitmap_101.rdata0, bitmap_100.rdata0, bitmap_111.rdata0, bitmap_110.rdata0 } :
                                                            { bitmap_111.rdata0, bitmap_110.rdata0, bitmap_101.rdata0, bitmap_100.rdata0 };
            }
        }
        {
            if( framebuffer[1,1] ) {
                switch( address1[0,2] ) {
                    case 2b00: { pixel1 = bitmap_100.rdata0; }
                    case 2b01: { pixel1 = bitmap_101.rdata0; }
                    case 2b10: { pixel1 = bitmap_110.rdata0; }
                    case 2b11: { pixel1 = bitmap_111.rdata0; }
                }
                readDataDirect = memoryAddressDirect[1,1] ? { bitmap_001.rdata0, bitmap_000.rdata0, bitmap_011.rdata0, bitmap_010.rdata0 } :
                                                            { bitmap_011.rdata0, bitmap_010.rdata0, bitmap_001.rdata0, bitmap_000.rdata0 };
            }
        }

        { pixel = display256 ? framebuffer[1,1] ? pixel1 : framebuffer[0,1] ? pixel0 : 0 :
                               framebuffer[1,1] & ( pixel1 != 64 ) ? pixel1 : framebuffer[0,1] & ( pixel0 != 64 ) ? pixel0 : 64; }
        { bitmap_display = pix_active & |framebuffer & ( ( pixel != 64 ) | display256 ); }
    }
}

unit framebuffer_write(
    // Memory access direct to bitmap
    input   uint18  memoryAddressDirect,
    input   uint2   accesssize,
    input   uint1   memoryWriteDirect,
    input   uint32  writeDataDirect,

    // INPUTS FROM GPU QUEUE
    input   int11   bitmap_x_write,
    input   int11   bitmap_y_write,
    input   uint8   bitmap_colour_write,
    input   uint8   bitmap_colour_write_alt,
    input   uint1   bitmap_write,
    input   int11   bitmap_crop_left,
    input   int11   bitmap_crop_right,
    input   int11   bitmap_crop_top,
    input   int11   bitmap_crop_bottom,
    input   uint4   gpu_active_dithermode,

    // BITMAP TO WRITE
    input   uint2   framebuffer,
    simple_dualport_bram_port1 bitmap_000,
    simple_dualport_bram_port1 bitmap_001,
    simple_dualport_bram_port1 bitmap_010,
    simple_dualport_bram_port1 bitmap_011,
    simple_dualport_bram_port1 bitmap_100,
    simple_dualport_bram_port1 bitmap_101,
    simple_dualport_bram_port1 bitmap_110,
    simple_dualport_bram_port1 bitmap_111,

    input   uint8   static8bit
) <reginputs> {
    // DITHER PATTERN GENERATOR
    dither DODITHER( bitmap_x_write <: bitmap_x_write, bitmap_y_write <: bitmap_y_write, dithermode <: gpu_active_dithermode, static1bit <: static8bit[0,1] );
    uint8   pixeltowrite <:: ( gpu_active_dithermode == 14 ) ? ( static8bit == 64 ) ? 65 : static8bit :
                             DODITHER.condition ? bitmap_colour_write : bitmap_colour_write_alt;

    // Write in range?
    uint1   write_pixel <:: ( bitmap_x_write >= bitmap_crop_left ) & ( bitmap_x_write <= bitmap_crop_right ) &
                            ( bitmap_y_write >= bitmap_crop_top ) & ( bitmap_y_write <= bitmap_crop_bottom ) & bitmap_write;

    // WRITE ADDRESSES ACCORDING TO GPU WRITE OR CPU WRITE
    uint17  address <:: memoryWriteDirect ? memoryAddressDirect : bitmap_y_write[0,8] * 320 + bitmap_x_write[0,9];
    uint17  addressL <:: memoryAddressDirect + memoryAddressDirect[1,1] ? 2 : 0;

    // HIGH OR LOW SWITCH FOR MEMORY ADDRESS DIRECT WR(TING 32 bit
    uint1   bm0L <: memoryWriteDirect & accesssize[1,1] & ~memoryAddressDirect[17,1] & memoryAddressDirect[1,1];
    uint1   bm1L <: memoryWriteDirect & accesssize[1,1] & memoryAddressDirect[17,1] & memoryAddressDirect[1,1];

    // BITMAP WRITE FLAGS
    bitmap_000.wenable1 := 0; bitmap_001.wenable1 := 0; bitmap_010.wenable1 := 0; bitmap_011.wenable1 := 0;
    bitmap_100.wenable1 := 0; bitmap_101.wenable1 := 0; bitmap_110.wenable1 := 0; bitmap_111.wenable1 := 0;

    // BITMAP ADDRESSES
    bitmap_000.addr1 := bm0L ? addressL[2,15] : address[2,15]; bitmap_001.addr1 := bm0L ? addressL[2,15] : address[2,15];
    bitmap_010.addr1 := bm0L ? addressL[2,15] : address[2,15]; bitmap_011.addr1 := bm0L ? addressL[2,15] : address[2,15];
    bitmap_100.addr1 := bm1L ? addressL[2,15] : address[2,15]; bitmap_101.addr1 := bm1L ? addressL[2,15] : address[2,15];
    bitmap_110.addr1 := bm1L ? addressL[2,15] : address[2,15]; bitmap_111.addr1 := bm1L ? addressL[2,15] : address[2,15];

    always_after {
        {
            if( memoryWriteDirect ) {
                switch( accesssize ) {
                    case 2b00: {
                        if( memoryAddressDirect[17,1] ) {
                            switch( address[0,2] ) {
                                case 2b00: { bitmap_100.wdata1 = writeDataDirect[0,8]; bitmap_100.wenable1 = 1; }
                                case 2b01: { bitmap_101.wdata1 = writeDataDirect[0,8]; bitmap_101.wenable1 = 1; }
                                case 2b10: { bitmap_110.wdata1 = writeDataDirect[0,8]; bitmap_110.wenable1 = 1; }
                                case 2b11: { bitmap_111.wdata1 = writeDataDirect[0,8]; bitmap_111.wenable1 = 1; }
                            }
                        } else {
                            switch( address[0,2] ) {
                                case 2b00: { bitmap_000.wdata1 = writeDataDirect[0,8]; bitmap_000.wenable1 = 1; }
                                case 2b01: { bitmap_001.wdata1 = writeDataDirect[0,8]; bitmap_001.wenable1 = 1; }
                                case 2b10: { bitmap_010.wdata1 = writeDataDirect[0,8]; bitmap_010.wenable1 = 1; }
                                case 2b11: { bitmap_011.wdata1 = writeDataDirect[0,8]; bitmap_011.wenable1 = 1; }
                            }
                        }
                    }
                    case 2b01: {
                        if( memoryAddressDirect[17,1] ) {
                            if( memoryAddressDirect[1,1] ) {
                                bitmap_110.wdata1 = writeDataDirect[0,8]; bitmap_110.wenable1 = 1;
                                bitmap_111.wdata1 = writeDataDirect[8,8]; bitmap_111.wenable1 = 1;
                            } else {
                                bitmap_100.wdata1 = writeDataDirect[0,8]; bitmap_100.wenable1 = 1;
                                bitmap_101.wdata1 = writeDataDirect[8,8]; bitmap_101.wenable1 = 1;
                            }
                        } else {
                            if( memoryAddressDirect[1,1] ) {
                                bitmap_010.wdata1 = writeDataDirect[0,8]; bitmap_010.wenable1 = 1;
                                bitmap_011.wdata1 = writeDataDirect[8,8]; bitmap_011.wenable1 = 1;
                            } else {
                                bitmap_000.wdata1 = writeDataDirect[0,8]; bitmap_000.wenable1 = 1;
                                bitmap_001.wdata1 = writeDataDirect[8,8]; bitmap_001.wenable1 = 1;
                            }
                        }
                    }
                    default: {
                        if( memoryAddressDirect[17,1] ) {
                            if( memoryAddressDirect[1,1] ) {
                                bitmap_100.wdata1 = writeDataDirect[16,8]; bitmap_100.wenable1 = 1;
                                bitmap_101.wdata1 = writeDataDirect[24,8]; bitmap_101.wenable1 = 1;
                                bitmap_110.wdata1 = writeDataDirect[0,8]; bitmap_110.wenable1 = 1;
                                bitmap_111.wdata1 = writeDataDirect[8,8]; bitmap_111.wenable1 = 1;
                            } else {
                                bitmap_100.wdata1 = writeDataDirect[0,8]; bitmap_100.wenable1 = 1;
                                bitmap_101.wdata1 = writeDataDirect[8,8]; bitmap_101.wenable1 = 1;
                                bitmap_110.wdata1 = writeDataDirect[16,8]; bitmap_110.wenable1 = 1;
                                bitmap_111.wdata1 = writeDataDirect[24,8]; bitmap_111.wenable1 = 1;
                            }
                        } else {
                            if( memoryAddressDirect[1,1] ) {
                                bitmap_000.wdata1 = writeDataDirect[16,8]; bitmap_000.wenable1 = 1;
                                bitmap_001.wdata1 = writeDataDirect[24,8]; bitmap_001.wenable1 = 1;
                                bitmap_010.wdata1 = writeDataDirect[0,8]; bitmap_010.wenable1 = 1;
                                bitmap_011.wdata1 = writeDataDirect[8,8]; bitmap_011.wenable1 = 1;
                            } else {
                                bitmap_000.wdata1 = writeDataDirect[0,8]; bitmap_000.wenable1 = 1;
                                bitmap_001.wdata1 = writeDataDirect[8,8]; bitmap_001.wenable1 = 1;
                                bitmap_010.wdata1 = writeDataDirect[16,8]; bitmap_010.wenable1 = 1;
                                bitmap_011.wdata1 = writeDataDirect[24,8]; bitmap_011.wenable1 = 1;
                            }
                        }
                    }
                }
            }
        }

        {
            if( write_pixel & framebuffer[0,1] ) {
                switch( address[0,2] ) {
                    case 2b00: { bitmap_000.wdata1 = pixeltowrite; bitmap_000.wenable1 = 1; }
                    case 2b01: { bitmap_001.wdata1 = pixeltowrite; bitmap_001.wenable1 = 1; }
                    case 2b10: { bitmap_010.wdata1 = pixeltowrite; bitmap_010.wenable1 = 1; }
                    case 2b11: { bitmap_011.wdata1 = pixeltowrite; bitmap_011.wenable1 = 1; }
                }
            }
        }
        {
            if( write_pixel & framebuffer[1,1] ) {
                switch( address[0,2] ) {
                    case 2b00: { bitmap_100.wdata1 = pixeltowrite; bitmap_100.wenable1 = 1; }
                    case 2b01: { bitmap_101.wdata1 = pixeltowrite; bitmap_101.wenable1 = 1; }
                    case 2b10: { bitmap_110.wdata1 = pixeltowrite; bitmap_110.wenable1 = 1; }
                    case 2b11: { bitmap_111.wdata1 = pixeltowrite; bitmap_111.wenable1 = 1; }
                }
            }
        }
    }
}

unit bitmapwriter(
    // GPU Parameters
    input   int11   gpu_x,
    input   int11   gpu_y,
    input   uint8   gpu_colour,
    input   uint8   gpu_colour_alt,
    input   int11   gpu_param0,
    input   int11   gpu_param1,
    input   int11   gpu_param2,
    input   int11   gpu_param3,
    input   int11   gpu_param4,
    input   int11   gpu_param5,
    input   uint4   gpu_write,
    input   uint4   gpu_dithermode,

    // CROP RECTANGLE
    input   uint9   crop_left,
    input   uint9   crop_right,
    input   uint8   crop_top,
    input   uint8   crop_bottom,

    // Colours for the pixelblock
    input   uint1   pb_mode,
    input   uint8   pb_colour,
    input   uint8   pb_colour8r,
    input   uint8   pb_colour8g,
    input   uint8   pb_colour8b,
    input   uint2   pb_newpixel,

    // VECTOR BLOCK
    input   uint5   vector_block_number,
    input   uint8   vector_block_colour,
    input   int11   vector_block_xc,
    input   int11   vector_block_yc,
    input   uint3   vector_block_scale,
    input   uint3   vector_block_action,
    input   uint1   draw_vector,

    output  uint1   gpu_active,
    output  uint1   gpu_queue_full,
    output  uint1   gpu_queue_complete,
    output  uint1   vector_block_active,

    output  int11   bitmap_x_write,
    output  int11   bitmap_y_write,
    output  uint8   bitmap_colour_write,
    output  uint8   bitmap_colour_write_alt,
    output  uint1   bitmap_write,
    output  uint9   bitmap_crop_left,
    output  uint9   bitmap_crop_right,
    output  uint8   bitmap_crop_top,
    output  uint8   bitmap_crop_bottom,
    output  uint4   gpu_active_dithermode,

    simple_dualport_bram_port0 blit1tilemap,
    simple_dualport_bram_port0 characterGenerator8x8,
    simple_dualport_bram_port0 colourblittilemap,
    simple_dualport_bram_port0 vertex,
    simple_dualport_bram_port0 pb_colourmap
) <reginputs> {
    // VECTOR DRAWER UNIT
    vectors vector_drawer(
        vector_block_number <: vector_block_number,
        vector_block_xc <: vector_block_xc,
        vector_block_yc <: vector_block_yc,
        vector_block_scale <: vector_block_scale,
        vector_block_action <: vector_block_action,
        draw_vector <: draw_vector,
        vector_block_active :> vector_block_active,
        vertex <:> vertex,
        gpu_active <: QUEUE.gpu_active
    );

    // GPU QUEUE CONTROLLER, WITH OUTPUTS FOR WRITING PIXELS
    gpu_queue QUEUE(
        bitmap_x_write :> bitmap_x_write,
        bitmap_y_write :> bitmap_y_write,
        bitmap_colour_write :> bitmap_colour_write,
        bitmap_colour_write_alt :> bitmap_colour_write_alt,
        bitmap_write :> bitmap_write,
        bitmap_crop_left :> bitmap_crop_left,
        bitmap_crop_right :> bitmap_crop_right,
        bitmap_crop_top :> bitmap_crop_top,
        bitmap_crop_bottom :> bitmap_crop_bottom,
        gpu_active_dithermode :> gpu_active_dithermode,

        crop_left <: crop_left,
        crop_right <: crop_right,
        crop_top <: crop_top,
        crop_bottom <: crop_bottom,
        gpu_x <: gpu_x,
        gpu_y <: gpu_y,
        gpu_colour <: gpu_colour,
        gpu_colour_alt <: gpu_colour_alt,
        gpu_param0 <: gpu_param0,
        gpu_param1 <: gpu_param1,
        gpu_param2 <: gpu_param2,
        gpu_param3 <: gpu_param3,
        gpu_param4 <: gpu_param4,
        gpu_param5 <: gpu_param5,
        gpu_write <: gpu_write,
        gpu_dithermode <: gpu_dithermode,
        blit1tilemap <:> blit1tilemap,
        characterGenerator8x8 <:> characterGenerator8x8,
        colourblittilemap <:> colourblittilemap,
        pb_mode <: pb_mode,
        pb_colour <: pb_colour,
        pb_colour8r <: pb_colour8r,
        pb_colour8g <: pb_colour8g,
        pb_colour8b <: pb_colour8b,
        pb_newpixel <: pb_newpixel,
        pb_colourmap <:> pb_colourmap,
        vector_block_colour <: vector_block_colour,
        vector_drawer_gpu_x <: vector_drawer.gpu_x,
        vector_drawer_gpu_y <: vector_drawer.gpu_y,
        vector_drawer_gpu_param0 <: vector_drawer.gpu_param0,
        vector_drawer_gpu_param1 <: vector_drawer.gpu_param1,
        vector_drawer_gpu_write <: vector_drawer.gpu_write,
        vector_block_active <: vector_block_active,
        queue_full :> gpu_queue_full,
        queue_complete :> gpu_queue_complete,
        gpu_active :> gpu_active
    );
}

// DITHERMODE CALCULATIONS
unit dither(
    input   int11   bitmap_x_write,
    input   int11   bitmap_y_write,
    input   uint4   dithermode,
    input   uint1   static1bit,
    output! uint1   condition
) <reginputs> {
    always_after {
        // DITHER PATTERNS
        // == 0 SOLID == 1 SMALL CHECKERBOARD == 2 MED CHECKERBOARD == 3 LARGE CHECKERBOARD
        // == 4 VERTICAL STRIPES == 5 HORIZONTAL STRIPES == 6 CROSSHATCH == 7 LEFT SLOPE
        // == 8 RIGHT SLOPE == 9 LEFT TRIANGLE == 10 RIGHT TRIANGLE == 11 X
        // == 12 + == 13 BRICK == 14 COLOUR STATIC == 15 STATIC
        uint2   checkmode <:: dithermode[0,2] - 1;     uint3   revbitmapx <:: ~bitmap_x_write[0,3];

        switch( dithermode ) {
            case 0: { condition = 1; }                                                                                          // SOLID
            default: { condition = ( bitmap_x_write[checkmode,1] ^ bitmap_y_write[checkmode,1] ); }                             // CHECKERBOARDS 1 2 AND 3
            case 4: { condition = bitmap_x_write[0,1]; }                                                                        // VERTICAL STRIPES
            case 5: { condition = bitmap_y_write[0,1]; }                                                                        // HORIZONTAL STRIPES
            case 6: { condition = ( bitmap_x_write[0,1] | bitmap_y_write[0,1] ); }                                              // CROSSHATCH
            case 7: { condition = ( bitmap_x_write[0,2] == bitmap_y_write[0,2] ); }                                             // LEFT SLOPE
            case 8: { condition = ( bitmap_x_write[0,2] == ~bitmap_y_write[0,2] ); }                                            // RIGHT SLOPE
            case 9: { condition = ( bitmap_x_write[0,3] <= bitmap_y_write[0,3] ); }                                             // LEFT TRIANGLE
            case 10: { condition = ( revbitmapx <= bitmap_y_write[0,3] ); }                                                     // RIGHT TRIANGLE
            case 11: { condition = ( bitmap_x_write[0,3] == bitmap_y_write[0,3] ) | ( revbitmapx == bitmap_y_write[0,3] ); }    // X
            case 12: { condition = ( bitmap_x_write[1,2] == 2b10 ) | ( bitmap_y_write[1,2] == 2b10 ); }                         // +
            case 13: { condition = ( ~|bitmap_y_write[0,2] ) | ( bitmap_x_write[0,2] == { bitmap_y_write[2,1], 1b0 } ); }       // BRICK
            case 14: {}                                                                                                         // COLOUR STATIC (placeholder, done in main)
            case 15: { condition = static1bit; }                                                                                // STATIC
        }
    }
}
