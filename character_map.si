bitfield  charactermap {
    uint8   background,
    uint8   foreground,
    uint9   character
}

unit character_map(
    input   uint1   clockCG,

    dualport_bram_port0 charactermap,

    input   uint10  pix_x,
    input   uint9   pix_y,
    input   uint1   pix_active,
    input   uint1   pix_vblank,
    output! uint8   pixel,
    output! uint1   character_map_display,

    input   uint1   blink,
    input   uint7   cursor_x,
    input   uint6   cursor_y,
    input   uint8   tpu_foreground,
    input   uint8   tpu_background,
    input   uint1   tpu_showcursor
) <reginputs> {
    // Character ROM 8x8
    characterrom512 CGROM <@clockCG> ( tile <: charactermap(charactermap.rdata0).character, y <: pix_y[0,3] );

    // Character position on the screen x 0-79, y 0-59 * 80 ( fetch it 1 pixel ahead of the actual x pixel, so it is always ready )
    uint6   ycharacterpos <: ( ( pix_vblank ? 0 : pix_y ) >> 3 );
    uint13  ycharacteraddress <: 80 * ycharacterpos;

    // Derive the actual pixel in the current character + determine if cursor and visible/flashing
    uint1   characterpixel <:: CGROM.line[ ~pix_x[0,3], 1 ];
    uint1   is_cursor <:: tpu_showcursor & blink & ( cursor_x == ( pix_x >> 3 ) ) & ( cursor_y == ycharacterpos );

    // Set up reading of the charactermap
    charactermap.addr0 := ( ( pix_active ?  pix_x + 1 : 0 ) >> 3 ) + ycharacteraddress; charactermap.addr0 := ( ( pix_active ?  pix_x + 1 : 0 ) >> 3 ) + ycharacteraddress;
    charactermap.wenable0 := 0;

    // RENDER - Default to transparent
    always_after {
        character_map_display = pix_active & ( characterpixel | ( charactermap(charactermap.rdata0).background != 64 ) | is_cursor );
        pixel = is_cursor ? characterpixel ? tpu_background : tpu_foreground :
                            characterpixel ? charactermap(charactermap.rdata0).foreground : charactermap(charactermap.rdata0).background;
    }
}

unit cmcursorx(
    input   uint7   tpu_active_x,
    output  uint7   NEXT,
    output  uint1   ATLAST
) <reginputs> {
    always_after {
        ATLAST = ( tpu_active_x == 79 );
        NEXT = tpu_active_x + 1;
    }
}
unit cmcursory(
    input   uint6   tpu_active_y,
    output  uint6   NEXT,
) <reginputs> {
    always_after {
        NEXT = ( tpu_active_y == 59 ) ? 0 : tpu_active_y + 1;
    }
}
unit cmaddresses(
    input   uint7   tpu_active_x,
    input   uint6   tpu_active_y,
    input   uint6   tpu_y,
    output  uint13  WRITEADDR,
    output  uint13  YSTARTADDR,
    output  uint13  YENDADDR
) <reginputs> {
    always_after {
        WRITEADDR = tpu_active_x + tpu_active_y * 80;
        YSTARTADDR = tpu_y * 80;
        YENDADDR = YSTARTADDR + 80;
    }
}

unit character_map_writer(
    dualport_bram_port1 charactermap,

    // TPU to SET characters, background, foreground
    input   uint7   tpu_x,
    input   uint6   tpu_y,
    input   uint9   tpu_character,
    input   uint8   tpu_foreground,
    input   uint8   tpu_background,
    input   uint4   tpu_write,
    output  uint5   tpu_active,

    output  uint25  tpu_cell,
    output  uint25  curses_cell,

    input   uint8   curses_wipe_background,
    input   uint8   curses_wipe_foreground,

    output  uint7   cursor_x,
    output  uint6   cursor_y
) <reginputs> {
    // COPY OF CHARCTER MAP FOR THE CURSES BUFFER
    simple_dualport_bram uint25 charactermap_copy[4800] = uninitialized;

    // Counter for clearscreen/copyscreen/scroll
    uint13  tpu_start_cs_addr = uninitialized;      uint13  tpu_cs_addr = uninitialized;                uint13  tpu_cs_addr_next <:: tpu_cs_addr + 1;
    uint13  tpu_max_count = uninitialized;          uint13  tpu_cs_addr_prevline <:: tpu_cs_addr - 80;  uint1   tpu_cs_addr_lastline <:: ( tpu_cs_addr > 4719 );
    uint25  curses_wipe <:: { curses_wipe_background, curses_wipe_foreground, 9h0 };

    // TPU character position
    uint7   tpu_active_x = 0;                       cmcursorx TPUX( tpu_active_x <: tpu_active_x );
    uint6   tpu_active_y = 0;                       cmcursory TPUY( tpu_active_y <: tpu_active_y );

    // ADDRESS CALCULATIONS AND BRAM write access for the TPU
    cmaddresses TPUA( tpu_active_x <: tpu_active_x, tpu_active_y <: tpu_active_y, tpu_y <: tpu_y );
    charactermap.wenable1 := 0; charactermap_copy.wenable1 := 1;

    // OUTPUT FROM TPU/CURSES BUFFER AND CURSOR POSITION
    curses_cell := charactermap_copy.rdata0; tpu_cell := charactermap.rdata1;
    cursor_x := tpu_active_x; cursor_y := tpu_active_y;

    // CURSES COPY READ ADDRESS
    charactermap_copy.addr0 := ( |tpu_active[2,2] ) ? tpu_cs_addr : TPUA.WRITEADDR;

    algorithm <autorun> {
        while(1) {
            if( |tpu_active ) {
                tpu_cs_addr = tpu_start_cs_addr;
                while( tpu_cs_addr != tpu_max_count ) {
                    ++:
                    onehot( tpu_active ) {
                        case 0: {                                                                                                                           // TPU WIPE - WHOLE OR PARTIAL SCREEN (LINE)
                            charactermap.addr1 = tpu_cs_addr; charactermap.wdata1 = { 8h40, 8h40, 9h0 }; charactermap.wenable1 = 1;
                        }
                        case 1: { charactermap_copy.addr1 = tpu_cs_addr; charactermap_copy.wdata1 = curses_wipe; }                                          // CURSES WIPE
                        case 2: {                                                                                                                           // CURSES COPY
                            charactermap.addr1 = tpu_cs_addr; charactermap.wdata1 = charactermap_copy.rdata0; charactermap.wenable1 = 1;
                        }
                        case 3: {                                                                                                                           // CURSES SCROLL UP / DELETELN
                            charactermap_copy.addr1 = tpu_cs_addr_prevline; charactermap_copy.wdata1 = charactermap_copy.rdata0;                            // MOVE CHARACTERS UP
                            if( tpu_cs_addr_lastline ) {
                                ++:
                                charactermap_copy.addr1 = tpu_cs_addr; charactermap_copy.wdata1 = curses_wipe;                                              // WIPE LAST LINE
                            }
                        }
                        case 4: { charactermap_copy.addr1 = tpu_cs_addr; charactermap_copy.wdata1 = curses_wipe; }                                          // CURSES CLEAR TO EOL/BOT
                    }
                    tpu_cs_addr = tpu_cs_addr_next;
                }
                tpu_active = 0;
            }
        }
    }

    always_after {
        if( |tpu_write ) { tpu_start_cs_addr = 0; tpu_max_count = 4800; }                                           // Set default start and end points
        switch( tpu_write ) {
            default: {}
            case 1: {                                                                                               // Set cursor position
                ( tpu_active_x, tpu_active_y ) = copycoordinates( tpu_x, tpu_y );
            }
            case 2: {                                                                                               // Write character,foreground, background and move
                charactermap.addr1 = TPUA.WRITEADDR;
                charactermap.wdata1 = { tpu_background, tpu_foreground, tpu_character };
                charactermap.wenable1 = 1;
                if( TPUX.ATLAST ) {
                    tpu_active_x = 0; tpu_active_y = TPUY.NEXT;
                } else {
                    tpu_active_x = TPUX.NEXT;
                }
            }
            case 3: { tpu_active_x = 0; tpu_active_y = 0; tpu_active = 1; }                                         // Start tpucs
            case 4: { tpu_active = 1; tpu_start_cs_addr = TPUA.YSTARTADDR; tpu_max_count = TPUA.YENDADDR; }         // Start tpu_clearline
            case 5: {                                                                                               // Write character, foreground, background to curses buffer
                charactermap_copy.addr1 = TPUA.WRITEADDR;
                charactermap_copy.wdata1 = { tpu_background, tpu_foreground, tpu_character };
            }
            case 6: { tpu_active = 2;  }                                                                            // Start curses wipe
            case 7: { tpu_active = 4; }                                                                             // Start curses copy
            case 8: { tpu_active = 8; tpu_start_cs_addr = 80; }                                                     // Start curses scroll up
            case 9: { tpu_active = 8; tpu_start_cs_addr = TPUA.YSTARTADDR; }                                        // Start curses deleteln
            case 10: { tpu_active = 16; tpu_start_cs_addr = TPUA.WRITEADDR; tpu_max_count = TPUA.YENDADDR; }        // Start curses clear to eol
            case 11: { tpu_active = 16; tpu_start_cs_addr = TPUA.WRITEADDR; }                                       // Start curses clear to bot
            case 12: { charactermap.addr1 = TPUA.WRITEADDR; charactermap.wdata1 = { tpu_background, tpu_foreground, tpu_character }; charactermap.wenable1 = 1; } // Write directly to cell
        }
    }
}
