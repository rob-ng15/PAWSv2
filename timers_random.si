// Create seconds and milliseconds since boot
// Create 1hz (1 second counter)
unit timesinceboot(
    output  uint64  counter1hz(0),
    output  uint20  counter1mhz(0),
    input   uint64  newtime,
    input   uint1   resettime
) <reginputs> {
    uint5   counter25mhz = uninitialised;           uint1   MIN <:: ( ~|counter25mhz );                 uint1   MAX <:: ( counter1mhz == 1000000 );
    uint64  counter1hzp1 <:: counter1hz + 1;

    always_after {
        if( resettime ) {
            counter1hz = newtime;
            counter1mhz = 0;
            counter25mhz = 0;
        } else {
            switch( { MAX, MIN } ) {
                case 2b00: { counter25mhz = counter25mhz - 1; }
                case 2b01: { counter1mhz = counter1mhz + 1; counter25mhz = 25; }
                case 2b10: { counter1hz = counter1hzp1; counter1mhz =  0; }
                case 2b11: { counter1hz = counter1hzp1; counter1mhz = 0; counter25mhz = counter25mhz - 1; }
            }
        }
    }
}

// Create 1hz (1 second counter)
unit pulse1hz(
    output  uint16  counter1hz,
    input   uint1   resetCounter
) <reginputs> {
    uint25  counter25mhz = uninitialised;           uint1   MIN <:: ( ~|counter25mhz );

    always_after {
        if( resetCounter ) {
            counter1hz = 0; counter25mhz = 25000000;
        } else {
            if( MIN ) { counter1hz = counter1hz + 1; counter25mhz = 25000000; } else { counter25mhz = counter25mhz - 1; }
        }
    }
}

// Create 1khz (1 milli-second counter)
unit pulse1khz(
    output  uint16  counter1khz,
    input   uint16  resetCounter
) <reginputs> {
    uint15  counter25mhz = uninitialised;           uint1   MIN <:: ( ~|counter25mhz );                 uint1   RESET <:: ( |resetCounter );

    always_after {
        if( RESET ) {
            counter1khz = resetCounter; counter25mhz = 25000;
        } else {
            if( MIN ) { if( |counter1khz) { counter1khz = counter1khz - 1; } counter25mhz = 25000; } else { counter25mhz = counter25mhz - 1; }
        }
    }
}

// 16 bit random number generator
// Translation into Silice of LFSR_Plus.v
unit random(
    output  uint16  g_noise_out,
    output  uint16  u_noise_out,
) <reginputs> {
    uint16  rand_ff = 24b011000110111011010011101;                                  uint16 rand_ff_NEXT <:: { ( rand_ff[5,1] ^ rand_ff[3,1] ^ rand_ff[2,1] ^ rand_ff[0,1] ), rand_ff[1,15] };
    uint18  rand_en_ff = 24b001100010011011101100101;                               uint18 rand_en_ff_NEXT <:: { ( rand_en_ff[7,1] ^ rand_en_ff[0,1] ), rand_en_ff[1,17]};
    uint16  temp_u_noise3 = uninitialised;                                          uint16  temp_u_noise2 = uninitialised;
    uint16  temp_u_noise1 = uninitialised;                                          uint16  temp_u_noise0 = uninitialised;
    uint16  g_noise_NEXT <:: ( rand_en_ff[17,1] ) ? ( temp_u_noise3 + temp_u_noise2 + temp_u_noise1 + temp_u_noise0 + ( rand_en_ff[9,1] ? g_noise_out : 0 ) ) :
                             ( rand_en_ff[10,1] ) ? rand_ff : g_noise_out;
    uint16  u_noise_NEXT <:: ( rand_en_ff[17,1] ) ? rand_ff : u_noise_out;

    always_after {
        {
            temp_u_noise0 = temp_u_noise1; temp_u_noise1 = temp_u_noise2; temp_u_noise2 = temp_u_noise3;
            temp_u_noise3 = { rand_ff[15,1], rand_ff[15,1], rand_ff[2,13] };
        }
        {
            g_noise_out = g_noise_NEXT; u_noise_out = u_noise_NEXT; rand_en_ff = rand_en_ff_NEXT; rand_ff = rand_ff_NEXT;
        }
    }
}


// FIXED FLOAT 16.16 DIVISION ACCELERATOR
unit fixed_t_divide(
    input   uint1   start,
    output  uint1   busy(0),
    input   uint32  fixed_t_a,
    input   uint32  fixed_t_b,
    output  uint32  result
) <reginputs> {
    uint48  quotient = uninitialised;
    uint48  remainder = uninitialised;
    uint48  dividend <:: { fixed_t_a[31,1] ? -fixed_t_a : fixed_t_a, 16b0 };                                                    // LEFT ALIGN ABSOLUTE VALUE OF DIVIDEND
    uint48  divisor <:: { 16b0, fixed_t_b[31,1] ? -fixed_t_b : fixed_t_b };                                                     // RIGHT ALIGN ABSOLUTE VALUE OF DIVISOR
    uint48  temporary <:: { remainder[0,47], dividend[bit,1] };
    uint1   bitresult <:: __unsigned(temporary) >= __unsigned(divisor);
    uint6   bit(63);
    uint1   update = uninitialised;
    uint1   notdivzero <:: |fixed_t_b;

    update := 0; busy := start | ( ~&bit );

    algorithm <autorun> {
        while(1) {
            if( start & notdivzero ) { while( ~&bit ) { update = 1; } }                                     // ONLY RUN IF DIVISOR != 0
        }
    }

    // START DIVIDER AND EXTRACT RESULT
    always_after {
        { if( start & notdivzero ) { quotient = 0; } else { if( update ) { quotient[bit,1] = bitresult; } } }
        { if( start & notdivzero ) { remainder = 0; } else { if( update ) { remainder = __unsigned(temporary) - ( bitresult ? __unsigned(divisor) : 0 ); } } }
        { bit = start & notdivzero ? 47 : bit - update; }
        {
            result = notdivzero ? ( fixed_t_a[31,1] ^ fixed_t_b[31,1] ? -quotient : quotient ) : 32hffffffff;               // RESULT CORRECTLY SIGNED OR -1 FOR /0
        }
    }
}
