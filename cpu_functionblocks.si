// RISC V INSTRUCTION DECODER + REGISTER BLOCK
unit control(
    input   uint1   cacheselect,
    input   uint1   DMAACTIVE,
    input   uint1   SMT,
    input   uint1   COMMIT_SMT,
    input   uint32  instruction,
    output  uint5   opCode,
    output  uint3   function3,
    output  uint7   function7,
    output  uint5   rs1,
    output  uint5   rs2,
    output  uint5   rs3,
    output  uint5   rd,
    output  int32   immediateValue,
    input   uint1   frd,
    input   uint1   write,
    input   int32   result,
    output  int32   sourceReg1,
    output  int32   sourceReg2,
    output  int32   sourceReg1F,
    output  int32   sourceReg2F,
    output  int32   sourceReg3F,
    output  int32   sourceReg1abs,
    output  int32   sourceReg2abs,
    output  int32   sourceReg2neg,
    output  uint1   IS_AUIPCLUI,
    output  uint1   IS_JAL,
    output  uint1   IS_BRANCH,
    output  uint1   IS_ALUM,
    output  uint1   IS_ALUCLM,
    output  uint1   IS_CSR,
    output  uint1   IS_ATOMIC,
    output  uint1   IS_FPU,
    output  uint1   writeRegisterF,
    output  uint1   writeRegister,
    output  uint1   incPC,
    output  uint1   FASTPATH,
    output  uint1   FASTPATHFPU,
    output  uint1   IS_LOAD,
    output  uint1   IS_STORE,
    output  uint2   accesssize

) <reginputs> {
    // REGISTERS I integer x 2, F float x 3, 0 for main thread, 1 for SMT thread
    // Duplication is to allow for parallel read
    $$for i=0,1 do
        simple_dualport_bram int32 I1_$i$[32] = { 0, pad(uninitialized) };
        simple_dualport_bram int32 I2_$i$[32] = { 0, pad(uninitialized) };
        simple_dualport_bram int32 F1_$i$[32] = uninitialized;
        simple_dualport_bram int32 F2_$i$[32] = uninitialized;
        simple_dualport_bram int32 F3_$i$[32] = uninitialized;
    $$end

    // REGISTER WRITE SWITCH
    uint1   I0write <:: ~COMMIT_SMT & write & ~frd & |rd;  uint1   F0write <:: ~COMMIT_SMT & write & frd;
    uint1   I1write <:: COMMIT_SMT & write & ~frd & |rd;   uint1   F1write <:: COMMIT_SMT & write & frd;

    // CHECK FOR FLOAT LOAD/STORE ( 32 bit memory access )
    uint1   FLOAD <:: opCode == 5b00001;             uint1   FSTORE <:: opCode == 5b01001;

    $$for i=0,1 do
        I1_$i$.wenable1 := 0; I2_$i$.wenable1 := 0; F1_$i$.wenable1 := 0; F2_$i$.wenable1 := 0; F3_$i$.wenable1 := 0;
    $$end

    // INSTRUCTION ACTION FLAGS
    writeRegisterF := 0; writeRegister := 1; incPC := 1; FASTPATH := 1;

    always_before {
        // EXTRACT REGISTER NUMBERS FROM INSTRUCTION
        rs1 = Rtype(instruction).sourceReg1;
        rs2 = Rtype(instruction).sourceReg2;
        rs3 = R4type(instruction).sourceReg3;
        rd = Rtype(instruction).destReg;

        // PARSE INSTRUCTION
        opCode = instruction[2,5];
        function3 = Rtype(instruction).function3;
        function7 = Rtype(instruction).function7;
        immediateValue = { {20{instruction[31,1]}}, Itype(instruction).immediate };

        // SELECT SOURCE REGISTERS FROM APPROPRIATE HART
        $$for i=0,1 do
            I1_$i$.addr0 = rs1; I2_$i$.addr0 = rs2; F1_$i$.addr0 = rs1; F2_$i$.addr0 = rs2; F3_$i$.addr0 = rs3;
        $$end
        sourceReg1 = SMT ? I1_1.rdata0 : I1_0.rdata0;  sourceReg2 = SMT ? I2_1.rdata0 : I2_0.rdata0;
        sourceReg1F = SMT ? F1_1.rdata0 : F1_0.rdata0; sourceReg2F = SMT ? F2_1.rdata0 : F2_0.rdata0; sourceReg3F = SMT ? F3_1.rdata0 : F3_0.rdata0;
    }

    algorithm <autorun> {
        while(1) {
            // WRITE TO REGISTERS
            $$for i=0,1 do
                I1_$i$.addr1 = rd;  I2_$i$.addr1 = rd;  F1_$i$.addr1 = rd;  F2_$i$.addr1 = rd;  F3_$i$.addr1 = rd;
                I1_$i$.wdata1 = result; I2_$i$.wdata1 = result;
                F1_$i$.wdata1 = result; F2_$i$.wdata1 = result; F3_$i$.wdata1 = result;
                I1_$i$.wenable1 = I$i$write; I2_$i$.wenable1 = I$i$write;
                F1_$i$.wenable1 = F$i$write; F2_$i$.wenable1 = F$i$write; F3_$i$.wenable1 = F$i$write;
            $$end
        }
    }

    always_after {
        // GENERATE ABSOLUTE AND NEGATIVE OF REGISTERS FOR MULTIPLICATION, ADDITION AND INT -> FLOAT CONVERSION
        sourceReg1abs = sourceReg1[31,1] ? -sourceReg1 : sourceReg1;
        sourceReg2neg = -sourceReg2; sourceReg2abs = sourceReg2[31,1] ? sourceReg2neg : sourceReg2;

        // CLASSIFY THE INSTRUCTION TYPE
        IS_AUIPCLUI = ( opCode[0,3] == 3b101 );
        IS_JAL = ( opCode[2,3] == 3b110 ) & opCode[0,1];
        IS_BRANCH = ( opCode == 5b11000 );
        IS_ALUM = ( opCode == 5b01100 ) & ( function7 == 7b0000001 );
        IS_ALUCLM = ( opCode == 5b01100 ) & ~function3[2,1] & ( function7 == 7b0000101 );
        IS_CSR = ( opCode == 5b11100 );
        IS_ATOMIC =  ( opCode == 5b01011 );
        IS_FPU = ( opCode[3,2] == 2b10 );
        IS_LOAD = ( ~|opCode ) | FLOAD | ( IS_ATOMIC & ( function7 != 5b00011 ) );
        IS_STORE = ( opCode == 5b01000 ) | FSTORE | ( IS_ATOMIC & ( function7 != 5b00010 ) );

        // DETERMINE MEMORY ACCESS SIZE
        accesssize = DMAACTIVE ? 2b00 : cacheselect ? IS_ATOMIC | FLOAD | FSTORE ? 2b10 : function3[0,2] : 2b01;

        // DETERMINE CPU CONTROL FLAGS
        switch( opCode ) {
            case 5b01101: {}                        // LUI
            case 5b00101: {}                        // AUIPC
            case 5b11011: { incPC = 0; }            // JAL
            case 5b11001: { incPC = 0; }            // JALR
            case 5b11000: { writeRegister = 0; }    // BRANCH
            case 5b00000: {}                        // LOAD
            case 5b01000: { writeRegister = 0; }    // STORE
            case 5b00001: { writeRegisterF = 1; }   // FLOAT LOAD
            case 5b01001: { writeRegister = 0; }    // FLOAT STORE
            case 5b00011: {}                        // FENCE[I]
            case 5b11100: { FASTPATH = 0; }         // CSR
            case 5b01011: { FASTPATH = 0; }         // LR.W SC.W ATOMIC LOAD - MODIFY - STORE
            default: { FASTPATH = ~( opCode[4,1] | IS_ALUCLM | ( IS_ALUM & function3[2,1]) ); }    // FPU, CARRYLESS MULTIPLY OR INTEGER DIVIDE -> SLOWPATH ALL ELSE TO FASTPATH
        }
        FASTPATHFPU = opCode[2,1] & function7[4,1];
    }
}

// RISC-V ADDRESS GENERATOR
unit addressgenerator(
    input   uint32  instruction,
    input   int32   immediateValue,
    input   uint27  PC,
    input   int32   sourceReg1,
    output  uint32  AUIPCLUI,
    output  uint27  branchAddress,
    output  uint27  jumpAddress,
    output  uint27  loadAddress,
    output  uint27  storeAddress,
    output  uint27  nextPC,
    output  uint27  newPC,
    input   uint1   AMO,
    input   uint1   compressed,
    input   uint1   incPC,
    input   uint1   takeBranch
) <reginputs> {
    always_after {
        AUIPCLUI = { Utype(instruction).immediate_bits_31_12, 12b0 } + ( instruction[5,1] ? 0 : PC );
        branchAddress = { {20{Btype(instruction).immediate_bits_12}}, Btype(instruction).immediate_bits_11, Btype(instruction).immediate_bits_10_5, Btype(instruction).immediate_bits_4_1, 1b0 } + PC;
        jumpAddress = { {12{Jtype(instruction).immediate_bits_20}}, Jtype(instruction).immediate_bits_19_12, Jtype(instruction).immediate_bits_11, Jtype(instruction).immediate_bits_10_1, 1b0 } + PC;
        loadAddress = ( AMO ? 0 : immediateValue ) + sourceReg1;
        storeAddress = ( AMO ? 0 : { {20{instruction[31,1]}}, Stype(instruction).immediate_bits_11_5, Stype(instruction).immediate_bits_4_0 } ) + sourceReg1;

        nextPC = PC + ( compressed ? 2 : 4 );
        newPC = ( incPC ) ? ( takeBranch ? branchAddress : nextPC ) : ( instruction[3,1] ? jumpAddress : loadAddress );
    }
}

// PERFORM SIGN EXTENSION FOR 8 AND 16 BIT LOADS
unit signextend(
    input   uint16  readdata,
    input   uint1   is16or8,
    input   uint1   byteaccess,
    input   uint1   dounsigned,
    output  uint32  memory168
) <reginputs> {
    uint1   sign <:: ~dounsigned & ( is16or8 ? readdata[15,1] : readdata[ { byteaccess, 3b111 }, 1 ] );

    always_after {
        memory168 = is16or8 ? { {16{sign}}, readdata[0,16] } : { {24{sign}}, readdata[ { byteaccess, 3b000 }, 8 ] };
    }
}

// COMPARISONS
unit compare(
    input   int32   sourceReg1,
    input   int32   sourceReg2,
    input   int32   immediateValue,
    input   uint1   regimm,
    output  uint1   LT,
    output  uint1   LTU,
    output  uint1   EQ
) <reginputs> {
    int32   operand2 <:: regimm ? sourceReg2 : immediateValue;

    always_after {
        LT = __signed(sourceReg1) < __signed( operand2 );
        LTU = __unsigned(sourceReg1) < __unsigned( operand2 );
        EQ = sourceReg1 == ( operand2 );
    }
}

// BRANCH COMPARISIONS
unit branchcomparison(
    input   uint3   function3,
    input   int32   sourceReg1,
    input   int32   sourceReg2,
    input   uint1   LT,
    input   uint1   LTU,
    input   uint1   EQ,
    output  uint1   takeBranch
) <reginputs> {
    uint4   flags <:: { LTU, LT, 1b0, EQ };

    always_after {
        takeBranch = function3[0,1] ^ flags[ function3[1,2], 1 ];
    }
}

// COMPRESSED INSTRUCTION EXPANSION
unit compressed00(
    input   uint16  i16,
    output  uint30  i32
) <reginputs> {
    always_after {
        if( |i16[13,3] ) {
            if( i16[15,1] ) {
                // SW -> sw rs2', offset[6:2](rs1') { 110 uimm[5:3] rs1' uimm[2][6] rs2' 00 } -> { imm[11:5] rs2 rs1 010 imm[4:0] 0100011 }
                // FSW -> fsw rs2', offset[6:2](rs1') { 110 uimm[5:3] rs1' uimm[2][6] rs2' 00 } -> { imm[11:5] rs2 rs1 010 imm[4:0] 0100111 }
                i32 = { 5b0, CS(i16).ib_6, CS(i16).ib_5, {2b01,CS(i16).rs2_alt}, {2b01,CS(i16).rs1_alt}, 3b010, CS(i16).ib_4_3, CS(i16).ib_2, 2b0, { 4b0100, i16[13,1] } };
            } else {
                // LW -> lw rd', offset[6:2](rs1') { 010 uimm[5:3] rs1' uimm[2][6] rd' 00 } -> { imm[11:0] rs1 010 rd 0000011 }
                // FLW -> flw rd', offset[6:2](rs1') { 010 uimm[5:3] rs1' uimm[2][6] rd' 00 } -> { imm[11:0] rs1 010 rd 0000111 }
                i32 = { 5b0, CL(i16).ib_6, CL(i16).ib_5_3, CL(i16).ib_2, 2b00, {2b01,CL(i16).rs1_alt}, 3b010, {2b01,CL(i16).rd_alt}, { 4b0000, i16[13,1] } };
            }
        } else {
            // ADDI4SPN -> addi rd', x2, nzuimm[9:2] { 000, nzuimm[5:4|9:6|2|3] rd' 00 } -> { imm[11:0] rs1 000 rd 0010011 }
            i32 = { 2b0, CIu94(i16).ib_9_6, CIu94(i16).ib_5_4, CIu94(i16).ib_3, CIu94(i16).ib_2, 2b00, 5h2, 3b000, {2b01,CIu94(i16).rd_alt}, 5b00100 };
        }
    }
}
unit compressed01(
    input   uint16  i16,
    output  uint30  i32
) <reginputs> {
    always_after {
        switch( i16[13,3] ) {
            case 3b000: {
                // ADDI -> addi rd, rd, nzimm[5:0] { 000 nzimm[5] rs1/rd!=0 nzimm[4:0] 01 } -> { imm[11:0] rs1 000 rd 0010011 }
                // NOP if rd == 0 and nzimm == 5b000000
                i32 = { {7{CI50(i16).ib_5}}, CI50(i16).ib_4_0, CI50(i16).rd, 3b000, CI50(i16).rd, 5b00100 };
            }
            case 3b010: {
                // LI -> addi rd, x0, imm[5:0] { 010 imm[5] rd!=0 imm[4:0] 01 } -> { imm[11:0] rs1 000 rd 0010011 }
                i32 = { {7{CI50(i16).ib_5}}, CI50(i16).ib_4_0, 5h0, 3b000, CI(i16).rd, 5b00100 };
            }
            case 3b011: {
                if( CI(i16).rd == 2 ) {
                    // ADDI16SP -> addi x2, x2, nzimm[9:4] { 011 nzimm[9] 00010 nzimm[4|6|8:7|5] 01 } -> { imm[11:0] rs1 000 rd 0010011 }
                    i32 = { {3{CI94(i16).ib_9}}, CI94(i16).ib_8_7, CI94(i16).ib_6, CI94(i16).ib_5, CI94(i16).ib_4, 4b0000, 5h2, 3b000, 5h2, 5b00100 };
                } else {
                    // LUI -> lui rd, nzuimm[17:12] { 011 nzimm[17] rd!={0,2} nzimm[16:12] 01 } -> { imm[31:12] rd 0110111 }
                    i32 = { {15{CIlui(i16).ib_17}}, CIlui(i16).ib_16_12, CIlui(i16).rd, 5b01101 };
                }
            }
            case 3b100: {
                // MISC-ALU
                if( CBalu(i16).function2[1,1] ) {
                    if( CBalu(i16).function2[0,1] ) {
                        // CBalu(i16).logical2 -> SUB XOR OR AND
                        // 2b00 -> SUB -> sub rd', rd', rs2' { 100 0 11 rs1'/rd' 00 rs2' 01 } -> { 0100000 rs2 rs1 000 rd 0110011 }
                        // 2b01 -> XOR -> xor rd', rd', rs2' { 100 0 11 rs1'/rd' 01 rs2' 01 } -> { 0000000 rs2 rs1 100 rd 0110011 }
                        // 2b10 -> OR  -> or  rd', rd', rd2' { 100 0 11 rs1'/rd' 10 rs2' 01 } -> { 0000000 rs2 rs1 110 rd 0110011 }
                        // 2b11 -> AND -> and rd', rd', rs2' { 100 0 11 rs1'/rd' 11 rs2' 01 } -> { 0000000 rs2 rs1 111 rd 0110011 }
                        i32 = { { 1b0, ~|CBalu(i16).logical2, 5b00000 }, { 2b01, CBalu(i16).rs2_alt }, { 2b01, CBalu(i16).rd_alt },
                                ( ^CBalu(i16).logical2 ) ? { 1b1, CBalu(i16).logical2[1,1], 1b0 } : {3{CBalu(i16).logical2[0,1]}}, { 2b01, CBalu(i16).rd_alt }, 5b01100 };
                    } else {
                        // ANDI -> andi rd', rd', imm[5:0] { 100 imm[5], 10 rs1'/rd' imm[4:0] 01 } -> { imm[11:0] rs1 111 rd 0010011 }
                        i32 = { {7{CBalu50(i16).ib_5}}, CBalu50(i16).ib_4_0, { 2b01, CBalu50(i16).rd_alt }, 3b111, { 2b01, CBalu50(i16).rd_alt }, 5b00100 };
                    }
                } else {
                    // i16[10,1] -> SRLI SRAI
                    // 1b0 -> SRLI -> srli rd', rd', shamt[5:0] { 100 nzuimm[5] 00 rs1'/rd' nzuimm[4:0] 01 } -> { 0000000 shamt rs1 101 rd 0010011 }
                    // 1b1 -> SRAI -> srai rd', rd', shamt[5:0] { 100 nzuimm[5] 01 rs1'/rd' nzuimm[4:0] 01 } -> { 0100000 shamt rs1 101 rd 0010011 }
                    i32 = { { 1b0, i16[10,1], 5b00000 }, CBalu50(i16).ib_4_0, { 2b01, CBalu50(i16).rd_alt }, 3b101, { 2b01, CBalu50(i16).rd_alt }, 5b00100 };
                }
            }
            default: {
                if( i16[14,1] ) {
                    // 3b110 -> BEQZ -> beq rs1', x0, offset[8:1] { 110, imm[8|4:3] rs1' imm[7:6|2:1|5] 01 } -> { imm[12|10:5] rs2 rs1 000 imm[4:1|11] 1100011 }
                    // 3b111 -> BNEZ -> bne rs1', x0, offset[8:1] { 111, imm[8|4:3] rs1' imm[7:6|2:1|5] 01 } -> { imm[12|10:5] rs2 rs1 001 imm[4:1|11] 1100011 }
                    i32 = { {4{CB(i16).offset_8}}, CB(i16).offset_7_6, CB(i16).offset_5, 5h0, {2b01,CB(i16).rs1_alt}, { 2b00, i16[13,1] }, CB(i16).offset_4_3, CB(i16).offset_2_1, CB(i16).offset_8, 5b11000 };
                } else {
                    // 3b001 -> JAL -> jal x1, offset[11:1] { 001, imm[11|4|9:8|10|6|7|3:1|5] 01 } -> { imm[20|10:1|11|19:12] rd 1101111 }
                    // 3b101 -> J -> jal, x0, offset[11:1] { 101, imm[11|4|9:8|10|6|7|3:1|5] 01 } -> { imm[20|10:1|11|19:12] rd 1101111 }
                    i32 = { CJ(i16).ib_11, CJ(i16).ib_10, CJ(i16).ib_9_8, CJ(i16).ib_7, CJ(i16).ib_6, CJ(i16).ib_5, CJ(i16).ib_4, CJ(i16).ib_3_1, {9{CJ(i16).ib_11}}, 4h0, ~i16[15,1], 5b11011 };
                }
            }
        }
    }
}
unit compressed10(
    input   uint16  i16,
    output  uint30  i32
) <reginputs> {
    always_after {
        switch( i16[13,3] ) {
            case 3b000: {
                // SLLI -> slli rd, rd, shamt[5:0] { 000, nzuimm[5], rs1/rd!=0 nzuimm[4:0] 10 } -> { 0000000 shamt rs1 001 rd 0010011 }
                i32 = { 7b0000000, CI50(i16).ib_4_0, CI50(i16).rd, 3b001, CI50(i16).rd, 5b00100 };
            }
            case 3b100: {
                // J[AL]R / MV / ADD
                if( ~|CR(i16).rs2 ) {
                    // JR   -> jalr x0, rs1, 0 { 100 0 rs1 00000 10 } -> { imm[11:0] rs1 000 rd 1100111 }
                    // JALR -> jalr x1, rs1, 0 { 100 1 rs1 00000 10 } -> { imm[11:0] rs1 000 rd 1100111 }
                    i32 = { 12b0, CR(i16).rs1, 3b000, { 4b0000, i16[12,1]}, 5b11001 };
                } else {
                    // MV  -> add rd, x0, rs2 { 100 0 rd!=0 rs2!=0 10 }     -> { 0000000 rs2 rs1 000 rd 0110011 }
                    // ADD -> add rd, rd, rs2 { 100 1 rs1/rd!=0 rs2!=0 10 } -> { 0000000 rs2 rs1 000 rd 0110011 }
                    i32 = { 7b0000000, CR(i16).rs2, i16[12,1] ? CR(i16).rs1 : 5h0, 3b000, CR(i16).rs1, 5b01100 };
                }
            }
            default: {
                if( i16[15,1] ) {
                    // SWSP -> sw rs2, offset[7:2](x2) { 110 uimm[5][4:2][7:6] rs2 10 } -> { imm[11:5] rs2 rs1 010 imm[4:0] 0100011 }
                    // FSWSP -> fsw rs2, offset[7:2](x2) { 110 uimm[5][4:2][7:6] rs2 10 } -> { imm[11:5] rs2 rs1 010 imm[4:0] 0100111 }
                    i32 = { 4b0, CSS(i16).ib_7_6, CSS(i16).ib_5, CSS(i16).rs2, 5h2, 3b010, CSS(i16).ib_4_2, 2b00, { 4b0100, i16[13,1] } };
                } else {
                    // LWSP -> lw rd, offset[7:2](x2) { 011 uimm[5] rd uimm[4:2|7:6] 10 } -> { imm[11:0] rs1 010 rd 0000011 }
                    // FLWSP -> flw rd, offset[7:2](x2) { 011 uimm[5] rd uimm[4:2|7:6] 10 } -> { imm[11:0] rs1 010 rd 0000111 }
                    i32 = { 4b0, CI(i16).ib_7_6, CI(i16).ib_5, CI(i16).ib_4_2, 2b0, 5h2 ,3b010, CI(i16).rd, { 4b0000, i16[13,1] } };
                }
            }
        }
    }
}

// RISC-V MANDATORY CSR REGISTERS
unit counter40(
    input   uint1   update,
    output  uint40  counter(0)
) <reginputs> {
    always_after {
        counter = counter + update;
    }
}
unit counter40always(
    output  uint40  counter(0)
) <reginputs> {
    always_after {
        counter = counter + 1;
    }
}
unit csrf(
    output  uint8   CSRf(0),
    input   uint2   csr,
    input   uint8   writevalue,
    input   uint2   writetype,
    input   uint1   update,
    input   uint5   newflags
) <reginputs> {
    always_after {
        if( update ) {
            CSRf = newflags;
        } else {
            switch( csr ) {
                case 1: {
                    // CSRRW / CSRRWI
                    switch( writetype ) {
                        case 1: { CSRf[0,5] = writevalue[0,5]; }
                        case 2: { CSRf[5,3] = writevalue[0,3]; }
                        case 3: { CSRf = writevalue[0,8]; }
                        default: {}
                    }
                }
                case 2: {
                    // CSRRS / CSRRSI
                    switch( writetype ) {
                        case 1: { CSRf[0,5] = CSRf[0,5] | writevalue[0,5]; }
                        case 2: { CSRf[5,3] = CSRf[5,3] | writevalue[0,3]; }
                        case 3: { CSRf = CSRf | writevalue[0,8]; }
                        default: {}
                    }
                }
                case 3: {
                    // CSRRC / CSRRCI
                    switch( writetype ) {
                        case 1: { CSRf[0,5] = CSRf[0,5] & ~writevalue[0,5]; }
                        case 2: { CSRf[5,3] = CSRf[5,3] & ~writevalue[0,3]; }
                        case 3: { CSRf = CSRf & ~writevalue[0,8]; }
                        default: {}
                    }
                }
                default: {}
            }
        }
    }
}
unit CSRblock(
    input   uint1   start,
    input   uint1   SMT,
    input   uint32  instruction,
    input   uint3   function3,
    input   uint5   rs1,
    input   uint32  sourceReg1,
    input   uint1   incCSRinstret,
    input   uint1   updateFPUflags,
    input   uint5   FPUnewflags,
    output  uint5   FPUflags,
    output  uint32  result
) <reginputs> {
    // MAIN SYSTEM TIMER
    counter40always TIMER();

    // CPU HART CYCLE TIMERS
    counter40 CYCLE(); counter40 CYCLESMT();

    // CPU HART INSTRUCTION RETIRED COUNTERS
    counter40 INSTRET(); counter40 INSTRETSMT();

    // SWITCH BETWEEN IMMEDIATE OR REGISTER VALUE TO WRITE TO CSR
    uint32  writevalue <: function3[2,1] ? rs1 : sourceReg1;

    // FLOATING-POINT CSR FOR BOTH THREADS
    csrf CSRF0( csr <: instruction[20,2], writevalue <: writevalue );                                   // MAIN CSRf ( CSR(instruction).csr[0,2] )
    csrf CSRF1( csr <: instruction[20,2], writevalue <: writevalue );                                   // SMT CSRf  ( CSR(instruction).csr[0,2] )

    // UPDATE FLAGS FOR TIMERS, COUNTERS AND FPU-FLAGS
    CYCLE.update := ~SMT; CYCLESMT.update := SMT;
    INSTRET.update := incCSRinstret & ~SMT; INSTRETSMT.update := incCSRinstret & SMT;
    CSRF0.writetype := 0; CSRF1.writetype := 0; CSRF0.update := updateFPUflags & ~SMT;  CSRF1.update := updateFPUflags & SMT;

    // PASS PRESENT FPU FLAGS TO THE FPU
    FPUflags := SMT ? CSRF1.CSRf[0,5] : CSRF0.CSRf[0,5];

    algorithm <autorun> {
        while(1) {
            if( start & ~|CSR(instruction).csr[4,8] ) {
                switch( function3[0,2] ) {
                    case 2b00: {
                        // ECALL / EBBREAK
                    }
                    case 2b01: {
                        // CSRRW / CSRRWI
                        switch( { ~|rs1, function3[2,1] } ) {
                            case 2b10: {}
                            default: {
                                if( SMT ) { CSRF1.writetype = 1; } else { CSRF0.writetype = 1; }
                            }
                        }
                    }
                    default: {
                        if( |rs1 ) {
                            if( SMT ) { CSRF1.writetype = function3[0,2]; } else { CSRF0.writetype = function3[0,2]; }
                        }
                    }
                }
            }
        }
    }

    always_after {
        if( start ) {
            switch( CSR(instruction).csr[8,4] ) {
                case 4h0: {
                    switch( CSR(instruction).csr[0,2] ) {
                        case 2h1: { result = SMT ? CSRF1.CSRf[0,5] : CSRF0.CSRf[0,5];  }                        // frflags
                        case 2h2: { result = SMT ? CSRF1.CSRf[5,3] : CSRF0.CSRf[5,3]; }                         // frrm
                        case 2h3: { result = SMT ? CSRF1.CSRf : CSRF0.CSRf; }                                   // frcsr
                        default: { result = 0; }
                    }
                }
                case 4h3: { result = $CPUISA$; }
                case 4hc: {
                    switch( { CSR(instruction).csr[7,1], CSR(instruction).csr[0,2] } ) {
                        case 5h00: { result = SMT ? CYCLESMT.counter[0,32] : CYCLE.counter[0,32]; }
                        case 5h10: { result = SMT ? CYCLESMT.counter[32,8] : CYCLE.counter[32,8]; }
                        case 5h01: { result = TIMER.counter[0,32]; }
                        case 5h11: { result = TIMER.counter[32,8]; }
                        case 5h02: { result = SMT ? INSTRETSMT.counter[0,32] : INSTRET.counter[0,32]; }
                        case 5h12: { result = SMT ? INSTRETSMT.counter[32,8] : INSTRET.counter[32,8]; }
                        default: { result = 0; }
                    }
                    }
                case 4hf: { result = SMT; }                                                                     // HART ID
                default: { result = 0; }
            }

        }
    }
}
