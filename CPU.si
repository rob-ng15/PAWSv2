// RISC-ICE-V
// inspired by https://github.com/sylefeb/Silice/blob/master/projects/ice-v/ice-v.ice
//
// A simple Risc-V RV32IMAFC processor

// RISC-V - MAIN CPU LOOP
//          ALU FUNCTIONALITY LISTED IN ALU-

// ON CPU INSTRUCTION CACHE DEFINITIONS
$$ addr_width = 27

// L0 CACHE SIZES FOR HART ID 0 AND 1
// MAX size is 64 due to bram limits ( 32 is 1k )
// size and blocks must be a power of 2
$$ L0Isize = 32
$$ L0Icacheaddrwidth = clog2(L0Isize)

// HART 0 - MAIN
$$ L00Iblocks = 8
$$ L00Icount = clog2(L00Iblocks)
$$ L00Ipartaddresswidth = addr_width - 1 - L00Icount - L0Icacheaddrwidth
$$ L00Ipartaddressstart = 1 + L00Icount + L0Icacheaddrwidth
bitfield L00cacheI{ uint$L00Ipartaddresswidth$ tag, uint30 instruction, uint1 compressed, uint1 valid }

// HART 1 - SMT
$$ L01Iblocks = 2
$$ L01Icount = clog2(L01Iblocks)
$$ L01Ipartaddresswidth = addr_width - 1 - L01Icount - L0Icacheaddrwidth
$$ L01Ipartaddressstart = 1 + L01Icount + L0Icacheaddrwidth
bitfield L01cacheI{ uint$L01Ipartaddresswidth$ tag, uint30 instruction, uint1 compressed, uint1 valid }

unit PAWSCPU(
    input   uint1   clock_CPUdecoder,
    input   uint1   clock_cache,
    output  uint2   accesssize,
    output  uint$addr_width$  address(0),
    output  uint1   cacheselect(0),
    output  uint32  writedata,
    output  uint1   writememory,
    input   uint32  readdata,
    output  uint1   readmemory,
    input   uint1   memorybusy,

    // SMT
    input   uint1   SMTRUNNING,
    input   uint$addr_width$  SMTSTARTPC,

    // MINI DMA CONTROLLER
    input   uint$addr_width$  DMASOURCE,
    input   uint$addr_width$  DMASOURCEADD,
    input   uint$addr_width$  DMADEST,
    input   uint$addr_width$  DMADESTADD,
    input   uint$addr_width$  DMACOUNT,
    input   uint8   DMACYCLES,
    input   uint4   DMAMODE,
    input   uint8   DMASET,
    output! uint2   DMAACTIVE
) <reginputs> {
    // RESET COUNTER
    uint8  resetCounter = 8hff;                     uint8   resetNEXT <:: resetCounter - 1;

    // CPU REGISTERS AND THREAD SELECTION
    uint1   COMMIT = uninitialized;                 uint1   SMT = 0;
    uint32  instruction = uninitialized;            uint1   compressed = uninitialized;
    uint$addr_width$  pc = 0;                       uint$addr_width$  pc_next <:: SMT ? pc :  RV32CONTROL.newPC;                                        // HART 0 pc + UPDATE
    uint$addr_width$  pcSMT = uninitialized;        uint$addr_width$  pcSMT_next <:: SMT ? RV32CONTROL.newPC : SMTRUNNING ? pcSMT : SMTSTARTPC;         // HART 1 pc + update
    uint$addr_width$  PC <:: SMT ? pcSMT : pc;                                                                                                          // SELECT PC FOR THIS CYCLE

    // MEMORY CONTROL UNITS
    uint4 memorycontrols <: { FETCH.busy, LOAD.busy, STORE.busy, |DMAACTIVE };

    // RISC-V 32 BIT CONTROLLER
    uint32  result <:: RV32CONTROL.IS_FASTALU ? EXECUTEFAST.result : EXECUTESLOW.result;
    uint1   frd <:: RV32CONTROL.IS_FASTALU ? RV32CONTROL.writeRegisterF : EXECUTESLOW.frd;
    uint1   write <:: COMMIT & RV32CONTROL.writeRegister;
    control RV32CONTROL <@clock_CPUdecoder> (
        cacheselect <: cacheselect,
        DMAACTIVE <: DMA.DMAACTIVE,
        DMAACCESSSIZE <: DMA.DMAACCESSSIZE,
        SMT <:: SMT,
        frd <: frd,
        write <: write,
        result <: result,
        PC <: PC,
        instruction <: instruction,
        compressed <: compressed,
        accesssize :> accesssize
    );

    // MINI DMA CONTROLLER
    dma DMA(
        DMASOURCE <: DMASOURCE,
        DMASOURCEADD <: DMASOURCEADD,
        DMADEST <: DMADEST,
        DMADESTADD <: DMADESTADD,
        DMACOUNT <: DMACOUNT,
        DMACYCLES <: DMACYCLES,
        DMAMODE <: DMAMODE,
        DMASET <: DMASET,
        DMAACTIVE :> DMAACTIVE,
        readdata <: readdata,
        memorybusy <: memorybusy
    );

    // FETCH UNIT
    fetch FETCH(
        clock_CPUdecoder <: clock_CPUdecoder,
        readdata <: readdata,
        memorybusy <: memorybusy
    );

    // LOAD UNIT
    load LOAD(
        clock_CPUdecoder <: clock_CPUdecoder,
        accesssize <: accesssize,
        byteaccess <: RV32CONTROL.loadAddress[0,1],
        dounsigned <: RV32CONTROL.function3[2,1],
        readdata <: readdata,
        memorybusy <: memorybusy
    );

    // STORE VALUE SELECTION
    uint32  storeValue <:: RV32CONTROL.IS_FASTALU ? EXECUTEFAST.memoryoutput : EXECUTESLOW.memoryoutput;
    store STORE( memorybusy <: memorybusy );

    // EXECUTE MULTICYCLE INSTRUCTIONS, INTEGER DIVIDE, FPU, CSR AND ALU-A
    cpuexecuteSLOWPATH EXECUTESLOW(
        SMT <: SMT,
        instruction <: instruction,
        opCode <: RV32CONTROL.opCode,
        function3 <: RV32CONTROL.function3,
        function7 <: RV32CONTROL.function7,
        rs1 <: RV32CONTROL.rs1,
        rs2 <: RV32CONTROL.rs2,
        sourceReg1 <: RV32CONTROL.sourceReg1,
        sourceReg2 <: RV32CONTROL.sourceReg2,
        abssourceReg1 <: RV32CONTROL.sourceReg1abs,
        abssourceReg2 <: RV32CONTROL.sourceReg2abs,
        sourceReg1F <: RV32CONTROL.sourceReg1F,
        sourceReg2F <: RV32CONTROL.sourceReg2F,
        sourceReg3F <: RV32CONTROL.sourceReg3F,
        memoryinput <: LOAD.memoryinput,
        incCSRinstret <: COMMIT,
        isALUM <: RV32CONTROL.IS_ALUM,
        isALUCLM <: RV32CONTROL.IS_ALUCLM,
        isCSR <: RV32CONTROL.IS_CSR,
        isATOMIC <: RV32CONTROL.IS_ATOMIC,
        isFPU <: RV32CONTROL.IS_FPU,
        FASTPATHFPU <: RV32CONTROL.IS_FASTFPU
    );

    // EXECUTE SINGLE CYLE INSTRUCTIONS, MOST OF BASE PLUS INTEGER MULTIPLICATION
    cpuexecuteFASTPATH EXECUTEFAST(
        opCode <: RV32CONTROL.opCode,
        function3 <: RV32CONTROL.function3,
        function7 <: RV32CONTROL.function7,
        rs1 <: RV32CONTROL.rs1,
        rs2 <: RV32CONTROL.rs2,
        sourceReg1 <: RV32CONTROL.sourceReg1,
        sourceReg2 <: RV32CONTROL.sourceReg2,
        negSourceReg2 <: RV32CONTROL.sourceReg2neg,
        sourceReg2F <: RV32CONTROL.sourceReg2F,
        immediateValue <: RV32CONTROL.immediateValue,
        memoryinput <: LOAD.memoryinput,
        AUIPCLUI <: RV32CONTROL.AUIPCLUI,
        nextPC <: RV32CONTROL.nextPC,
        isALUMM <: RV32CONTROL.IS_ALUM,
        isLOAD <: RV32CONTROL.IS_LOAD,
        isAUIPCLUI <: RV32CONTROL.IS_AUIPCLUI,
        isJAL <: RV32CONTROL.IS_JAL,
        isFENCE <: RV32CONTROL.IS_FENCE,
        LT <: RV32CONTROL.LT,
        LTU <: RV32CONTROL.LTU
    );

    // SMALL ON CPU L0 CACHE - 1 per HART - RESET when pc == 0 @ START OF BIOS
    // L0 INSTRUCTION CACHE { tag, instruction, compressed, valid } split into units
    $$for i=0,(L00Iblocks-1) do
        simple_dualport_bram uint$32+L00Ipartaddresswidth$ L00cache_$i$ <@clock_cache,@clock> [$L0Isize$] = uninitialized;
    $$end
    $$for i=0,(L01Iblocks-1) do
        simple_dualport_bram uint$32+L01Ipartaddresswidth$ L01cache_$i$ <@clock_cache,@clock> [$L0Isize$] = uninitialized;
    $$end

    il00cache_read ICACHE_0 <@clock_cache> (
        $$for i=0,(L00Iblocks-1) do
            L0cache_$i$ <:> L00cache_$i$,
        $$end
        CLS <: ICACHE_0W.CLS,
        invalidate <: EXECUTEFAST.fenceACTIVE[0,1],
        address <: pc
    );
    il01cache_read ICACHE_1 <@clock_cache> (
        $$for i=0,(L01Iblocks-1) do
            L0cache_$i$ <:> L01cache_$i$,
        $$end
        CLS <: ICACHE_1W.CLS,
        invalidate <: EXECUTEFAST.fenceACTIVE[0,1],
        address <: pcSMT
    );
    il00cache_write ICACHE_0W(
        $$for i=0,(L00Iblocks-1) do
            L0cache_$i$ <:> L00cache_$i$,
        $$end
        address <: pc, newinstruction <: instruction[2,30], newcompressed <: compressed,
        invalidate <: EXECUTEFAST.fenceACTIVE[0,1]
    );
    il01cache_write ICACHE_1W(
        $$for i=0,(L01Iblocks-1) do
            L0cache_$i$ <:> L01cache_$i$,
        $$end
        address <: pcSMT, newinstruction <: instruction[2,30], newcompressed <: compressed,
        invalidate <: EXECUTEFAST.fenceACTIVE[0,1]
    );
    uint1   L0match <:: ( ~SMT & ICACHE_0.tagmatch ) | ( SMT & ICACHE_1.tagmatch );
    uint32  L0instruction <:: { SMT ? ICACHE_1.instruction : ICACHE_0.instruction, 2b11 };
    uint1   L0compressed <:: SMT ? ICACHE_1.compressed : ICACHE_0.compressed;
    uint1   ICACHEUPDATE = uninitialised;
    ICACHE_0W.update := 0; ICACHE_1W.update := 0;

    // CONTROLS FOR MEMORY ACCESSES AND UNIT START FLAGS
    FETCH.start := 0; LOAD.start := 0; STORE.start := 0; DMA.start := 0; EXECUTESLOW.start := 0; COMMIT := 0; ICACHEUPDATE := 0;

    algorithm <autorun> {
        while( |resetCounter | memorybusy | EXECUTESLOW.busy ) { resetCounter = resetNEXT; }                                        // WAIT FDR MEMORY AND CPU TO FINISH + DELAY FOR RESET
        cacheselect = 0; FETCH.start = ~L0match;                                                                                    // START FETCH FIRST INSTRUCTION

        while(1) {
            // CPU LOOP, CONTINUE UNTIL DMA REQUEST, THEN RESTART AT FETCH
            while( ~|DMAMODE ) {
                RV32CONTROL.COMMIT_SMT = SMT;
                if( L0match ) {                                                                                                     // COMPLETE FETCH INSTRUCTION
                    instruction =  L0instruction; compressed = L0compressed;                                                            // FROM CACHE
                } else {
                    if( FETCH.busy ) { while( FETCH.busy ) {}  } else { cacheselect = 0; }                                              // FROM MEMORY
                    instruction = FETCH.instruction; compressed = FETCH.compressed;
                }
                // DECODE, REGISTER FETCH, ADDRESS GENERATION AUTOMATICALLY TAKES PLACE AS SOON AS THE INSTRUCTION IS LOADED
                ICACHEUPDATE = 1; cacheselect = 1; ++:                                                                              // SWITCH TO DATA CACHE, UPDATE ICACHE

                switch( { RV32CONTROL.IS_LOAD, RV32CONTROL.IS_FASTALU, RV32CONTROL.IS_STORE } ) {
                    case 3b000: { EXECUTESLOW.start = 1; while( EXECUTESLOW.busy ) {} }                                         // DIVISION, CLMUL, FLOATING POINT, CSR
                    case 3b010: {}                                                                                              // FAST PATH - ALL BASE + MULTIPLICATION + B EXTENSION (except CLMUL)
                    case 3b011: { STORE.start = 1; while( STORE.busy ) {} }                                                         // INTEGER + FLOAT STORE
                    case 3b110: { LOAD.start = 1; while( LOAD.busy ) {} }                                                           // INTEGER + FLOAT LOAD
                    default: {                                                                                                      // ATOMIC LOAD - MODIFY - STORE
                        LOAD.start = RV32CONTROL.IS_LOAD; while( LOAD.busy ) {}                                                     // + EMULATION OF LR.W AND SC.W
                        EXECUTESLOW.start = ~RV32CONTROL.IS_FASTALU; while( EXECUTESLOW.busy ) {}
                        STORE.start = RV32CONTROL.IS_STORE; while( STORE.busy ) {}
                    }
                }
                COMMIT = 1; pc = pc_next; pcSMT = pcSMT_next; if( ~EXECUTEFAST.fenceACTIVE[1,1] ) { SMT = ~SMT & SMTRUNNING; } ++:  // COMMIT REGISTERS< AND UPDATE PC AND SWITCH THREADS IF SMT ENABLED

                if( ~|DMAMODE ) { cacheselect = 0; FETCH.start = ~L0match; }                                                        // START FETCH OF NEXT INSTRUCTION IF NO DMA REQUEST
            } // RISC-V CPU LOOP, EXIT TO PROCESS DMA REQUEST

            DMA.start = 1; while( |DMAACTIVE | |DMAMODE ) {}                                                                        // PROCESS MINI-DMA ENGINE REQUESTS
            cacheselect = 0; FETCH.start = ~L0match;                                                                                // START FETCH OF NEXT INSTRUCTION IF NOT IN ICACHE
        }
    }

    always_after {
        {
            if( |memorycontrols ) {
                onehot( memorycontrols ) {
                    case 0: { address = DMA.address; writedata = DMA.writedata; }                                                           // COPY MEMORY REQUESTS FROM DMA ENGINE
                    case 1: { address = RV32CONTROL.storeAddress; writedata = storeValue; }                                                 // COPY MEMORY REQUESTS FROM THE STORE UNIT
                    case 2: { address = RV32CONTROL.loadAddress; }                                                                          // COPY MEMORY REQUESTS FROM THE LOAD UNIT
                    case 3: { address = PC; }                                                                                               // COPY MEMORY REQUESTS FROM INSTRUCTION FETCH
                }
            }
        }

        {
            if( ICACHEUPDATE ) { ICACHE_0W.update = ~SMT; ICACHE_1W.update = SMT; }
        }

        {
            readmemory = DMA.readmemory | LOAD.readmemory | FETCH.readmemory; writememory = DMA.writememory | STORE.writememory;
        }
    }
}

// HART ID 0 L0 CACHE
unit il00cache_read(
$$for i=0,(L00Iblocks-1) do
    simple_dualport_bram_port0 L0cache_$i$,
$$end
    input   uint$addr_width$  address,
    input   uint1   invalidate,
    input   uint1   CLS,
    output  uint30  instruction,
    output  uint1   compressed,
    output  uint1   tagmatch
) <reginputs> {
    always_after {
        {
            $$for i=0,(L00Iblocks-1) do
                L0cache_$i$.addr0 = address[$1+L00Icount$,$L0Icacheaddrwidth$];
            $$end
        }

        {
            if( invalidate | CLS  ) {
                tagmatch = 0;
            } else {
                switch( address[1,$L00Icount$] ) {
                    $$for i=0,(L00Iblocks-1) do
                        case $i$: { tagmatch = ( L00cacheI ( L0cache_$i$.rdata0 ).tag == address[$L00Ipartaddressstart$,$L00Ipartaddresswidth$] ) & L00cacheI( L0cache_$i$.rdata0 ).valid;
                                    instruction = L00cacheI( L0cache_$i$.rdata0 ).instruction; compressed =  L00cacheI( L0cache_$i$.rdata0 ).compressed; }
                    $$end
                }
            }
        }
    }
}

unit il00cache_write(
$$for i=0,(L00Iblocks-1) do
    simple_dualport_bram_port1 L0cache_$i$,
$$end
    input   uint$addr_width$  address,
    input   uint30  newinstruction,
    input   uint1   newcompressed,
    input   uint1   update,
    input   uint1   invalidate,
    output  uint1   CLS
) <reginputs> {
    uint$L0Icacheaddrwidth+1$ count = uninitialised;

    $$for i=0,(L00Iblocks-1) do
        L0cache_$i$.wenable1 := 1;
    $$end

    CLS := ( count != $L0Isize$ );

    always_after {
        switch( { CLS, invalidate } ) {
            case 2b00: {
                if( update ) {
                    switch( address[1,$L00Icount$] ) {
                        $$for i=0,(L00Iblocks-1) do
                            case $i$: {
                                L0cache_$i$.addr1 = address[$1+L00Icount$,$L0Icacheaddrwidth$];
                                L0cache_$i$.wdata1 = { address[$L00Ipartaddressstart$,$L00Ipartaddresswidth$], newinstruction, newcompressed, 1b1 };
                            }
                        $$end
                    }
                }
            }
            case 2b10: {
                $$for i=0,(L00Iblocks-1) do
                    L0cache_$i$.addr1 = count; L0cache_$i$.wdata1 = 0;
                $$end
                count = count + 1;
            }
            default: { count = 0; }
        }
    }
}

// HART ID 1 L0 CACHE
unit il01cache_read(
$$for i=0,(L01Iblocks-1) do
    simple_dualport_bram_port0 L0cache_$i$,
$$end
    input   uint$addr_width$  address,
    input   uint1   invalidate,
    input   uint1   CLS,
    output  uint30  instruction,
    output  uint1   compressed,
    output  uint1   tagmatch
) <reginputs> {
    always_after {
        {
            $$for i=0,(L01Iblocks-1) do
                L0cache_$i$.addr0 = address[$1+L01Icount$,$L0Icacheaddrwidth$];
            $$end
        }

        {
            if( invalidate | CLS ) {
                tagmatch = 0;
            } else {
                switch( address[1,$L01Icount$] ) {
                    $$for i=0,(L01Iblocks-1) do
                        case $i$: { tagmatch = ( L01cacheI( L0cache_$i$.rdata0 ).tag == address[$L01Ipartaddressstart$,$L01Ipartaddresswidth$] ) & L01cacheI ( L0cache_$i$.rdata0 ).valid;
                                    instruction = L01cacheI( L0cache_$i$.rdata0 ).instruction; compressed =  L01cacheI( L0cache_$i$.rdata0 ).compressed; }
                    $$end
                }
            }
        }
    }
}

unit il01cache_write(
$$for i=0,(L01Iblocks-1) do
    simple_dualport_bram_port1 L0cache_$i$,
$$end
    input   uint$addr_width$  address,
    input   uint30  newinstruction,
    input   uint1   newcompressed,
    input   uint1   update,
    input   uint1   invalidate,
    output  uint1   CLS
) <reginputs> {
    uint$L0Icacheaddrwidth+1$ count = uninitialised;

    $$for i=0,(L01Iblocks-1) do
        L0cache_$i$.wenable1 := 1;
    $$end

    CLS := ( count != $L0Isize$ );

    always_after {
        switch( { CLS, invalidate } ) {
            case 2b00: {
                if( update ) {
                    switch( address[1,$L01Icount$] ) {
                        $$for i=0,(L01Iblocks-1) do
                            case $i$: {
                                L0cache_$i$.addr1 = address[$1+L01Icount$,$L0Icacheaddrwidth$];
                                L0cache_$i$.wdata1 = { address[$L01Ipartaddressstart$,$L01Ipartaddresswidth$], newinstruction, newcompressed, 1b1 };
                            }
                        $$end
                    }
                }
            }
            case 2b10: {
                $$for i=0,(L01Iblocks-1) do
                    L0cache_$i$.addr1 = count; L0cache_$i$.wdata1 = 0;
                $$end
                count = count + 1;
            }
            default: { count = 0; }
        }
    }
}

unit cpuexecuteSLOWPATH(
    input   uint1   start,
    output  uint1   busy(0),
    input   uint1   SMT,
    input   uint32  instruction,
    input   uint5   opCode,
    input   uint3   function3,
    input   uint7   function7,
    input   uint5   rs1,
    input   uint5   rs2,
    input   int32   sourceReg1,
    input   int32   sourceReg2,
    input   int32   abssourceReg1,
    input   int32   abssourceReg2,
    input   uint32  sourceReg1F,
    input   uint32  sourceReg2F,
    input   uint32  sourceReg3F,
    input   int32   memoryinput,
    output  uint1   frd,
    output  int32   memoryoutput,
    output  int32   result,
    input   uint1   incCSRinstret,
    input   uint1   isCSR,
    input   uint1   isATOMIC,
    input   uint1   isFPU,
    input   uint1   isALUM,
    input   uint1   isALUCLM,
    input   uint1   FASTPATHFPU
) <reginputs> {
    // M EXTENSION - DIVISION
    aluMD ALUMD( function3 <: function3[0,2], sourceReg1 <: sourceReg1, sourceReg2 <: sourceReg2, abssourceReg1 <: abssourceReg1, abssourceReg2 <: abssourceReg2 );

    // ATOMIC MEMORY OPERATIONS
    aluA ALUA( function7 <: function7, memoryinput <: memoryinput, sourceReg2 <: sourceReg2 );

    // B EXTENSION - CLMUL
    aluCLMUL ALUBCLMUL( function3 <: function3[0,2], sourceReg1 <: sourceReg1, sourceReg2 <: sourceReg2 );

    // FLOATING POINT REGISTERS CLASSIFICATION
    classifyF class1F( a <: sourceReg1F ); classifyF class2F( a <: sourceReg2F ); classifyF class3F( a <: sourceReg3F );

    // FLOATING POINT SLOW OPERATIONS - CALCULATIONS AND CONVERSIONS
    floatconvert FPUCONVERT(
        FPUflags <: CSR.FPUflags,
        function7 <: function7[2,5], rs2 <: rs2[0,1],
        sourceReg1 <: sourceReg1, abssourceReg1 <: abssourceReg1, sourceReg1F <: sourceReg1F,
        classA <: class1F.class
    );

    floatcalc FPUCALC(
        FPUflags <: CSR.FPUflags,
        opCode <: opCode, function7 <: function7[2,5],
        sourceReg1F <: sourceReg1F, sourceReg2F <: sourceReg2F, sourceReg3F <: sourceReg3F,
        classA <: class1F.class, classB <: class2F.class, classC <: class3F.class
    );

    // FLOATING POINT FAST OPERATIONS
    fpufast FPUFAST(
        FPUflags <: CSR.FPUflags,
        function3 <: function3[0,2], function7 <: function7[2,5],
        sourceReg1 <: sourceReg1, sourceReg1F <: sourceReg1F, sourceReg2F <: sourceReg2F,
        classA <: class1F.class, classB <: class2F.class
    );

    // MANDATORY RISC-V CSR REGISTERS + HARTID == 0 MAIN THREAD == 1 SMT THREAD
    uint5   FPUnewflags <:: FASTPATHFPU ? FPUFAST.FPUnewflags : fpuconvert ? FPUCONVERT.FPUnewflags : FPUCALC.FPUnewflags;
    CSRblock CSR(
        SMT <: SMT,
        instruction <: instruction,
        function3 <: function3,
        rs1 <: rs1,
        sourceReg1 <: sourceReg1,
        FPUnewflags <: FPUnewflags,
        incCSRinstret <: incCSRinstret
    );

    // Classify the instruction
    uint1   fpuconvert <:: ( opCode == 5b10100 ) & ( function7[4,3] == 3b110 );
    uint1   fpufast <:: ( isFPU & FASTPATHFPU ) | fpuconvert;
    uint1   fpucalc <:: isFPU & ~fpufast;
    uint4   operation <:: { ~|{fpufast,isATOMIC,isCSR}, fpufast, isATOMIC, isCSR };

    // START AND BUSY FLAGS
    uint1   unitbusy <:: ( FPUCALC.busy | ALUMD.busy | ALUBCLMUL.busy );
    ALUMD.start := start & isALUM;                                                                                      // INTEGER DIVISION
    ALUBCLMUL.start := start & isALUCLM;                                                                                // CARRYLESS MULTIPLY
    FPUCALC.start := start & fpucalc;                                                                                   // FPU CALCULATIONS
    CSR.start := start & isCSR & |function3;                                                                            // CSR

    // Deal with updating fpuflags and writing to fpu registers
    CSR.updateFPUflags := 0; frd := fpuconvert ? FPUCONVERT.frd : fpufast ? FPUFAST.frd : fpucalc ? 1 : 0;

    algorithm <autorun> {
        // PROVIDE WAIT STATE FOR APPROPRIATE OPERATION
        while(1) {
            if( start ) {
                busy = 1;
                if( operation[3,1] ) {
                    while( unitbusy ) {} busy = 0;                                                                      // FPU CALCULATIONS AND INTEGER DIVISION
                } else { ++: }                                                                                          // CSR, ATOMIC OPERATIONS, // FPU FAST COMPARE, MIN/MAX, CLASS, MOVE, CONVERT
                busy = 0;
                CSR.updateFPUflags = fpuconvert | fpucalc;
            }
        }
    }

    // COLLECT THE APPROPRIATE RESULT
    always_after {
        if( busy ) {
            onehot( operation ) {
                case 0: { result = |function3 ? CSR.result : 0; }                                                       // CSR
                case 1: {
                    if( function7[3,1] ) {
                        result = memoryinput; memoryoutput = ALUA.result;                                               // ATOMIC LOAD - MODIFY - STORE
                    } else {
                        result = function7[2,1] ? 0 : memoryinput;                                                      // LR.W SC.W
                        memoryoutput = sourceReg2;
                    }
                }
                case 2: { result = fpuconvert ? FPUCONVERT.result : FPUFAST.result; }                                   // FPU FAST COMPARE, MIN/MAX, CLASS, MOVE, CONVERT
                case 3: { result = fpucalc ? FPUCALC.result : function3[2,1] ? ALUMD.result : ALUBCLMUL.result; }       // FPU CALCULATIONS AND INTEGER DIVISION
            }
        }
    }
}

unit cpuexecuteFASTPATH(
    input   uint5   opCode,
    input   uint3   function3,
    input   uint7   function7,
    input   uint5   rs1,
    input   uint5   rs2,
    input   int32   sourceReg1,
    input   int32   sourceReg2,
    input   int32   negSourceReg2,
    input   uint32  sourceReg2F,
    input   int32   immediateValue,
    input   int32   memoryinput,
    input   uint32  AUIPCLUI,
    input   uint32  nextPC,
    input   uint1   isALUMM,
    input   uint1   isLOAD,
    input   uint1   isAUIPCLUI,
    input   uint1   isJAL,
    input   uint1   isFENCE,
    output  int32   memoryoutput,
    output  int32   result,
    input   uint1   LT,
    input   uint1   LTU,
    output  uint2   fenceACTIVE(0)
) <reginputs> {
    // ALU
    alu ALU(
        opCode <: opCode, function3 <: function3, function7 <: function7,
        rs1 <: rs1, rs2 <: rs2,
        sourceReg1 <: sourceReg1, sourceReg2 <: sourceReg2, negSourceReg2 <: negSourceReg2,
        immediateValue <: immediateValue,
        LT <: LT, LTU <: LTU
    );

    // M EXTENSION - MULTIPLICATION
    aluMM ALUMM( function3 <: function3[0,2], sourceReg1 <: sourceReg1, sourceReg2 <: sourceReg2 );

    always_after {
        memoryoutput = opCode[0,1] ? sourceReg2F : sourceReg2;          // FLOAT STORE OR STORE
        result = isAUIPCLUI ? AUIPCLUI :                                // LUI AUIPC
                            isJAL ? nextPC :                            // JAL[R]
                            isLOAD ? memoryinput :                      // [FLOAT]LOAD
                            isALUMM ? ALUMM.result : ALU.result;        // INTEGER ALU AND MULTIPLICATION
        if( isFENCE ) {
            fenceACTIVE = { |function7[1,2], ~function3[0,1] };         // SET FENCE ACTIVE, { IO, MEM }, IO STOPS THREAD SWITCHING, MEM RESETS L0CACHE (after load)
        }
    }
}

// FETCH UNIT, INCLUDING COMPRESSED INSTRUCTION EXPANSION
unit fetch(
    input   uint1   clock_CPUdecoder,
    input   uint1   start,
    output! uint1   busy(0),
    output  uint32  instruction,
    output  uint1   compressed,

    input!  uint32  readdata,
    output! uint1   readmemory,
    input!  uint1   memorybusy
) <reginputs> {
    // COMPRESSED INSTRUCTION EXPANDER
    compressed00 COMPRESSED00 <@clock_CPUdecoder> ( i16 <: readdata[0,16] );
    compressed01 COMPRESSED01 <@clock_CPUdecoder> ( i16 <: readdata[0,16] );
    compressed10 COMPRESSED10 <@clock_CPUdecoder> ( i16 <: readdata[0,16] );

    readmemory := 0;

    algorithm <autorun> {
        while(1) {
            if( start ) {
                busy = 1; readmemory = 1; while( memorybusy ) {}                                                                        // FETCH INSTRUCTION ( 32 bits )
                compressed = ( ~&readdata[0,2] );
                switch( readdata[0,2] ) {                                                                                                   // EXPAND COMPRESSED INSTRUCTION
                    case 2b00: { instruction = { COMPRESSED00.i32, 2b11 }; }
                    case 2b01: { instruction = { COMPRESSED01.i32, 2b11 }; }
                    case 2b10: { instruction = { COMPRESSED10.i32, 2b11 }; }
                    default: { instruction = readdata; }
                }
                busy = 0;
            } else { busy = 0; }
        }
    }
}

// LOAD UNIT - INCLUDING SIGN EXTENSION FOR 8/16 BIT SIGNED LOADS
unit signextend(
    input   uint16  readdata,
    input   uint1   is16or8,
    input   uint1   byteaccess,
    input   uint1   dounsigned,
    output  uint32  memory168
) <reginputs> {
    uint1   sign <:: ~dounsigned & ( is16or8 ? readdata[15,1] : readdata[ { byteaccess, 3b111 }, 1 ] );

    always_after {
        memory168 = is16or8 ? { {16{sign}}, readdata[0,16] } : { {24{sign}}, readdata[ { byteaccess, 3b000 }, 8 ] };
    }
}
unit load(
    input   uint1   clock_CPUdecoder,
    input   uint1   start,
    output! uint1   busy(0),
    input   uint1   byteaccess,
    input   uint2   accesssize,
    input   uint1   dounsigned,
    output  int32   memoryinput,

    input!  uint32  readdata,
    output! uint1   readmemory,
    input!  uint1   memorybusy
) <reginputs> {
    // SIGN EXTENDER FOR 8 AND 16 BIT LOADS
    signextend SIGNEXTEND <@clock_CPUdecoder> (
        readdata <: readdata[0,16],
        is16or8 <: accesssize[0,1],
        byteaccess <: byteaccess,
        dounsigned <: dounsigned
    );

    readmemory := 0;

    algorithm <autorun> {
        while(1) {
            if( start ) {
                busy = 1; readmemory = 1; while( memorybusy ) {}                                    // START READ
                memoryinput = accesssize[1,1] ? readdata : SIGNEXTEND.memory168;                    // SIGN/ZERO EXTEND FOR 8 AND 16 BIT READS
                busy = 0;
            } else {
                busy = 0;
            }
        }
    }
}

// STORE UNIT FOR NON-FAST STORES ( to BRAM/SDRAM or 32 bit )
unit store(
    input   uint1   start,
    output! uint1   busy(0),
    input   uint1   sdramstore,

    output! uint1   writememory,
    input!  uint1   memorybusy
) <reginputs> {
    writememory := 0;

    algorithm <autorun> {
        while(1) {
            if( start ) { busy = 1; writememory = 1; while( memorybusy ) {} busy = 0; } else { busy = 0; }
        }
    }
}

// MINI DMA CONTROLLER
unit dma(
    input   uint$addr_width$  DMASOURCE,
    input   uint$addr_width$  DMASOURCEADD,
    input   uint$addr_width$  DMADEST,
    input   uint$addr_width$  DMADESTADD,
    input   uint$addr_width$  DMACOUNT,
    input   uint8   DMACYCLES,
    input   uint4   DMAMODE,
    input   uint8   DMASET,
    output  uint2   DMAACCESSSIZE,
    output! uint2   DMAACTIVE(0),

    input   uint1   start,
    output! uint$addr_width$  address,
    output! uint32  writedata,
    output! uint1   writememory,
    output! uint1   readmemory,
    input!  uint32  readdata,
    input!  uint1   memorybusy
) <reginputs> {
    uint1   srcBRAM <:: ~DMASOURCE[26,1] & ~DMASOURCE[25,1] & ~DMASOURCE[15,1];                                                     // SOURCE IS BRAM
    uint1   destBRAM <:: ~DMADEST[26,1] & ~DMADEST[25,1] & ~DMADEST[15,1];                                                          // DEST IS BRAM

    uint1   srcSET <:: ( DMASOURCE == 27hfe0e );                                                                                    // SOURCE IS THE SET VALUE REGISTER, NO LOADING REQUIRED
    uint1   src16bit <:: ( srcSET | DMASOURCE[26,1] | DMASOURCE[25,1] | srcBRAM ) & ~DMASOURCE[0,1];                                // SOURCE IS 16 BIT CAPABLE
    uint1   destIO <:: ~DMADEST[26,1] & ~DMADEST[25,1] & DMADEST[15,1];                                                             // DESTINATION IS I/O REGISTER
    uint1   dest16bit <:: ( DMADEST[26,1] | DMADEST[25,1] | destBRAM ) & ~DMADEST[0,1];                                             // DESTINATION IS 16 BIT CAPABLE
    uint1   DMA16BIT = uninitialised;               uint1   DMA32BIT = uninitialised;

    // 16/32 BIT FLAGS FOR SOURCE&DEST + SET&DEST
    uint1   SD16 <:: src16bit & dest16bit & ~DMACOUNT[0,1];
    uint1   SSD16 <:: srcSET & dest16bit & ~DMACOUNT[0,1];
    uint1   SD32 <:: src16bit & dest16bit & ~|DMACOUNT[0,2];
    uint1   SSD32 <:: srcSET & dest16bit & ~|DMACOUNT[0,2];

    // 16/32 BIT FLAGS FOR SOURCE&DEST ADD
    uint1   ADD16 <:: ~DMASOURCEADD[0,1] & ~DMADESTADD[0,1];
    uint1   ADD32 <:: ~|DMASOURCEADD[0,2] & ~|DMADESTADD[0,2];

    // COUNTERS FOR PIXEL BLOCK TRANSFERS
    uint1   PB4pixel = uninitialised;               uint3   PBmax <:: PB4pixel ? 4 : 2;                 uint3   PBcount = uninitialised;
    uint3   PBcountp1 <:: PBcount + 1;              uint1   PBwritewait <:: ( PBcountp1 != PBmax );

    uint4   dmamode = uninitialized;                uint$addr_width$  dmacount = uninitialised;         uint$addr_width$  dmacountNEXT <:: dmacount - ( DMA32BIT ? 4 : DMA16BIT | PB4pixel ? 2 : 1 );
    uint8   dmacycles = uninitialised;              uint8   dmacyclesNEXT <:: dmacycles - 1;
    uint$addr_width$  dmasrc = uninitialised;       uint$addr_width$  dmasrc2 <:: dmasrc + 2;           uint$addr_width$  dmasrc4 <:: dmasrc + 4;
    uint$addr_width$  dmasrcNEXT <:: DMA32BIT ? dmasrc4 : DMA16BIT ? dmasrc2 : dmasrc + 1;
    uint$addr_width$  dmasrcADD <:: dmasrc + DMASOURCEADD;    uint$addr_width$  dmasrcNEXTLINE <:: dmasrcADD - DMACOUNT;
    uint$addr_width$  dmadest = uninitialised;      uint$addr_width$  dmadest2 <:: dmadest + 2;         uint$addr_width$  dmadestNEXT <:: DMA32BIT ? dmadest + 4 : DMA16BIT ? dmadest2 : dmadest + 1;
    uint$addr_width$  dmadestADD <:: dmadest + DMADESTADD;    uint$addr_width$  dnadestNEXTLINE <:: dmadestADD - DMACOUNT;
    uint1   dmablue <:: ( dmadest[0,4] == 4h6 );
    uint32  memoryinput = uninitialised;

    writememory := 0; readmemory := 0;

    algorithm <autorun> {
        while(1) {
            if( start ) {
                switch( dmamode[3,1] ) {
                    case 0: {
                        while( |dmacount ) {                                                                                        // SINGLE CYCLE MODE
                            address = dmasrc; readmemory = ~srcSET;
                            switch( { srcSET, DMAACTIVE[1,1] } ) {
                                case 2b00: {
                                    while( memorybusy ) {} memoryinput = readdata;
                                    address = dmadest; writedata = DMA16BIT | DMA32BIT ? memoryinput :  memoryinput[ { dmasrc[0,1], 3b000 }, 8 ];
                                    writememory = 1; while( memorybusy ) {}
                                }
                                case 2b01: {                                                                                        // SPECIAL MULTI-PIXEL PIXELBLOCK / TILE / SAMPLE / SDCARD WRITE
                                    while( memorybusy ) {} memoryinput = readdata;
                                    address = dmadest; PBcount = 0;
                                    while( PBcount != PBmax ) {
                                        writedata = memoryinput[ { PBcount, 3b000 }, 8]; if( PBwritewait ) { writememory = 1; ++: ++: } else { writememory = 1; } PBcount = PBcountp1;
                                    }
                                }
                                case 2b10: { address = dmadest; writememory = 1; while( memorybusy ) {} }
                                case 2b11: {                                                                                        // SPECIAL MULTI-SRC SET PIXELBLOCK / TILE / SAMPLE / SDCARD WRITE
                                    address = dmadest; PBcount = 0;
                                    while( PBcount != PBmax ) { if( PBwritewait ) { writememory = 1; ++: ++: } else { writememory = 1; } PBcount = PBcountp1; }
                                }
                            }
                            switch( dmamode[0,3] ) {
                                default: {}                                                                                         // INACTIVE / UNDEFINED
                                case 1: { dmasrc = dmasrcNEXT; }                                                                    // DMA multi-src to single-dest PIXEL BLOCK 8 bit + SDCARD WRITE
                                case 2: { dmasrc = dmasrcNEXT; if( dmablue ) { dmadest = 27hd672; } else { dmadest = dmadest2; } }  // DMA SPECIAL PIXEL BLOCK RGB
                                case 3: { dmasrc = dmasrcNEXT; dmadest = dmadestNEXT; }                                             // DMA multi-src to multi-dest MEMCPY
                                case 4: { dmadest = dmadestNEXT; }                                                                  // DMA single-src to multi-dest MEMSET + SDCARD READ
                                case 5: {}                                                                                          // DMA single-src to single-dest SET TILE/CBLITTER to single value
                                case 6: { dmasrc = dmasrcADD; dmadest = dmadestADD; }                                               // DMA increase src and dest by additions
                                case 7: { dmasrc = PB4pixel ? dmasrc4 : dmasrc2; }                                                  // DMA 32/16bit to 4/2 pixels for PIXEL BLOCK special mode
                            }
                            dmacount = dmacountNEXT;
                        }
                    }
                    case 1: {
                        while( |dmacycles ) {
                            while( |dmacount ) {                                                                                    // MULTI-CYCLE MODE
                                address = dmasrc; readmemory = ~srcSET;
                                switch( srcSET ) {
                                    case 0: {
                                        while( memorybusy ) {} memoryinput = readdata;
                                        address = dmadest; writedata = DMA16BIT ? memoryinput :  memoryinput[ { dmasrc[0,1], 3b000 }, 8 ];
                                        writememory = 1; while( memorybusy ) {}
                                    }
                                    case 1: { address = dmadest;  writememory = 1; while( memorybusy ) {} }
                                }
                                if( ~dmamode[0,1] ) { dmasrc = dmasrcNEXT; }                                                        // MEMCPY_RECTANGLE
                                dmadest = dmadestNEXT; dmacount = dmacountNEXT;                                                     // MEMCPY and MEMSET RECTANGLE

                            }
                            if( ~dmamode[0,1] ) { dmasrc = dmasrcNEXTLINE; }
                            dmadest = dnadestNEXTLINE; dmacount = DMACOUNT; dmacycles = dmacyclesNEXT;
                        }
                    }
                }
                DMAACTIVE = 0;
            } else { dmamode = DMAMODE; dmasrc = DMASOURCE; dmadest = DMADEST; dmacount = DMACOUNT; dmacycles = DMACYCLES; writedata = {4{DMASET}}; }
        }
    }

    always_after {
        if( start ) {
            DMAACTIVE = &dmamode[0,3] ? 2 : 1; DMA16BIT = 0; DMA32BIT = 0; PB4pixel = 0;
            switch( dmamode ) {
                default: {}                                                                                                     // DEFAULT TO 8 BIT MODE
                case 3: { DMA32BIT = SD32; DMA16BIT = SD16; }                                                                   // MEMCPY IS 32/16 BIT CAPABLE
                case 4: { DMA32BIT = SSD32; DMA16BIT = SSD16; }                                                                 // MEMSET IS 32/16 BIT CAPABLE
                case 7: { PB4pixel = ~|dmacount[0,2] & src16bit; }                                                              // PIXELBLOCK MODE CAN OPERATE AT 4 PIXELS, NOT 2
                case 8: { DMA32BIT = SD32 & ADD32; DMA16BIT = SD16 & ADD16; }                                                   // MEMCPY RECTANGLE IS 32/16 BIT CAPABLE
                case 9: { DMA32BIT = SSD32 & ADD32; DMA16BIT = SSD16 & ADD16; }                                                 // MEMSET RECTANGLE IS 32/16 BIT CAPABLE
            }
            DMAACCESSSIZE = DMA32BIT | PB4pixel? 2b10 : DMA16BIT | &dmamode[0,3] ? 2b01: 2b00;                                  // SET THE ACCESS SIZE ( SPECIAL PIXEL BLOCK IS 32/16 for 4/2 pixels )
        }
    }
}
